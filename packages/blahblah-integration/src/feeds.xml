<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"
  xmlns:dc="http://purl.org/dc/elements/1.1/">
  <author>
    <name>어썸블로그</name>
  </author>
  <id>국내의 좋은 블로그 글들을 매일 배달해줍니다.</id>
  <title>Korea Awesome Developers</title>
  <updated>2018-03-17T12:27:00+09:00</updated>
  <entry>
    <author>
      <name>charsyam</name>
    </author>
    <id>https://charsyam.wordpress.com/2018/03/06/%ec%9e%85-%ea%b0%9c%eb%b0%9c-memcrashed-ddos%ec%97%90-%eb%8c%80%ed%95%b4%ec%84%9c-%ec%82%b4%ec%a7%9d-%ec%95%84%eb%8a%94%ec%b2%99-%ed%95%b4%eb%b4%85%ec%8b%9c%eb%8b%a4/</id>
    <link href="https://charsyam.wordpress.com/2018/03/06/%ec%9e%85-%ea%b0%9c%eb%b0%9c-memcrashed-ddos%ec%97%90-%eb%8c%80%ed%95%b4%ec%84%9c-%ec%82%b4%ec%a7%9d-%ec%95%84%eb%8a%94%ec%b2%99-%ed%95%b4%eb%b4%85%ec%8b%9c%eb%8b%a4/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;우와, 최근에 CloudFlare 에서 아주 재미있는 제목으로 글을 냈습니다. 제목은 &lt;a href=&quot;https://blog.cloudflare.com/memcrashed-major-amplification-attacks-from-port-11211/&quot; target=&quot;_blank&quot;&gt;Memcrashed – Major amplification attacks from UDP port 11211&lt;/a&gt; 로, UDP 11211 포트를 이용한 대규모 DDOS 어택 정도로 생각하시면 될듯합니다.(영어를 못해서 의역으로…)&lt;/p&gt;
&lt;p&gt;사실 원문을 보시는게 더 쉽게 이해하실 듯 하지만(당연히 원문 처럼 설명한 능력도 없지만…) public 에 포트가 열려있는 memcached 를 이용한 DDOS 방법입니다. 그래서 제목이 memcrashed 가 된거죠. memcached는 웹서비스 쪽에서는 누구나 알고 있는 유명한 In-Memory caching 솔루션입니다.(&lt;a href=&quot;http://memcached.org/&quot; rel=&quot;nofollow&quot;&gt;http://memcached.org/&lt;/a&gt;) 성능도 아주 끝내주죠. 간단한 연산은 초당 10~20만 까지도 가능합니다.&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;2714&quot; data-permalink=&quot;https://charsyam.wordpress.com/2018/03/06/%ec%9e%85-%ea%b0%9c%eb%b0%9c-memcrashed-ddos%ec%97%90-%eb%8c%80%ed%95%b4%ec%84%9c-%ec%82%b4%ec%a7%9d-%ec%95%84%eb%8a%94%ec%b2%99-%ed%95%b4%eb%b4%85%ec%8b%9c%eb%8b%a4/memcrashed/#main&quot; data-orig-file=&quot;https://charsyam.files.wordpress.com/2018/03/memcrashed.png?w=776&quot; data-orig-size=&quot;1237,770&quot; data-comments-opened=&quot;1&quot; data-image-meta='{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}' data-image-title=&quot;memcrashed&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://charsyam.files.wordpress.com/2018/03/memcrashed.png?w=776?w=300&quot; data-large-file=&quot;https://charsyam.files.wordpress.com/2018/03/memcrashed.png?w=776?w=776&quot; src=&quot;https://charsyam.files.wordpress.com/2018/03/memcrashed.png?w=776&quot; alt=&quot;memcrashed&quot; class=&quot;alignnone size-full wp-image-2714&quot; srcset=&quot;https://charsyam.files.wordpress.com/2018/03/memcrashed.png?w=776 776w, https://charsyam.files.wordpress.com/2018/03/memcrashed.png?w=150 150w, https://charsyam.files.wordpress.com/2018/03/memcrashed.png?w=300 300w, https://charsyam.files.wordpress.com/2018/03/memcrashed.png?w=768 768w, https://charsyam.files.wordpress.com/2018/03/memcrashed.png?w=1024 1024w, https://charsyam.files.wordpress.com/2018/03/memcrashed.png 1237w&quot; sizes=&quot;(max-width: 776px) 100vw, 776px&quot;&gt;&lt;/p&gt;
&lt;p&gt;먼저 해당 이슈는 일단 다음과 같은 전제조건이 모두 만족해야 DDOS 공격이 가능합니다..&lt;/p&gt;
&lt;li&gt;memcached 가 public 하게 열려있다. – 사실 절대로 해서는 안되는 행위입니다.&lt;/li&gt;
&lt;li&gt;memcached 가 udp 포트를 열고 있다.&lt;/li&gt;
&lt;p&gt;그리고 memcached 자체가 DDOS 공격의 대상이 아니라, 공격을 할 수 있는 수단으로 사용됩니다.&lt;/p&gt;
&lt;p&gt;저도 몰랐던 사실인데(나름 memcached는 그래도 아는편이라고 생각했는데…) memcached는 UDP도 지원합니다.(당연히 UDP다 보니, 명령이나 응답이 유실될 수 도 있습니다.) 원래는 명시적으로 -U 0 을 주지 않는 이상은 UDP 11211 포트로 생성됩니다. memcached 1.5.5 버전을 받아서 설치하고 실행해보면 자동으로 IPv4(TCP, UDP), IPv6(TCP, UDP) 11211 포트가 열리는 것을 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;2715&quot; data-permalink=&quot;https://charsyam.wordpress.com/2018/03/06/%ec%9e%85-%ea%b0%9c%eb%b0%9c-memcrashed-ddos%ec%97%90-%eb%8c%80%ed%95%b4%ec%84%9c-%ec%82%b4%ec%a7%9d-%ec%95%84%eb%8a%94%ec%b2%99-%ed%95%b4%eb%b4%85%ec%8b%9c%eb%8b%a4/memcached_1_5_5_port/#main&quot; data-orig-file=&quot;https://charsyam.files.wordpress.com/2018/03/memcached_1_5_5_port.png?w=776&quot; data-orig-size=&quot;1928,246&quot; data-comments-opened=&quot;1&quot; data-image-meta='{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}' data-image-title=&quot;memcached_1_5_5_port&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://charsyam.files.wordpress.com/2018/03/memcached_1_5_5_port.png?w=776?w=300&quot; data-large-file=&quot;https://charsyam.files.wordpress.com/2018/03/memcached_1_5_5_port.png?w=776?w=776&quot; src=&quot;https://charsyam.files.wordpress.com/2018/03/memcached_1_5_5_port.png?w=776&quot; alt=&quot;memcached_1_5_5_port&quot; class=&quot;alignnone size-full wp-image-2715&quot; srcset=&quot;https://charsyam.files.wordpress.com/2018/03/memcached_1_5_5_port.png?w=776 776w, https://charsyam.files.wordpress.com/2018/03/memcached_1_5_5_port.png?w=1552 1552w, https://charsyam.files.wordpress.com/2018/03/memcached_1_5_5_port.png?w=150 150w, https://charsyam.files.wordpress.com/2018/03/memcached_1_5_5_port.png?w=300 300w, https://charsyam.files.wordpress.com/2018/03/memcached_1_5_5_port.png?w=768 768w, https://charsyam.files.wordpress.com/2018/03/memcached_1_5_5_port.png?w=1024 1024w&quot; sizes=&quot;(max-width: 776px) 100vw, 776px&quot;&gt;&lt;/p&gt;
&lt;p&gt;즉 udp로 명령을 보내고 사용할 수 있다는 거죠. UDP 프로토콜은, 기존 TCP 프로토콜과 거의동일하지만 아주 미세한 차이가 있습니다.&lt;/p&gt;
&lt;p&gt;그런데 UDP의 경우에는 source ip를 위조하는 것에 굉장히 취약합니다.(IP Spoofing), TCP도 불가능한건 아니지만 훨씬 더 어렵습니다. 여기서 자세한 설명 없이 ip header 와 udp header를 첨부합니다.&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;2716&quot; data-permalink=&quot;https://charsyam.wordpress.com/2018/03/06/%ec%9e%85-%ea%b0%9c%eb%b0%9c-memcrashed-ddos%ec%97%90-%eb%8c%80%ed%95%b4%ec%84%9c-%ec%82%b4%ec%a7%9d-%ec%95%84%eb%8a%94%ec%b2%99-%ed%95%b4%eb%b4%85%ec%8b%9c%eb%8b%a4/ip_header/#main&quot; data-orig-file=&quot;https://charsyam.files.wordpress.com/2018/03/ip_header.gif?w=776&quot; data-orig-size=&quot;400,168&quot; data-comments-opened=&quot;1&quot; data-image-meta='{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}' data-image-title=&quot;ip_header&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://charsyam.files.wordpress.com/2018/03/ip_header.gif?w=776?w=300&quot; data-large-file=&quot;https://charsyam.files.wordpress.com/2018/03/ip_header.gif?w=776?w=400&quot; src=&quot;https://charsyam.files.wordpress.com/2018/03/ip_header.gif?w=776&quot; alt=&quot;ip_header&quot; class=&quot;alignnone size-full wp-image-2716&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;2717&quot; data-permalink=&quot;https://charsyam.wordpress.com/2018/03/06/%ec%9e%85-%ea%b0%9c%eb%b0%9c-memcrashed-ddos%ec%97%90-%eb%8c%80%ed%95%b4%ec%84%9c-%ec%82%b4%ec%a7%9d-%ec%95%84%eb%8a%94%ec%b2%99-%ed%95%b4%eb%b4%85%ec%8b%9c%eb%8b%a4/udp_header/#main&quot; data-orig-file=&quot;https://charsyam.files.wordpress.com/2018/03/udp_header.gif?w=776&quot; data-orig-size=&quot;500,177&quot; data-comments-opened=&quot;1&quot; data-image-meta='{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}' data-image-title=&quot;udp_header&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://charsyam.files.wordpress.com/2018/03/udp_header.gif?w=776?w=300&quot; data-large-file=&quot;https://charsyam.files.wordpress.com/2018/03/udp_header.gif?w=776?w=500&quot; src=&quot;https://charsyam.files.wordpress.com/2018/03/udp_header.gif?w=776&quot; alt=&quot;udp_header&quot; class=&quot;alignnone size-full wp-image-2717&quot;&gt;&lt;/p&gt;
&lt;p&gt;IP Spoofing 을 통해서 데이터를 보내게 되면 memcached 입장에서는 송신자를 체크할 방법이 없습니다. 그래서 그 응답결과를 송신자(로 속여진 victim) 에게 보내게 되는겁니다. 엄청나게 UDP 패킷이 전송될 수 있겠죠. 실제로 memcached는 디폴트로 1MB chunk를 사용하므로 데이터는 한번에 1MB 까지 가능합니다. 이렇게 열려있다는 것은 거기에 자신이 원하는 데이터도 심을 수 있으니…(다만 UDP로 1MB 데이터를 넣기는 힘들겠지만… 이 얘기는 TCP 도 열려있고 방화벽이 없을 가능성이 높으니… 원하는 데이터를 쉽게 넣을 수 있을듯 합니다.) 초당 엄청난 트래픽을 보낼 수 있게 됩니다.&lt;/p&gt;
&lt;p&gt;실제로 간단하게 셋팅을 해보았습니다. 간단하게 외부의 victim 에서 응답이 수신되는 걸 확인 할 수 있었습니다.&lt;/p&gt;
&lt;p&gt;&lt;img data-attachment-id=&quot;2718&quot; data-permalink=&quot;https://charsyam.wordpress.com/2018/03/06/%ec%9e%85-%ea%b0%9c%eb%b0%9c-memcrashed-ddos%ec%97%90-%eb%8c%80%ed%95%b4%ec%84%9c-%ec%82%b4%ec%a7%9d-%ec%95%84%eb%8a%94%ec%b2%99-%ed%95%b4%eb%b4%85%ec%8b%9c%eb%8b%a4/spoof/#main&quot; data-orig-file=&quot;https://charsyam.files.wordpress.com/2018/03/spoof.png?w=776&quot; data-orig-size=&quot;1656,983&quot; data-comments-opened=&quot;1&quot; data-image-meta='{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}' data-image-title=&quot;spoof&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://charsyam.files.wordpress.com/2018/03/spoof.png?w=776?w=300&quot; data-large-file=&quot;https://charsyam.files.wordpress.com/2018/03/spoof.png?w=776?w=776&quot; src=&quot;https://charsyam.files.wordpress.com/2018/03/spoof.png?w=776&quot; alt=&quot;spoof.png&quot; class=&quot;alignnone size-full wp-image-2718&quot; srcset=&quot;https://charsyam.files.wordpress.com/2018/03/spoof.png?w=776 776w, https://charsyam.files.wordpress.com/2018/03/spoof.png?w=1552 1552w, https://charsyam.files.wordpress.com/2018/03/spoof.png?w=150 150w, https://charsyam.files.wordpress.com/2018/03/spoof.png?w=300 300w, https://charsyam.files.wordpress.com/2018/03/spoof.png?w=768 768w, https://charsyam.files.wordpress.com/2018/03/spoof.png?w=1024 1024w&quot; sizes=&quot;(max-width: 776px) 100vw, 776px&quot;&gt;&lt;/p&gt;
&lt;p&gt;원문을 보면 nmap등을 이용해 간단하게 public 에 열려있는 memcached 서버들을 찾을 수 있습니다. 무시무시하지요.&lt;/p&gt;
&lt;p&gt;그럼 결론, 우리는 어떻게 대비해야 하는가?&lt;br&gt;
 1] memcached를 public 에 공개하지 않는다. 이미 열려있는 곳이라면 iptable 등으로 방화벽을 따로 설정해서 UDP및 TCP 자체를 막으셔야 합니다. 이런 캐시서버는 public에 열리면 그냥 지옥입니다. redis의 경우도 바로 해당 계정이 탈취 당할 수 있습니다.(udp는 지원안합니다만…)&lt;/p&gt;
&lt;p&gt;2] UDP를 안 쓰면 사용하지 않는다.&lt;br&gt;
 memcached 1.5.5 까지는 -U 0 라는 옵션을 주지 않으면 자동으로 UDP 11211 포트를 사용하였지만… 해당 이슈 이후에 긴급하게 나온 memcached 1.5.6은 UDP가 디폴트로 꺼져있습니다. 그러나 아마 대부분은 이전 버전을 쓰실거니… 시작 옵션도 미리 바꿔두시는게 좋습니다. 다음 &lt;a href=&quot;https://github.com/memcached/memcached/commit/dbb7a8af90054bf4ef51f5814ef7ceb17d83d974&quot;&gt;memcached patch&lt;/a&gt; 를 보시면 UDP가 이제 디폴트로 disable 된걸 볼 수 있습니다.&lt;/p&gt;
&lt;p&gt;보안 관련 내용이라, 사용된 소스나 자세한 정보는 적지 않습니다.(다만 엄청 쉬워요 T.T)&lt;/p&gt;
&lt;p&gt;ps. 보안 이슈라는 것이, 방비를 잘 하더라도 안당한다고 말할 수 없지만, 대부분의 보안 이슈는, 사용하지 않는 서비스를 public 에 노출한다거나, 잘못된 설정으로 인해서 발생하는 경우가 많습니다. memcached 이슈도 마찬가지이고, S3에 대한 &lt;a href=&quot;https://www.httpcs.com/fr/actualites-cybersecurite/impact-study-aws-buckets-amazon-s3-configuration&quot;&gt;리포트&lt;/a&gt; 를 보셔도 실제로 전체 s3 버킷의 20%가 쓰기도 열려있다라는 충격적인 사실을 아실 수 있습니다. 큰 조직에서는 이런 문제를 전담해줄 만한 인력이 있지만, 중소 규모 사이즈에서는 더 신경을 많이 쓰셔야 합니다.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>[입 개발] Memcrashed DDOS에 대해서 살짝 아는척 해봅시다.</title>
    <updated>2018-03-06T21:03:42+09:00</updated>
    <dc:date>2018-03-06T21:03:42+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>강진우</name>
    </author>
    <id>https://brunch.co.kr/@@3Y0/39</id>
    <link href="https://brunch.co.kr/@@3Y0/39"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;&lt;p&gt;이번 글에서는 ElasticSearch (이하 ES)의 클러스터를 설계하기 위해 필요한 요소들 중 샤드의 개수가 검색 성능에 미치는 영향을 바탕으로 적정한 샤드의 개수와 데이터 노드의 개수를 산정하는 방법에 대해 이야기해 보려고 합니다. ES는 대부분의 경우 기본 설정 만으로도 충분한 성능을 보여 주지만 서비스에 투입하기 위한 검색 엔진으로 사용하거나 대용&lt;img src=&quot;http://t1.daumcdn.net/brunch/service/user/3Y0/image/nTl2Xnd-3qp1tHhidTD3v4e_wwg.png&quot; width=&quot;500&quot;&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>클러스터 설계하기 - #1 검색 성능과 샤드 개수 - ElasticSearch</title>
    <updated>2018-03-05T22:23:02+09:00</updated>
    <dc:date>2018-03-05T22:23:02+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>MIN™</name>
    </author>
    <id>http://www.kmshack.kr/2018/03/support-library-28-0-0-alpha1%ec%97%90-%ec%b6%94%ea%b0%80%eb%90%9c-bottomappbar/</id>
    <link href="http://www.kmshack.kr/2018/03/support-library-28-0-0-alpha1%ec%97%90-%ec%b6%94%ea%b0%80%eb%90%9c-bottomappbar/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;&lt;p&gt;지난 주 Google은 Android P 프리뷰를 발표하면서 디자인 서포트 라이브러리도 새로운 알파버전(com.android.support:design:28.0.0-alpha1)을 공개하였습니다. 이 새로운 버전의 라이브러리에는 MaterialButton, MaterialCardView, Chips 및 BottomAppBar에 대한 레이아웃이 포함되어있습니다. 툴바를 확장한 BottomAppBar는 큰기기의 화면을때 사용자가 엄지손가락으로 버튼에 접근하지 못하는것에 대한 절충안으로 자용자에게 편의성을 제공하기위해 3가지의 방법을 지원합니다. FloatingActionButton의 app:fabCradleVerticalOffset 속성을 이용하면 반원을 배치 시킬 수 있습니다. app:fabAlignmentMode 속성을 이용하여 … &lt;a href=&quot;http://www.kmshack.kr/2018/03/support-library-28-0-0-alpha1%ec%97%90-%ec%b6%94%ea%b0%80%eb%90%9c-bottomappbar/&quot; class=&quot;more-link&quot;&gt;&lt;span class=&quot;screen-reader-text&quot;&gt;Support Library 28.0.0 alpha1에 추가된 BottomAppBar&lt;/span&gt; 더보기&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>Support Library 28.0.0 alpha1에 추가된 BottomAppBar</title>
    <updated>2018-03-16T22:11:43+09:00</updated>
    <dc:date>2018-03-16T22:11:43+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>velopert</name>
    </author>
    <id>https://velopert.com/3595</id>
    <link href="https://velopert.com/3595"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;&lt;p&gt;타입스크립트를 리액트와 함께 사용하게 됐을 때 어떠한 이점이 있는지, 또 어떻게 사용해야하는지 빠르게 한번 배워봅시다!
프로젝트에 사용된 코드: https://github.com/velopert/typescript-react-sample
이 강의는 FastCampus 오프라인 강의 에서 사용된 자료이며 부연설명이 생략되어있습니다.
서론
JavaScript 는 weakly typed 언어 입니다. 따라서,

이런게 너무 자연스럽게됩니다.…&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>TypeScript with React + Redux/Immutable.js 빠르게 배우기</title>
    <updated>2018-03-04T15:01:10+09:00</updated>
    <dc:date>2018-03-04T15:01:10+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>velopert</name>
    </author>
    <id>https://velopert.com/3591</id>
    <link href="https://velopert.com/3591"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;&lt;p&gt;지난 튜토리얼에서 우리는, 리액트 앱을 유닛 테스팅을 통해 모든것이 잘 작동하는지 검증하는 방법을 알아보았습니다. 이번 튜토리얼에서는, 한발 더 나아가 조금 더 복잡한 구조의 앱을 테스팅 할 수 있도록, 리덕스를 사용한 리액트 앱을 테스팅 하는 방법을 알아보겠습니다.
이 프로젝트에 사용된 코드는…&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>React + Redux 앱 테스트</title>
    <updated>2018-03-04T14:36:15+09:00</updated>
    <dc:date>2018-03-04T14:36:15+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>velopert</name>
    </author>
    <id>https://velopert.com/3587</id>
    <link href="https://velopert.com/3587"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;&lt;p&gt;이 튜토리얼에서는, 유닛 테스팅의 간단한 소개와, create-react-app 으로 만든 프로젝트에서 Jest 와 Enzyme 을 통하여 유닛 테스팅을 하는 방법에 대하여 다뤄보겠습니다.
Github 코드: https://github.com/vlpt-playground/react-test-tutorial
이 강의는 FastCampus 오프라인 강의 에서 사용된 자료이며 부연설명이 생략되어있습니다.
유닛 테스팅이란?
개발적인 측면에서, 유닛 테스팅이라는…&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>Jest, Enzyme 을 통한 리액트 컴포넌트 유닛 테스팅</title>
    <updated>2018-03-04T14:26:23+09:00</updated>
    <dc:date>2018-03-04T14:26:23+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>Seulgi Kim</name>
    </author>
    <id>http://blog.seulgi.kim/2018/03/w10.html</id>
    <link href="http://blog.seulgi.kim/2018/03/w10.html"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt; 이 포스팅은 그냥 지난 한 주간 읽었던 것들을 정리하는 포스트입니다. 그냥 예전에 봤던 글 중 나중에 필요한데 뭐였는지 기억 안 나는 글들이 있어서 쓰기 시작했습니다.&lt;br&gt; 보통 하는 일과 관련된 글들이 올라오겠지만 딱히 정해둔 주제는 없고, 그때그때 관심 있었던 것을 읽었기 때문에 지난주에 쓰인 글일 수도 있고 몇 년 전에 쓰인 글일 수도 있습니다.&lt;/p&gt; &lt;h4&gt;&lt;a href=&quot;https://it.slashdot.org/story/18/03/08/2049255/slack-is-shutting-down-its-irc-gateway&quot; target=&quot;_blank&quot;&gt;Slack Is Shutting Down Its IRC Gateway&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt; 채팅 프로그램들은 누구나 겪는 문제 중 하나가 일부 사용자가 IRC 클라이언트를 포기하지 않는다는 것이다. &lt;a href=&quot;https://slack.com/&quot; target=&quot;_blank&quot;&gt;Slack&lt;/a&gt;도 마찬가지였고, 이에 대해서 Slack은 &lt;a href=&quot;https://get.slack.help/hc/en-us/articles/201727913-Connect-to-Slack-over-IRC-and-XMPP&quot; target=&quot;_blank&quot;&gt;IRC Gateway&lt;/a&gt;를 지원하여 IRC 사용자들도 Slack에 포함시키려는 노력을 하였다.&lt;/p&gt;
&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://imgs.xkcd.com/comics/team_chat.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; data-original-height=&quot;299&quot; data-original-width=&quot;700&quot; height=&quot;136&quot; src=&quot;https://imgs.xkcd.com/comics/team_chat.png&quot; width=&quot;320&quot;&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://xkcd.com/1782/&quot;&gt;https://xkcd.com/1782/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt; 하지만 이제는 Slack을 IRC 클라이언트에서 사용할 수 없다. Slack이 IRC 서포트를 중지한다고 발표했다.&lt;br&gt; 모든 플랫폼에서 같은 사용자 경험을 주고 싶은데 IRC에서 지원하지 않는 기능들이 방해되기 때문이라고 한다. 하지만 이미 Slack에서 IRC Gateway를 사용하는 사람들은 그 한정된 기능에 적응하고 사용하고 있는 사람들일 텐데, 이 사람들을 포기하면서 같은 사용자 경험을 주는 것이 그리 중요한 일일까 싶다. 그보다는 IRC Gateway를 이용하는 사람들을 Slack이 유료로 파는 기능들을 사용하지 않기 때문이 아닐까 싶다.&lt;/p&gt; &lt;h4&gt;&lt;a href=&quot;https://news.slashdot.org/story/17/09/11/1450248/why-rss-still-beats-facebook-and-twitter-for-tracking-news&quot; target=&quot;_blank&quot;&gt;Why RSS Still Beats Facebook and Twitter for Tracking News&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt; Facebook이나 Twitter 같은 &lt;a href=&quot;https://en.wikipedia.org/wiki/Social_networking_service&quot; target=&quot;_blank&quot;&gt;SNS&lt;/a&gt;가 생긴 뒤로 많은 사람이 자신의 포스팅을 SNS에 올리기 시작했고, &lt;a href=&quot;https://en.wikipedia.org/wiki/RSS&quot; target=&quot;_blank&quot;&gt;RSS(Rich Site Summary)&lt;/a&gt;는 이제 사용되지 않을 것으로 생각했다. 대표적인 RSS 구독 서비스였던 &lt;a href=&quot;https://www.google.com/reader/about/&quot; target=&quot;_blank&quot;&gt;Google Reader&lt;/a&gt;가 2013년 서비스를 종료했던 것이 RSS의 죽음을 나타내는 가장 상징적인 사건이었다.&lt;br&gt; 하지만 사람들은 여전히 RSS를 포기하지 않았다. 5년이 지난 지금까지 사람들은 여전히 RSS를 사용하고 있다. RSS는 SNS가 가지지 못 하는 장점이 여러 개 있다.&lt;br&gt; 일단 RSS를 사용하면 내가 구독하고 있는 것을 못 보고 넘어갈 일이 없다. SNS는 기본적으로 최근 포스트를 우선으로 보여준다. 내가 매일 접속하여 꾸준히 보지 않으면, 놓치는 정보가 있을 수 있다.&lt;br&gt; 게다가 SNS에서 보여주는 정보는 내가 원하는 정보라고 확신할 수 없다. RSS는 내가 RSS Reader에 구독을 원하는 주소를 등록하는 방식이지만, SNS는 자신들이 추천하는 포스트를 나에게 보여준다. 나름대로의 추천 알고리즘을 통해 정보를 뿌려주지만 내가 원하는 글이라고 확신할 수 없다.&lt;br&gt; 마지막으로 RSS는 하나의 서비스만 사용하면 되는데, SNS는 종류별로 가입해야 한다. 글을 올리는 사람이 모든 SNS에 다 올리면 좋겠지만, 현실은 그렇지 않다. 모든 글을 구독하기 위해서는 모든 SNS에 가입해야 하고, 내가 원하는 글만 보는 것이 아니라 각 SNS가 추천하는 글도 다 보게 된다.&lt;br&gt; 이런 문제들을 해결할 방법이 나오기 전에는 RSS가 죽을 일은 없을 것 같다.&lt;/p&gt; &lt;h4&gt;static local variable&lt;/h4&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ko&quot;&gt;
&lt;div dir=&quot;ltr&quot; lang=&quot;ko&quot;&gt;싱글턴 글이 보이는데 요즘 세상에는 그냥 static 지역 변수 쓰면 99%는 오케이. 1%에 해당되는 경우는 보통 뭔가 잘못하고 있을 가능성이 높음.&lt;/div&gt;— minchul park (@summerlight00) &lt;a href=&quot;https://twitter.com/summerlight00/status/950543516450488320?ref_src=twsrc%5Etfw&quot;&gt;2018년 1월 9일&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async=&quot;&quot; charset=&quot;utf-8&quot; src=&quot;https://platform.twitter.com/widgets.js&quot;&gt;&lt;/script&gt;&lt;br&gt;&lt;p&gt; 일단 C++11 이후. 즉, 모던 C++에서는 맞는 말이다. 그 이전에서는 멀티 스레드 프로그램에서는 싱글턴을 사용해야 했는데, 그런 경우가 있으면 2018년에 모던 C++이 아닌 상황에서 이미 망한 프로젝트니까 빠르게 도망치자.&lt;br&gt; 과거에, 그러니까 C++의 abstract machine이 스레드에 대해 고려를 하지 않았던 시절에는 여러 스레드에서 동시에 static local variable을 사용하는 것이 문제가 될 수 있었다. 하지만 모던 C++에서는 abstract machine에 스레드 개념이 들어갔고, 여러 스레드가 동시에 접근하더라도 &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/storage_duration#Static_local_variables&quot; target=&quot;_blank&quot;&gt;static local variable이 단 한 번만 초기화돼야 한다&lt;/a&gt;고 명시됐으니 그냥 컴파일러를 믿고 사용하면 된다.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>2018년 10번째 주</title>
    <updated>2018-03-11T18:35:00+09:00</updated>
    <dc:date>2018-03-11T18:35:00+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>Seulgi Kim</name>
    </author>
    <id>http://blog.seulgi.kim/2018/03/w09.html</id>
    <link href="http://blog.seulgi.kim/2018/03/w09.html"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt; 이 포스팅은 그냥 지난 한 주간 읽었던 것들을 정리하는 포스트입니다. 그냥 예전에 봤던 글 중 나중에 필요한데 뭐였는지 기억 안 나는 글들이 있어서 쓰기 시작했습니다.&lt;br&gt; 보통 하는 일과 관련된 글들이 올라오겠지만 딱히 정해둔 주제는 없고, 그때그때 관심 있었던 것을 읽었기 때문에 지난주에 쓰인 글일 수도 있고 몇 년 전에 쓰인 글일 수도 있습니다.&lt;/p&gt; &lt;h4&gt;&lt;a href=&quot;http://www.trucsazeb.re/CppCoreGuidelines/docs/Lifetimes%20I%20and%20II%20-%20v0.9.1.pdf&quot; target=&quot;_blank&quot;&gt;Lifetime Safety: Preventing Leaks and Dangling&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Herb_Sutter&quot; target=&quot;_blank&quot;&gt;Herb Sutter&lt;/a&gt;와 Neil MacIntosh가 쓴 C++에서 &lt;a href=&quot;https://en.wikipedia.org/wiki/Memory_leak&quot; target=&quot;_blank&quot;&gt;memory leak&lt;/a&gt;과 &lt;a href=&quot;https://en.wikipedia.org/wiki/Dangling_pointer&quot; target=&quot;_blank&quot;&gt;dangling pointer&lt;/a&gt;를 어떻게 없앨 수 있는지에 관한 글이다. 일반적으로 C++의 포인터는 매우 강력하기 때문에, memory leak이나 dangling pointer를 없애기 위해서 C++의 기능을 일부 제한하거나 새로운 문법을 추가하거나 한다. 하지만 이 글에서는 언어를 바꾸지 않으면서 런타임 오버헤드 없이 컴파일 타임에 분석할 수 있는 알고리즘을 제시한다.&lt;br&gt; 특히 이 알고리즘은 프로그램 전체를 분석하는 것이 아니라 함수 단위, 정확히는 블록 단위로 적용할 수 있고, 변수 재사용 등 많은 스타일 가이드에서 권하지 않지만 실제로는 많이 사용되는 패턴들에 대해서도 고려돼있기 때문에 레거시 코드에 적용하기도 좋다.&lt;br&gt; 기계적인 작업이기 때문에 툴을 만드는 것이 가장 좋을 것이다. 하지만 툴을 만들 여유가 없더라도 포인터나 레퍼런스를 어떻게 써야 안전한지 보여주는 좋은 글이기 때문에 일단 읽어보는 것을 추천한다.&lt;/p&gt; &lt;h4&gt;&lt;a href=&quot;https://githubengineering.com/ddos-incident-report/&quot; target=&quot;_blank&quot;&gt;GitHub DDoS 공격당함&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt; 지난 2018년 2월 28일, &lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt;이 &lt;a href=&quot;https://en.wikipedia.org/wiki/Denial-of-service_attack#Distributed_DoS_attack&quot; target=&quot;_blank&quot;&gt;Distributed Denial-of-Service(a.k.a. DDoS)&lt;/a&gt; 공격을 당해 약 10분 정도 서비스가 멈췄었다. 이 공격은 &lt;a href=&quot;https://memcached.org/&quot; target=&quot;_blank&quot;&gt;memcached&lt;/a&gt;를 이용한 공격으로 중국의 0kee team이 찾은 &lt;a href=&quot;http://powerofcommunity.net/poc2017/shengbao.pdf&quot; target=&quot;_blank&quot;&gt;Deluge&lt;/a&gt;라는 기법을 이용한 공격이었다.&lt;br&gt; Deluge는 다른 서버에 설치된 memcached에 데이터를 요청할 때 source IP를 목표가 되는 서버의 IP로 수정하여 보내, memcached 서버가 목표가 된 서버로 데이터를 보내게 만드는 공격이다.&lt;br&gt; 이런 부류의 공격을 &lt;a href=&quot;https://en.wikipedia.org/wiki/IP_address_spoofing&quot; target=&quot;_blank&quot;&gt;IP spoofing&lt;/a&gt;이라고 하는데, 이는 &lt;a href=&quot;https://en.wikipedia.org/wiki/Internet_Protocol&quot; target=&quot;_blank&quot;&gt;Internet protocol(a.k.a. IP)&lt;/a&gt;이 &lt;a href=&quot;http://blog.seulgi.kim/2016/03/osi-model.html&quot; target=&quot;_blank&quot;&gt;OSI 7 layer&lt;/a&gt;에서 말하는 session layer에 관한 부분이 없기 때문에 생기는 근본적인 취약점을 이용한 것이기 때문에, 네트워크 프로토콜을 IP 위에 올린다면, 프로토콜을 작성하는 차원에서 세션 처리를 신경 쓰지 않았다면 근본적으로 막을 방법은 없다.&lt;br&gt; IP spoofing 자체는 흔하게 사용되는 공격법이지만 memcached를 사용하는 Deluge는 그중에서도 큰 획을 그었다. 단순히 GitHub을 공격했기 때문이 아니라 적은 패킷으로 많은 데이터를 공격하게 할 수 있기 때문이다. 이 비율을 bandwidth amplification factor라고 하는데 Deluge는 지금까지 알려진 IP spoofing 공격 중에서 가장 높다.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>2018년 9번째 주</title>
    <updated>2018-03-04T22:33:00+09:00</updated>
    <dc:date>2018-03-04T22:33:00+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>haruair</name>
    </author>
    <id>https://www.haruair.com/blog/4365</id>
    <link href="https://www.haruair.com/blog/4365"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;나도 신입으로 일을 시작했을 때 혼자 인터넷 검색창을 붙들고 코드와 씨름한 경험이 있었다. 작은 회사에서 유일한 개발자라 물어볼 선임도 없었고, 문제는 어떻게든 기간 내에 해결해야 하는 상황이 많았다. 모두가 신입 시절을 거치는 동안 그런 벽을 마주할 때가 있을 것 같다. 넘어야 할 산은 높고 나는 너무나 작게만 느껴지는 그런 경험을 거치고서 각자 지금의 자리에 있지 않나, 생각한다. &amp;lt;바쁜 팀장님 대신 알려주는 신입 PHP 개발자 안내서&amp;gt;라는 책 제목을 보는 순간에 그 신입 당시의 기억이 먼저 떠올랐다.&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;max-width:200px; display:block; margin: 0 auto; box-shadow:0px 5px 12px rgba(0,0,0,0.3);&quot; src=&quot;https://misc.ridibooks.com/cover/3166000001/xxlarge&quot; alt=&quot;바쁜 팀장님 대신 알려주는 신입 PHP 개발자 안내서 표지&quot;&gt;&lt;/p&gt;
&lt;p&gt;개발을 코드를 작성해서 실행하는 일이라고 단순하게 설명할 수 있지만, 현실에서는 그렇게 간단하지 않다. 코드를 어떻게 잘 작성하는가도 중요한 주제지만 그만큼 코드를 잘 관리하는 일도 중요하다. 게다가 코드가 실행되는 환경을 이해하는 과정도 필요하다. 환경도 여러 계층에 걸쳐 있다면 두루두루 살펴봐야 한다. 언어도, 환경도 서로 쉽게 이해하고 공유할 수 있도록 다양한 규칙과 규약을 정리해놓고 있고 이런 부분도 숙지해야 한다. 개발이라고 말하기에는 다각적으로 알아야 하는 부분이 많다.&lt;/p&gt;
&lt;p&gt;신입으로 첫날 출근하면 이런 지식에 압도당한다. 신입으로 시작할 때 가장 막막한 점은 단순히 언어에 대한 이해를 넘어서 이런 다양한 지식을 한꺼번에 흡수해야 한다는 점이다. 순식간에 넓은 분야를 깊이 있게 이해하는 일은 생각만으로도 벅차다. 알아야 할 모든 내용을 단번에 이해하면 좋겠지만 절대 쉬운 일이 아니다. 그런 막막한 상황에서 가장 중요한 것은 알아야 할 내용의 키워드를 습득하는 것이다. 키워드를 알면 그 키워드를 중심으로 아는 범위를 쉽게 늘릴 수 있다. 그런 점에서 이 책은 폭 넓으면서도 중요한 키워드를 모두 포함하고 있어서 학습에 좋은 가이드가 된다.&lt;/p&gt;
&lt;p&gt;일단 PHP를 기준으로 설명하기 때문에 PHP를 사용하는 사람이라면 꼭 알아야 할 내용을 잘 다루고 있다. 그리고 많은 내용을 PHP에 할애하고 있긴 하지만 거기에 덧붙여 지금 시대에 웹개발을 한다면 필수적으로 알아야 할 다양한 키워드를 장마다 풀고 있다. 또한, 각 문제와 주제에 대해 어떤 식으로 접근해야 하는지 복잡하지 않게 설명한다. 실제로 문제를 마주하게 될 때 어떤 식으로 생각하고 찾아봐야 하는지 그 방법도 잘 전달하고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;저장소가 뭔가요? (버전 관리 시스템)&lt;/li&gt;
&lt;li&gt;저장소의 소스코드를 받았는데 왜 안되죠? (컴포저)&lt;/li&gt;
&lt;li&gt;제 컴퓨터에서는 잘 되는데요? (가상 머신을 이용한 개발 환경 구축)&lt;/li&gt;
&lt;li&gt;어떤 파일을 고쳐야 할 지 모르겠어요 (프런트 컨트롤러 패턴과 MVC 패턴)&lt;/li&gt;
&lt;li&gt;GET, POST는 알겠는데 PUT, DELETE는 뭔가요? (HTTP와 REST)&lt;/li&gt;
&lt;li&gt;그렇게까지 해야 하나요? (시큐어 코딩)&lt;/li&gt;
&lt;li&gt;그냥 제 스타일대로 하면 안되나요? (코딩 컨벤션과 PHP 표준 권고)&lt;/li&gt;
&lt;li&gt;MySQLi는 나쁜건가요? (PDO와 ORM)&lt;/li&gt;
&lt;li&gt;메모장에 코딩하면 안되나요? (통합 개발 환경)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;책을 읽기 시작하자마자 끝까지 고개를 끄덕이며 읽었다. 내가 신입으로 들어갔을 때 이런 책이 있었으면 얼마나 수월하게 배우기 시작했을까. 주변에 PHP를 사용하는 사람이 있다면 꼭 알려주자. 신입 PHP 개발자에게는 어떻게 시작해야 하는지 좋은 가이드가 되고 선임이나 팀장급 이상이라면 어떤 내용을 신입에게 가르쳐야 하는지 명확한 지침이 되는 책이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ridibooks.com/v2/Detail?id=3166000001&quot;&gt;바쁜 팀장님 대신 알려주는 신입 PHP 개발자 안내서 – 리디북스&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=133643671&quot;&gt;바쁜 팀장님 대신 알려주는 신입 PHP 개발자 안내서 – 알라딘&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;https://www.haruair.com/blog/4365&quot;&gt;신입 PHP 개발자가 읽어야 하는 책&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;https://www.haruair.com&quot;&gt;Edward Kim&lt;/a&gt;.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>신입 PHP 개발자가 읽어야 하는 책</title>
    <updated>2018-03-07T12:27:36+09:00</updated>
    <dc:date>2018-03-07T12:27:36+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>박상길</name>
    </author>
    <id>http://likejazz.com/post/171811107327</id>
    <link href="http://likejazz.com/post/171811107327"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;iframe src=&quot;https://www.facebook.com/plugins/post.php?href=https%3A%2F%2Fwww.facebook.com%2Fpermalink.php%3Fstory_fbid%3D2110408722526967%26id%3D100006735798590&amp;amp;width=500&quot; width=&quot;500&quot; height=&quot;294&quot; style=&quot;border:none;overflow:hidden&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; allowtransparency=&quot;true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;게임 프로그래밍의 전설 존 카멕이 휴가 기간 동안 얀 르쿤의 논문을 출력해 보면서 CNN을 C++11로 구현했다고. 그에 관한 오래된 농담 중에 C++을 할 줄 몰라서 공부중이라는 얘기가 있는데, 이제는 어느 정도 익숙해진 모양. 윈도우 플랫폼을 선호하는 줄 알았는데, OpenBSD에 vi로 구현했다는 부분도 인상적. 컴파일러도 g++과 LLVM C++을 모두 시도해본듯 하며 생각보다 컴파일러의 지원이 원할하지 않아 당황한듯(아마도 Microsoft의 C++ 컴파일러와 비교해서). 스탠포드 CS231n 유튜브 강의를 봤다며 훌륭하다고 칭찬. 코드를 공개해주면 많은 사람들에게 귀감이 될텐데 아쉽게도 그럴 생각은 없는듯. 얀 르쿤의 댓글이 인상적인데 그가 지금까지 직접 짜본 여러 CNN 구현을 얘기하면서 MNIST에는 cross-entropy와 라지 네트워크(1000개 이상의 히든 노드)를 사용하면 error rate를 1.6% 이내로 줄일 수 있을거라고 조언. 그리고 3가지 breakthrough로 ReLU, GPU, 라지 데이터셋을 언급. dropout과 batch norm도 some improvements로 언급. 어쨌든 전혀 관련 없을 것 처럼 보이던 게임 프로그래밍의 전설 존 카멕 조차 딥러닝 구현에 직접 뛰어들었다는 사실은, 이제 딥러닝은 프로그래밍에서 꼭 한 번은 거쳐야 할 주류가 되었다는 상징적인 의미를 지니는듯.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>

게임 프로그래밍의 전설 존 카멕이 휴가 기간 동안 얀 르쿤의 논문을 출력해 보면서 CNN을 C++11로 구현했다고. 그에 관한 오래된 농담 중에 C++을 할 줄 몰라서...</title>
    <updated>2018-03-13T08:30:11+09:00</updated>
    <dc:date>2018-03-13T08:30:11+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>박상길</name>
    </author>
    <id>http://likejazz.com/post/171639392149</id>
    <link href="http://likejazz.com/post/171639392149"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;a href=&quot;http://docs.likejazz.com/multinomial-naive-bayes/&quot;&gt;나이브 베이즈 알고리즘 확률 모델 · The Missing Papers&lt;/a&gt;: &lt;p&gt;업무에 필요해서 예전에 정리해두었던 ‘나이브 베이즈 확률 모델'을 꺼내 베르누이를 추가하고, 좀 더 정리해봤습니다. 이번에는 확률 모델을 계산하기 위해 scikit-learn 코드를 일일이 열어봤고, 연습장에 수식을 적어가며 직접 계산까지 해봤는데요. 그렇게 함으로서 피상적으로 이해되던 지식이 보다 구체적으로, 제대로 머릿속에 자리잡게 되었습니다.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>나이브 베이즈 알고리즘 확률 모델 · The Missing Papers</title>
    <updated>2018-03-08T08:30:15+09:00</updated>
    <dc:date>2018-03-08T08:30:15+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>박상길</name>
    </author>
    <id>http://likejazz.com/post/171605250123</id>
    <link href="http://likejazz.com/post/171605250123"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;img src=&quot;http://78.media.tumblr.com/b6dd5ec70b8344c18b91d7ae46c3d5d5/tumblr_p55zbygFOE1qzjoe5o1_500.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;해커랭크 문제 하나가 계속 타임아웃이 걸려 풀 수가 없다. 이건 파이썬으로는 절대 풀 수 없는 문제인가 싶어 C++로 구현하려던 찰나 도대체 어떤 입력 값이 들어 있을까 처음으로 5 Hackos를 내고 테스트케이스를 구매해봤는데, 이럴수가. 입력값이 무려 3만개나 들어있다.&lt;/p&gt;

&lt;p&gt;예전 신입 공채 문제 출제할때는 입력값을 100개 넣는 것도 너무 힘들었는데, 무려 3만개를 하나의 테스트에 넣을줄이야 상상도 못했다. 이러면 &lt;code&gt;O(n^2)&lt;/code&gt;으로 풀면 C++은 커녕 어셈블리로도 풀리지 않을텐데 괜한 언어탓만 했다. 이제 &lt;code&gt;O(n)&lt;/code&gt;으로 풀이하는 기적의 알고리즘을 만들어 내야 오늘 밤도 편히 잠들 수 있을텐데 …&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>해커랭크 문제 하나가 계속 타임아웃이 걸려 풀 수가 없다. 이건 파이썬으로는 절대 풀 수 없는 문제인가 싶어...</title>
    <updated>2018-03-07T08:30:22+09:00</updated>
    <dc:date>2018-03-07T08:30:22+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>박상길</name>
    </author>
    <id>http://likejazz.com/post/171570920446</id>
    <link href="http://likejazz.com/post/171570920446"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;iframe src=&quot;https://www.facebook.com/plugins/post.php?href=https%3A%2F%2Fwww.facebook.com%2Fwonyong.sung.7%2Fposts%2F1678064698903452&amp;amp;width=500&quot; width=&quot;500&quot; height=&quot;710&quot; style=&quot;border:none;overflow:hidden&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; allowtransparency=&quot;true&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;지금도 업무에 필요해서 또는 개인적인 취미로 여전히 수학 문제를 많이 풀어본다. 연습장에는 다양한 수식이 적혀 있는데, 사실 직접 풀지 못하는 수식도 많다. 그러나 문제가 없다. 컴퓨터가 정확하게 풀이해주기 때문이다.&lt;/p&gt;

&lt;p&gt;우리가 학창시절에 배운 수학은 빠르게 풀이하는 방법이었다. 사실 컴퓨터가 훨씬 더 잘하는 일이다. 이제는 학교에서 그렇게 가르치면 안된다. 공식을 암기해서 수식을 빨리 푸는 방법을 가르칠게 아니라, 왜 그런 공식이 나오는지, 유도하는 과정과 수학의 원리를 가르치는게 훨씬 더 중요하다.&lt;/p&gt;

&lt;p&gt;이런 생각은 &lt;a href=&quot;http://likejazz.com/post/158837703835/%EC%B0%B8-%EC%84%A4%EB%AA%85-%EC%9E%98-%ED%95%9C%EB%8B%A4-%EC%B2%98%EC%9D%8C%EC%97%90-%EC%83%9D%EA%B8%B4%EA%B2%8C-%EC%A2%80-%EA%B7%B8%EB%9E%98%EC%84%9C-%E3%85%8E%E3%85%8E-%EC%8B%A0%EB%A2%B0%EA%B0%80-%EC%95%88%EA%B0%94%EB%8A%94%EB%8D%B0-%EC%A0%95%EB%A7%90-%EA%B9%94%EB%81%94%ED%95%98%EA%B3%A0&quot;&gt;오랫동안 해왔다&lt;/a&gt;. 같은 말씀을 하시니 많은 위안이 된다.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>

지금도 업무에 필요해서 또는 개인적인 취미로 여전히 수학 문제를 많이 풀어본다. 연습장에는 다양한 수식이 적혀 있는데, 사실 직접 풀지 못하는 수식도 많다. 그러나 문제가...</title>
    <updated>2018-03-06T08:30:05+09:00</updated>
    <dc:date>2018-03-06T08:30:05+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>박상길</name>
    </author>
    <id>http://likejazz.com/post/171535127225</id>
    <link href="http://likejazz.com/post/171535127225"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;img src=&quot;http://78.media.tumblr.com/713b4a74a43d66351328c2da4e5341fc/tumblr_p4z4l5pHYe1qzjoe5o1_500.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;이론과 수식을 좀 더 공부하기 위해 집어든 책으로, 영국 브리스톨 대학의 피터 플래치 교수가 쓴 책이다. 실용서가 아닌 아카데믹한 텍스트북으로 원서가 쉽지 않은 내용이라 보기를 주저했는데, 마침 번역서가 있어 좀 더 쉽게 볼 요량으로 집어 들었다. 그러나, 쉽기는 커녕 원서보다 몇 배는 더 어려운 책이 되고 말았다.&lt;/p&gt;

&lt;p&gt;요즘은 번역기도 이보다 더 훌륭한 문장을 만들어낸다. 한글로 읽고 있는데도 도통 무슨 내용인지 알 수가 없다. 주어와 동사의 연결도 제멋대로고 수식어도 여기저기 날아 다닌다. 역자가 이런식으로 한국말을 한다면 언어 능력에 심각한 문제가 있는게 틀림 없다. 역자는 KAIST에서 박사를 받고 중원대에 재직하는 내 또래의 젊은 교수인데, 교수의 이름을 걸고 이런 졸저를 만들어 내는게 부끄럽지 않나 모르겠다. 작년에 『인공지능: 현대적 접근 방식』이 최악의 번역서 였다면, 올해는 이 책이 최악의 자리를 차지할 것이라 믿어 의심치 않는다.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>이론과 수식을 좀 더 공부하기 위해 집어든 책으로, 영국 브리스톨 대학의 피터 플래치 교수가 쓴 책이다. 실용서가...</title>
    <updated>2018-03-05T08:30:30+09:00</updated>
    <dc:date>2018-03-05T08:30:30+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>박상길</name>
    </author>
    <id>http://likejazz.com/post/171498593840</id>
    <link href="http://likejazz.com/post/171498593840"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;한 회사에 오래 다니는 사람은 크게 두 부류로 나뉜다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;엄청나게 좋은 대우를 받고 있는 경우&lt;/li&gt;
&lt;li&gt;이직할 능력이 안되어 끝까지 붙어 있는 경우&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1번은 아무 문제 없다. 본인의 능력이 출중하고 회사에서도 최고의 대우를 해주고 있어 이직할 의사가 없다. 문제는 2번이다. 좋은 대우를 받지 못하지만 본인 또한 능력이 부족한 경우다. 개인은 지금 보다 더 나은 곳으로 이직할 수 없어 불행하고, 회사는 능력이 부족한 사람을 계속 데리고 있어야 하니 불행하다. 모두에게 불행이다.&lt;/p&gt;

&lt;p&gt;이 같은 불행을 줄이기 위해 정규직이라는 개념을 없애고 모두가 계약직이 되면 어떨까 하는 생각을 종종 한다. 계약직이니까 고용주만 유리한거 아니냐고 반문할 수 있겠지만 오히려 반대다. 프로야구 선수를 떠올려보면 다르지 않다. 최고의 선수를 데려오기 위해서는 최고의 연봉을 제시해야 하고 실력이 떨어지는 선수는 가차없이 방출한다. 물론 유연한 노동 시장은 필수다. 1군에서 방출된 선수가 언제든 2군으로 고용될 수 있어야 한다. 꿈 같은 얘기인가 싶겠지만 실제로 최고의 대우를 받는 대기업 임원은 모두 계약직이다. 나는 대기업 임원 뿐만 아니라 모든 직원이 계약직이 되어야 하고 능력에 따른 차등 임금을 받는게 당연하다고 생각한다.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>한 회사에 오래 다니는 사람은 크게 두 부류로 나뉜다.

엄청나게 좋은 대우를 받고 있는 경우
이직할 능력이 안되어 끝까지 붙어 있는 경우
1번은 아무 문제 없다. 본인의 능력이...</title>
    <updated>2018-03-04T08:30:12+09:00</updated>
    <dc:date>2018-03-04T08:30:12+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>박상길</name>
    </author>
    <id>http://likejazz.com/post/171463848505</id>
    <link href="http://likejazz.com/post/171463848505"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;a href=&quot;http://blog.naver.com/yo2dh/220822566110&quot;&gt;[북리뷰] Effective Modern C++ (이펙티브 모던 C++) C++11 C++14, 스콧 마이어스 저&lt;/a&gt;: &lt;p&gt;Effective Modern C++을 읽으며 몇 번이나 욕을 했는지 모르겠다. 명서를 졸저로 만들고 말았다. overloading을 ‘중복적재'로 번역한건 정말 말도 안된다. 한글을 보면서 더 헷갈린 적은 간만이다.&lt;/p&gt;

&lt;p&gt;yes24의 별점 평가 중에 이런 촌철살인이 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;LA 를 나성, 유럽을 구라파, 프랑스를 불란서라고 부르던 시절 같네요.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;결국 원문의 용어가 뭔지 정확히 확인하기 위해 원서를 PDF로 구해야 했다. 이럴거면 그냥 원서를 보지 뭐하러 번역서를 읽나. 안타까운 일이다. 앞으로 류광님이 번역한 책은 항상 주의할 생각이다.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>[북리뷰] Effective Modern C++ (이펙티브 모던 C++) C++11 C++14, 스콧 마이어스 저</title>
    <updated>2018-03-03T08:30:19+09:00</updated>
    <dc:date>2018-03-03T08:30:19+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>박정운</name>
    </author>
    <id>http://jungwoon.github.io/python/2018/03/15/Data-Analysis-With-Python-2/</id>
    <link href="http://jungwoon.github.io/python/2018/03/15/Data-Analysis-With-Python-2/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;h2 id=&quot;파이썬에서-정규표현식-사용하기&quot;&gt;파이썬에서 정규표현식 사용하기&lt;/h2&gt;

&lt;p&gt;정규 표현식은 패턴 매칭에 기반해서 문자열을 검색하고 자르고 교체하는 강력한 기능입니다.&lt;/p&gt;

&lt;p&gt;파이썬에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;re 모듈&lt;/code&gt;을 이용하여 정규 표현식을 이용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;만약 정규표현식을 잘 모른다면 
&lt;a href=&quot;https://jungwoon.github.io/regex/2018/03/14/Regular-Expression/&quot;&gt;정규 표현식(Regular Expression) 정리하기&lt;/a&gt;를 참고하시기 바랍니다&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;기본-이용-방법&quot;&gt;기본 이용 방법&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'정규표현식 패턴'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'텍스트)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 동일한 방법&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'정규표현식 패턴'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'텍스트'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr&gt;

&lt;h3 id=&quot;예제&quot;&gt;예제&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# coding=utf-8&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'[a-z]+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# re.compile('정규표현식 패턴')을 하면 해당 '정규표현식 패턴' 해당하는 패턴 객체가 생성된다&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;python&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 위에서 생성된 패턴 객체로 특정 텍스트에서 결과를 가져올 수 있다.&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 결과는 group()에 저장이 된다.&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음은 위와 동일한데 한번에 이용하는 방법입니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# coding=utf-8&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'[a-z]+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'python'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;python&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr&gt;

&lt;h3 id=&quot;re-모듈의-메서드&quot;&gt;re 모듈의 메서드&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;메서드&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;compile(&lt;code class=&quot;highlighter-rouge&quot;&gt;정규 표현식 패턴&lt;/code&gt;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;정규 표현식 패턴&lt;/code&gt;에 해당하는 패턴 객체 생성&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;match(&lt;code class=&quot;highlighter-rouge&quot;&gt;정규 표현식 패턴&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;텍스트&lt;/code&gt;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;텍스트&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;정규 표현식 패턴&lt;/code&gt;에 해당하는 값을 찾음, 만약 처음부터 일치하지 않으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt;
&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;search(&lt;code class=&quot;highlighter-rouge&quot;&gt;정규 표현식 패턴&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;텍스트&lt;/code&gt;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;텍스트&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;정규 표현식 패턴&lt;/code&gt;에 해당하는 값을 찾음, &lt;code class=&quot;highlighter-rouge&quot;&gt;전체&lt;/code&gt;를 찾아봄&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;findall(&lt;code class=&quot;highlighter-rouge&quot;&gt;정규 표현식 패턴&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;텍스트&lt;/code&gt;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;텍스트&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;정규 표현식 패턴&lt;/code&gt;에 해당하는 값을 찾아서 &lt;code class=&quot;highlighter-rouge&quot;&gt;리스트&lt;/code&gt;로 반환&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;split(&lt;code class=&quot;highlighter-rouge&quot;&gt;정규 표현식 패턴&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;텍스트&lt;/code&gt;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;텍스트&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;정규 표현식 패턴&lt;/code&gt;에 해당하는 값을 찾아서 &lt;code class=&quot;highlighter-rouge&quot;&gt;부분 문자열&lt;/code&gt;로 자르고 &lt;code class=&quot;highlighter-rouge&quot;&gt;리스트&lt;/code&gt;로 반환한다&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;sub(&lt;code class=&quot;highlighter-rouge&quot;&gt;정규 표현식 패턴&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;바꿀 글자&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;텍스트&lt;/code&gt;)&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;텍스트&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;정규 표현식 패턴&lt;/code&gt;에 해당하는 값을 찾아서 &lt;code class=&quot;highlighter-rouge&quot;&gt;바꿀 글자&lt;/code&gt;로 바꾼다&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr&gt;

&lt;h3 id=&quot;compile-메서드&quot;&gt;compile() 메서드&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;compile()&lt;/code&gt; 자체만으로는 뭔가를 찾을 수 없지만 이렇게 패턴 객체를 만들어 놓고 사용하게 되면 &lt;code class=&quot;highlighter-rouge&quot;&gt;재사용&lt;/code&gt;을 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# coding=utf-8&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'[a-z]+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 패턴 객체를 가져옴&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 위에서 얻은 패턴 객체로 매칭함&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr&gt;

&lt;h3 id=&quot;match와-search-메서드&quot;&gt;match()와 search() 메서드&lt;/h3&gt;

&lt;p&gt;match()와 search()는 비슷한 기능을 하기 때문에, 비교를 위해서 같이 실습을 해보도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;match()&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;처음&lt;/code&gt;부터 패턴이 일치 하지 않으면 None을 반환합니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;search()&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;전체&lt;/code&gt;를 찾아서 일치하는 것을 찾습니다&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;중요) 두 메서드 모두 자신이 찾는 패턴을 찾으면 검색을 멈춥니다&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# coding=utf-8&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'World'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Hello World'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 처음 부터 패턴이 매칭되지 않으면 None을 가져옴&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'World'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Hello World'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 끝까지 패턴을 찾아봄&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'match : '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'search : '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;World&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr&gt;

&lt;h3 id=&quot;findall-메서드&quot;&gt;findall() 메서드&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;findall()&lt;/code&gt;은 전체를 탐색하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;패턴에 해당 하는 모든 값&lt;/code&gt;을 &lt;code class=&quot;highlighter-rouge&quot;&gt;리스트&lt;/code&gt;로 반환합니다&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# coding=utf-8&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;findall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'World'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Hello World Hello World'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 끝까지 패턴을 찾아봄&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findall&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'World'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'World'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr&gt;

&lt;h3 id=&quot;split-메서드&quot;&gt;split() 메서드&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;패턴&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;구분자&lt;/code&gt;를 넣으면 구분자 기준으로 나눠서 &lt;code class=&quot;highlighter-rouge&quot;&gt;리스트&lt;/code&gt;로 반환합니다&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# coding=utf-8&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Hello-World-Hello-World'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 끝까지 패턴을 찾아봄&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'World'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'World'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr&gt;

&lt;h3 id=&quot;sub-메서드&quot;&gt;sub() 메서드&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;패턴&lt;/code&gt;에 해당하는 텍스트를 찾아서 &lt;code class=&quot;highlighter-rouge&quot;&gt;바꿀 글자&lt;/code&gt;로 바꿔서 반환합니다&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# coding=utf-8&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'[a-z ]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'[...]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'0010010 has at least one 010 letter 0010010'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;mo&quot;&gt;0010010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;0010010&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr&gt;

&lt;h3 id=&quot;tip-파이썬에서는---를-써서-특수문자를-사용하지-않아도-되게끔-아래와-같이-지원을-해줍니다&quot;&gt;Tip) 파이썬에서는 ` \ `를 써서 특수문자를 사용하지 않아도 되게끔 아래와 같이 지원을 해줍니다.&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;\\n&quot; 와 r&quot;\n&quot;는 동일함
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>파이썬으로 데이터 분석하기 #2</title>
    <updated>2018-03-15T09:00:00+09:00</updated>
    <dc:date>2018-03-15T09:00:00+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>박정운</name>
    </author>
    <id>http://jungwoon.github.io/regex/2018/03/14/Regular-Expressions/</id>
    <link href="http://jungwoon.github.io/regex/2018/03/14/Regular-Expressions/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;h2 id=&quot;정규-표현식regular-expressions-정리하기&quot;&gt;정규 표현식(Regular Expressions) 정리하기&lt;/h2&gt;

&lt;p&gt;이번에는 정규 표현식을 한번 정리해보도록 하겠습니다.
정규 표현식은 텍스트에서 특정 패턴만 골라서 가져올 수 있는 기술로
파싱이나 크롤링때 많이 이용합니다&lt;/p&gt;

&lt;p&gt;표현이 힘들어서, 키노트로 만들어서 해당 키노트를 캡처해서 올렸습니다.
해당 자료는 &lt;a href=&quot;https://www.slideshare.net/ibare/ss-39274621&quot;&gt;슬라이드 쉐어의 김민태님의 자료&lt;/a&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;엄청&lt;/code&gt; 많이 참고하였습니다.
위의 자료를 제가 공부하면서 정리한 자료를 공유 드립니다.&lt;/p&gt;

&lt;p&gt;포스팅한 PDF 다운로드는 아래 공유 드리도록 하겠습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;다운로드 : &lt;a href=&quot;https://www.dropbox.com/s/du6hrakweehua9l/Regex_wide.pdf?dl=0&quot;&gt;PDF 다운로드&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;정규 표현식 연습 사이트 : &lt;a href=&quot;https://regexr.com&quot;&gt;연습 사이트&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*hmwnjCP6-AZS0_HVG_Ypgw.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*2YZ6oziwa50BNILGEO4Gzg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*acarjGXxgx-GwlkwpSUAxw.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*v8Bbj9sIaSNXWSdsZVOsDA.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*bEkCLHJqVVdQH7eE7I8ZuA.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*2dA4dUm5BA6H3ihNbNctiQ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*lKz51x5evPUmn-hoal55Rw.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*_2v45N3IhVetfxPJ_oL-FQ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*O52q8DRrxMJZXczyIPLmgQ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*tOq3Yg0RJR6lhQoXo5bvgw.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*ecGkhw9aaJiNTnqsk0Y6lA.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*Eb7nm5BhEF6p_UCbDxcMJg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*BKcLZKRBRstCbspRHr_LJg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*vMpS4bajMa61om8sR6wTWQ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*iLkOVmIBKNqFlIhU5E9eUQ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*SEMaahntQKDHcpLKHCvNsg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*CWEu6caIG0fYUaPGCrFUqA.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*m-obaiC8tL4Hsz9jEyOrmA.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*PQ3Z2RHjgU2yXxAP0T80xw.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*x-R_NFMHSDvph1RfLReFWA.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*SgE4JDkXM0K2jhLa51XcCQ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*IzI2TnilTU1w1P3BIpNWNw.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*b18DvDm-tB-KMBgapavbrg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*PZazvbDxrbt1QnyOmmlClQ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*DJXb-mi3ik7jh6-I_zPXCg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*Z0S54d0HsXm-yc2suaty0Q.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*a3gX8qQlhaDY37N3nx4ccQ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*eld5WR6zOQ2pBbN9fJL5NA.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*KAJ_n-O1KYMGVOHIGS4tNg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*ifHPZLA8uiUzGgqOUdtUKA.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*RgQ3_33-39kKRwbne8pOag.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*PP_1kQDu_N21JGeUhHmoyg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>정규 표현식(Regular Expressions) 정리하기</title>
    <updated>2018-03-14T09:00:00+09:00</updated>
    <dc:date>2018-03-14T09:00:00+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>박정운</name>
    </author>
    <id>http://jungwoon.github.io/event/2018/03/11/GCP-Hackathon-2018/</id>
    <link href="http://jungwoon.github.io/event/2018/03/11/GCP-Hackathon-2018/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;h2 id=&quot;2018-gcp-user-group-해커톤&quot;&gt;2018 GCP User Group 해커톤&lt;/h2&gt;

&lt;p&gt;GCPUG Hackathon 2018 행사 안내입니다!&lt;/p&gt;

&lt;p&gt;Google Cloud Platform User Group에서 Hackathon을 개최합니다. 
신청은 다음 링크에서 가능합니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://goo.gl/gnmVFk&quot;&gt;신청 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;자세한 내용은 포스터에서 확인 가능합니다!&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;본 행사는 Google, SW Maestro의 지원으로 진행됨을 밝힙니다.
이하 지원 파트너로써의 SW Maestro 홍보 내용을 추가합니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://goo.gl/MTCkMP&quot;&gt;https://goo.gl/MTCkMP&lt;/a&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;img src=&quot;https://scontent-icn1-1.xx.fbcdn.net/v/t1.0-0/29063652_550309755331900_2856184708180475904_o.jpg?oh=ad64c23850a99be1c80baf8bc8b68712&amp;amp;oe=5B41310A&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://scontent-icn1-1.xx.fbcdn.net/v/t1.0-0/28951820_550312675331608_2732906841703972864_o.jpg?oh=050af79c1b151fe418e733310e6dd2e3&amp;amp;oe=5B055CE0&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>2018 GCP User Group 해커톤</title>
    <updated>2018-03-11T09:00:00+09:00</updated>
    <dc:date>2018-03-11T09:00:00+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>박정운</name>
    </author>
    <id>http://jungwoon.github.io/python/2018/03/09/Data-Analysis-With-Python-1/</id>
    <link href="http://jungwoon.github.io/python/2018/03/09/Data-Analysis-With-Python-1/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;h2 id=&quot;유용한-함수-및-컬렉션-정리&quot;&gt;유용한 함수 및 컬렉션 정리&lt;/h2&gt;

&lt;p&gt;데이터 분석을 할때, 파이썬을 이용하여 분석할 수 있는 부분에 대해서 알아보겠습니다.&lt;/p&gt;

&lt;hr&gt;

&lt;h2 id=&quot;유용한-함수&quot;&gt;유용한 함수&lt;/h2&gt;

&lt;p&gt;먼저 파이썬에서 사용할때 유용한 함수들 부터 살펴보도록 하겠습니다&lt;/p&gt;

&lt;h3 id=&quot;lower--모든-문자를-소문자로-변환&quot;&gt;lower() : 모든 문자를 소문자로 변환&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Hello World'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;upper--모든-문자를-대문자로-변환&quot;&gt;upper() : 모든 문자를 대문자로 변환&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Hello World'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HELLO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WORLD&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;capitalize--첫-글자가-대문자로-변환하고-나머지는-소문자로-변환&quot;&gt;capitalize() : 첫 글자가 대문자로 변환하고 나머지는 소문자로 변환&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Hello World'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capitalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;world&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 주의 'Hello world'를 하나의 묶음으로 보기때문에 'world'에서 대문자로 바꿔주지 않음&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;islower--모든-알파벳-문자가-소문자인지-판단-true--false&quot;&gt;islower() : 모든 알파벳 문자가 소문자인지 판단 (True / False)&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Hello World'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sample_text2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'hello world'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;islower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_text2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;islower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;isupper--모든-알파벳-문자가-대문자인지-판단-true--false&quot;&gt;isupper() : 모든 알파벳 문자가 대문자인지 판단 (True / False)&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Hello World'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sample_text2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'HELLO WORLD'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;islower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_text2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;islower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;isspace--모든-문자가-공백인지-판단-true--false&quot;&gt;isspace() : 모든 문자가 공백인지 판단 (True / False)&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Hello World'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sample_text2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_text2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;isdigit--모든-문자가-0--9-사이의-숫자인지-판단-true--false&quot;&gt;isdigit() : 모든 문자가 0 ~ 9 사이의 숫자인지 판단 (True / False)&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Hello World 2'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sample_text2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'123456789'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isdigit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_text2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isdigit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;isalpha--모든-문자가-알파벳인지-판단-true--false&quot;&gt;isalpha() : 모든 문자가 알파벳인지 판단 (True / False)&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'HelloWorld'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sample_text2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Hello World'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sample_text3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Hello World3'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isalpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_text2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isalpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_text3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isalpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 공백이 있어서 False&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;lstrip--왼쪽-공백-제거&quot;&gt;lstrip() : 왼쪽 공백 제거&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'    HelloWorld'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lstrip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HelloWorld&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HelloWorld&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;rstip--오른쪽-공백-제거&quot;&gt;rstip() : 오른쪽 공백 제거&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'HelloWorld    '&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rstrip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HelloWorld&lt;/span&gt;    
&lt;span class=&quot;n&quot;&gt;HelloWorld&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;strip--양-옆의-공백-제거-가운데-공백-제외&quot;&gt;strip() : 양 옆의 공백 제거 (가운데 공백 제외)&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'   HelloWorld    '&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;HelloWorld&lt;/span&gt;    
&lt;span class=&quot;n&quot;&gt;HelloWorld&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;split구분자--구분자로-구분-기본값은-공백&quot;&gt;split(&lt;code class=&quot;highlighter-rouge&quot;&gt;구분자&lt;/code&gt;) : &lt;code class=&quot;highlighter-rouge&quot;&gt;구분자&lt;/code&gt;로 구분, 기본값은 공백&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'my-data-with-ptyhon'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'my'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'with'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ptyhon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;구분자join리스트--split-함수와-반대로-구분자로-붙인다&quot;&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;구분자&lt;/code&gt;.join(&lt;code class=&quot;highlighter-rouge&quot;&gt;리스트&lt;/code&gt;) : split 함수와 반대로 &lt;code class=&quot;highlighter-rouge&quot;&gt;구분자&lt;/code&gt;로 붙인다&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'my'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'with'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ptyhon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'my'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'with'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ptyhon'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptyhon&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;split과-join의-응용&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;split과 join의 응용&lt;/code&gt;&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'1.123.234.345'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;234&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;345&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;find찾고자-하는-값--찾고자-하는-값의-위치를-반환-없으면--1을-반환&quot;&gt;find(&lt;code class=&quot;highlighter-rouge&quot;&gt;찾고자 하는 값&lt;/code&gt;) : &lt;code class=&quot;highlighter-rouge&quot;&gt;찾고자 하는 값&lt;/code&gt;의 위치를 반환, 없으면 &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt;을 반환&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'abcd-e'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;enumerate리스트--인덱스와-값을-함께-반환&quot;&gt;enumerate(&lt;code class=&quot;highlighter-rouge&quot;&gt;리스트&lt;/code&gt;) : 인덱스와 값을 함께 반환&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
    
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr&gt;

&lt;h2 id=&quot;컬렉션&quot;&gt;컬렉션&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;리스트&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;튜플&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;셋(=집단자료형)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;딕셔너리&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;블록&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[ ]&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;( )&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{ }&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{ }&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;인덱스&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;O&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;O&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;특징&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;일반적인 배열&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;변형이 불가능&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;중복 X, 순서 X&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Key-Value 형태&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;샘플&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;['a', 'b', 'c']&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;('a', 'b', 'c')&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{'a', 'b', 'c'}&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{0: 'a', 1: 'b', 2: 'c'}&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;검색&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;크기와 함께 검색시간도 증가&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;크기와 함께 검색시간도 증가&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;적합&lt;/code&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;키를 이용한 접근&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;컬렉션-응용&quot;&gt;컬렉션 응용&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mylist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 빠르게 중복 제거&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'alpha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'bravo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'charlie'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'delta'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'alpha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'bravo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'charlie'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'delta'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;kseq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'abcd'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vseq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'alpha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'bravo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'charlie'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'delta'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kseq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vseq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'alpha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'bravo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'charlie'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'delta’)]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;kseq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'abcd'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;vseq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'alpha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'bravo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'charlie'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'delta'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kseq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vseq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'alpha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'charlie'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'bravo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'delta'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr&gt;

&lt;h2 id=&quot;리스트-내포&quot;&gt;리스트 내포&lt;/h2&gt;

&lt;p&gt;컬렉션을 바로 리스트 변환하는 표현식으로 진짜 유용한 기능&lt;/p&gt;

&lt;p&gt;바로 예제로 확인&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'alpha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'bravo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'charlie'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'delta'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'alpha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'bravo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'charlie'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'delta'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;55&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myList&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;441&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1936&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;529&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15129&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr&gt;

&lt;h2 id=&quot;counter를-이용한-카운팅&quot;&gt;Counter를 이용한 카운팅&lt;/h2&gt;

&lt;p&gt;Count는 컬렉션 안에 아이템의 개수를 자동으로 카운팅 합니다&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;phrase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'a man a plan a canal panama'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cntr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phrase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cntr&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'canal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'panama'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'plan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'man'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Counter의 인스턴스&lt;/code&gt;.most_common()을 이용하면 리스트 형태로 받을 수 있습니다&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;phrase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'a man a plan a canal panama'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cntr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phrase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cntr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most_common&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'canal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'panama'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'plan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'man'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 딕셔너리로 한번 더 묶으면 딕셔너리 형태로 보기 좋게 가져올 수 있습니다&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;phrase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'a man a plan a canal panama'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cntr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;phrase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dict_cntr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cntr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most_common&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict_cntr&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dict_cntr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'canal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'panama'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'plan'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'man'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>파이썬으로 데이터 분석하기 #1</title>
    <updated>2018-03-09T09:00:00+09:00</updated>
    <dc:date>2018-03-09T09:00:00+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>박정운</name>
    </author>
    <id>http://jungwoon.github.io/google%20cloud%20platform/2018/03/05/PubSub/</id>
    <link href="http://jungwoon.github.io/google%20cloud%20platform/2018/03/05/PubSub/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;h2 id=&quot;gcp-pubsub-살펴보기&quot;&gt;GCP PubSub 살펴보기&lt;/h2&gt;

&lt;p&gt;Google Cloud의 PubSub은 Message Queue 플랫폼입니다. 대표적인 Message Queue 서비스로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Kafka&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;RabbitMQ&lt;/code&gt;가
있습니다&lt;/p&gt;

&lt;p&gt;다음 두 서비스와 비교해서 장점은 별다른 설정없이 손쉽게 이용하여 대용량 메시지들을 처리할 수 있습니다&lt;/p&gt;

&lt;p&gt;좀 더 자세한 내용을 알고 싶으면 &lt;a href=&quot;https://cloud.google.com/pubsub/docs/quickstarts&quot;&gt;공식 문서&lt;/a&gt;를 참고해주세요&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;pubsub-구성&quot;&gt;PubSub 구성&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Topic : Message Provider 로부터 발생하는 Message를 받는 역할&lt;/li&gt;
  &lt;li&gt;Subscription : Topic이 정리해준 데이터를 가져오기 위한 역할로 용도별로 여러개를 가질 수 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;(하나의 토픽으로 부터 데이터를 받기 때문에 동일한 데이터를 받음)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1800/1*5nJ-8328ehg-LnlqCF4e_A.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;형태&quot;&gt;형태&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Message
    &lt;ul&gt;
      &lt;li&gt;실제 데이터가 들어갑니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Message Attribute
    &lt;ul&gt;
      &lt;li&gt;Key-Value 형태의 메타 데이터가 들어갑니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3 id=&quot;특징&quot;&gt;특징&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;읽어들일때 &lt;code class=&quot;highlighter-rouge&quot;&gt;순서를 보장하지 않습니다&lt;/code&gt;
&lt;/li&gt;
  &lt;li&gt;클라이언트가 메시지를 받은 뒤에 &lt;code class=&quot;highlighter-rouge&quot;&gt;ACK를 보내지 않으면&lt;/code&gt;(기본 10초 이내),
해당 메시지는 다시 &lt;code class=&quot;highlighter-rouge&quot;&gt;Pub/Sub으로 되돌어가고&lt;/code&gt; 최소 10분 ~ 최대 7일까지 보관됩니다&lt;/li&gt;
  &lt;li&gt;Subscriber가 Topic으로부터 가져오는 방법 말고도 &lt;code class=&quot;highlighter-rouge&quot;&gt;Subscriber로 직접 보내는 방법&lt;/code&gt;도 지원합니다&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;h3 id=&quot;사전-준비&quot;&gt;사전 준비&lt;/h3&gt;

&lt;p&gt;로컬에서 API를 사용하기 위해서 설정을 해 주어야 하는 부분들&lt;/p&gt;

&lt;h4 id=&quot;gcloud-sdk-설치-후-인증받기&quot;&gt;gcloud sdk 설치 후 인증받기&lt;/h4&gt;

&lt;p&gt;우선 &lt;a href=&quot;https://jungwoon.github.io/google%20cloud/2017/10/26/install-gcloud/&quot;&gt;Google Cloud SDK(=gcloud) 설치하기&lt;/a&gt;를
참고하여 gcloud 설치를 먼저 해줍니다&lt;/p&gt;

&lt;p&gt;그 다음 &lt;code class=&quot;highlighter-rouge&quot;&gt;gcloud auth login&lt;/code&gt;을 터미널에 입력을 해줍니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/600/1*O1KuxZdZw_KBfmxunh2yWg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;그럼 아래와 같이 브라우저가 뜨면서 구글 계정을 선택하는 화면이 나오는데, 해당 프로젝트 계정을 클릭합니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*7RKsET0X_n7kK6kWQ1CYQQ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;그럼 다음과 같이 권한 요청이 나오는데, &lt;code class=&quot;highlighter-rouge&quot;&gt;허용&lt;/code&gt;을 누릅니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*vcKxHlphpBcUkA6BuvzRBg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h4 id=&quot;서비스-계정키를-다운-받아서-bashrc에-등록하기&quot;&gt;서비스 계정키를 다운 받아서 .bashrc에 등록하기&lt;/h4&gt;

&lt;p&gt;GCP 서비스를 이용하기 위한 서비스 계정 키를 얻기 위해 &lt;a href=&quot;http://console.cloud.google.com&quot;&gt;Google Cloud Console&lt;/a&gt;에서
 &lt;code class=&quot;highlighter-rouge&quot;&gt;메뉴 - API 및 서비스 - 서비스 계정&lt;/code&gt;을 누릅니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*4-ZoTgS8yilA_0Gskcg_Yg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;아래와 같이 나오면 우측에 메뉴를 누르고 &lt;code class=&quot;highlighter-rouge&quot;&gt;키 만들기&lt;/code&gt;를 누릅니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*VsgBvxgCVepRa4JuxOyo9A.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;그럼 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;P12&lt;/code&gt;를 선택하라고 하는데 여기서는 JSON을 선택하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;생성&lt;/code&gt; 버튼을 누릅니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*PDkxgzEXHL2Dczop6thgqw.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;그럼 자동으로 Local로 다운로드 받아지게 됩니다&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(한번밖에 다운로드 되지 않기 때문에 잘 보관해야 합니다)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1200/1*9J42lsbpxj98C2lS3MOPtQ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;그 다음 &lt;code class=&quot;highlighter-rouge&quot;&gt;vi ~/.bashrc&lt;/code&gt;를 입력을 합니다. (다른 쉘을 쓰면 거기에 맞는걸 열어줍니다)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*QumrcEfuwN2NPo_nnxM_Yw.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;아래의 105번 라인과 같이 위에서 다운받은 서비스 계정 키의 경로를 &lt;code class=&quot;highlighter-rouge&quot;&gt;GOOGLE_APPLICATION_CREDENTIALS&lt;/code&gt;에 넣어줍니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*E0fpt06SLamFdXSakReqnQ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;## Google Cloud
export GOOGLE_CLOUD_SDK_PATH=/Users/jungwoon/google-cloud-sdk
export PATH=$PATH:$GOOGLE_CLOUD_SDK_PATH/bin
export GOOGLE_APPLICATION_CREDENTIALS=/Users/jungwoon/GoogleCredential/bigquerybyjw.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr&gt;

&lt;h3 id=&quot;실습&quot;&gt;실습&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://console.cloud.google.com&quot;&gt;Google Cloud Console&lt;/a&gt;에 들어갑니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1800/1*xeuM3IdsOmBeQAf9vgyiDA.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;메뉴에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;게시/구독&lt;/code&gt;을 선택합니다&lt;/p&gt;

&lt;p&gt;(&lt;code class=&quot;highlighter-rouge&quot;&gt;Pub/Sub&lt;/code&gt;이 번역이 되니 &lt;code class=&quot;highlighter-rouge&quot;&gt;게시/구독&lt;/code&gt;이 되었네요)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*eSNJUG5mlBX94t6lU2lSYA.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;그럼 아래와 같은 화면이 나오는데, &lt;code class=&quot;highlighter-rouge&quot;&gt;주제 만들기&lt;/code&gt;를 누릅니다&lt;/p&gt;

&lt;p&gt;(만약 API 설정이 안되어 있다면 API 설정을 먼저 합니다)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1800/1*-S4smgyu1JgWIzlQ_uX2vw.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;주제 이름&lt;/code&gt;을 넣고 &lt;code class=&quot;highlighter-rouge&quot;&gt;생성&lt;/code&gt;버튼을 누릅니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1200/1*RvUk-UHnzW9MjqiX8xVDxw.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;그럼 다음과 같이 생성이 되는데 여기서 오른쪽의 &lt;code class=&quot;highlighter-rouge&quot;&gt;메뉴&lt;/code&gt; 버튼을 눌러서 &lt;code class=&quot;highlighter-rouge&quot;&gt;새 구독&lt;/code&gt;을 누릅니다&lt;/p&gt;

&lt;p&gt;그럼 해당 토픽에 대한 &lt;code class=&quot;highlighter-rouge&quot;&gt;구독&lt;/code&gt;이 생성됩니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1800/1*Ur7c525S6ZT5kn9s6IxuSA.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;아래와 같은 화면이 나오면 &lt;code class=&quot;highlighter-rouge&quot;&gt;구독 이름&lt;/code&gt;을 넣고 &lt;code class=&quot;highlighter-rouge&quot;&gt;만들기&lt;/code&gt; 버튼을 누릅니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1200/1*bf5lKsD8yw-UB_ToTF3PeA.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;그럼 아래와 같이 좌측의 &lt;code class=&quot;highlighter-rouge&quot;&gt;구독&lt;/code&gt;을 눌렀을때 생성된 &lt;code class=&quot;highlighter-rouge&quot;&gt;구독&lt;/code&gt;을 확인할 수 있습니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1800/1*aG_9MsxBYReuSTM0BRwn-Q.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;이번에는 간단한 테스트를 위해서 메시지를 보내보겠습니다&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;주제&lt;/code&gt;에서 메뉴를 누르고 &lt;code class=&quot;highlighter-rouge&quot;&gt;메시지 게시&lt;/code&gt;를 누릅니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1800/1*wzG2hBfzDXKvx-tsy_dYdQ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;임의로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello World&lt;/code&gt;란 메시지를 입력하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;게시&lt;/code&gt;를 하도록 하겠습니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1800/1*jMH8UfW11hsRwEKtdGteWg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;확인을 위해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Google Cloud Shell 활성화&lt;/code&gt;를 클릭합니다&lt;/p&gt;

&lt;p&gt;(메시지를 UI에서 바로 확인은 불가합니다)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1800/1*ZmD_CyTCxffvSR5VbYfjww.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;터미널&lt;/code&gt;이 나타나면, 아래 명령어를 입력합니다&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcloud pubsub subscriptions pull &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;구독 이름]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서는 제가 구독이름을 &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;로 했기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;gcloud pubsub subscriptions pull test&lt;/code&gt;를 입력했습니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1800/1*92mdY_6WR6mBA1-6RuzxcA.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;그럼 아래와 같이 먼저 입력한 &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello World&lt;/code&gt;란 메시지를 볼 수 있습니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1800/1*8oRAjErlEWLBIMlXqIZqxQ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;마무리&quot;&gt;마무리&lt;/h3&gt;

&lt;p&gt;사실 이 정도만 가지고 어디서 어떻게 써야할지 모르겠지만, 다음번 Pub/Sub 포스팅에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Node.js&lt;/code&gt;나 &lt;code class=&quot;highlighter-rouge&quot;&gt;Python&lt;/code&gt;으로
&lt;code class=&quot;highlighter-rouge&quot;&gt;Pub/Sub&lt;/code&gt;에 데이터를 넣고 불러오는 예제를 통해서 해보도록 하겠습니다. 간단히 말해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;메시지가 유실이 되면 안되는
실시간 데이터들을 Pub/Sub으로 보내면 얘가 알아서 핸들링을 해줍니다&lt;/code&gt; 이에 관련된 많은 API들이 지원되기 때문에
Message Provider에서 Pub/Sub으로 메시지를 던지기만 하면 됩니다&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>GCP PubSub 살펴보기</title>
    <updated>2018-03-05T09:00:00+09:00</updated>
    <dc:date>2018-03-05T09:00:00+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>박정운</name>
    </author>
    <id>http://jungwoon.github.io/bigquery/2018/03/04/BigQuery-CSV/</id>
    <link href="http://jungwoon.github.io/bigquery/2018/03/04/BigQuery-CSV/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;h2 id=&quot;bigquery&quot;&gt;BigQuery&lt;/h2&gt;

&lt;p&gt;이번에는 BigQuery에 CSV 파일을 업로드 하는 방법을 살펴 보도록 하겠습니다&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;실습&quot;&gt;실습&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://console.cloud.google.com&quot;&gt;구글 클라우드 콘솔&lt;/a&gt;에 들어갑니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*zjj5jR9EuSsuUB1vanUDlw.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;메뉴에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;BigQuery&lt;/code&gt;를 찾아 클릭합니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*WogRtV2q6c1oyzviP6cG1A.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;우선 테스트를 위해서 일반 &lt;code class=&quot;highlighter-rouge&quot;&gt;database&lt;/code&gt;에 해당하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;dataset&lt;/code&gt;을 만듭니다&lt;/p&gt;

&lt;p&gt;(화살표를 누르면 다음과 같이 뜹니다)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*nxR1aeyhQKsg9QTAySYEUg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;이름을 넣고, &lt;code class=&quot;highlighter-rouge&quot;&gt;Data expiration&lt;/code&gt; 등도 선택할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*nQLS5La7vRPFtWP7XqL3xQ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ecommerce&lt;/code&gt;라는 &lt;code class=&quot;highlighter-rouge&quot;&gt;dataset&lt;/code&gt;이 만들어 졌으니 테이블을 만들기 위해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;버튼을 누릅니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*uLdcmkuBbR2gh5jjWBVy8w.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;그럼 다음과 같은 화면이 나오는데 아래 상자안에 있는 설정을 통해서 CSV 파일을 읽어올 수 있습니다&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;choose file&lt;/code&gt;을 눌러서 컴퓨터에 저장된 &lt;code class=&quot;highlighter-rouge&quot;&gt;csv파일&lt;/code&gt;을 가져오겠습니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*vO8PcWPozVCnIhLCkLLDqQ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;여기서는 purchase_data를 가져와 보겠습니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*XbEiqQgzqYEycPGO-lJOIA.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;사용할 데이터는 다음과 같이 생겼습니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*P5J8bDEW9juU_-JcWoERig.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;Table name&lt;/code&gt;을 넣어주고 여기서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;purchase&lt;/code&gt;로 넣어주겠습니다&lt;/p&gt;

&lt;p&gt;그 다음 스키마를 지정해주는 부분이 나오는데, 여기서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Automatically detect&lt;/code&gt;를 이용한 자동으로 스키마 가져오는 방법도 있고,&lt;/p&gt;

&lt;p&gt;직접 넣어주는 방법도 있습니다. 자신의 데이터에 맞는 방법으로 넣어줍니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*2awWKN04R5GZ2bOZRmbxiQ.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;만약 첫줄에 컬럼명이 있는경우 무시하기 위해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Header rows to skip&lt;/code&gt;을 설정해줍니다&lt;/p&gt;

&lt;p&gt;그 다음 &lt;code class=&quot;highlighter-rouge&quot;&gt;Create Table&lt;/code&gt;을 누릅니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*anH5JJ1rlSnVyHjGmPPbZw.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;그럼 다음과 같이 Table 생성을 위한 &lt;code class=&quot;highlighter-rouge&quot;&gt;job&lt;/code&gt;이 나옵니다&lt;/p&gt;

&lt;p&gt;(저는 초기 스키마 설정을 몇번 잘못해 아래에 실패 &lt;code class=&quot;highlighter-rouge&quot;&gt;job&lt;/code&gt;들이 보입니다)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*ZjmhS87NQ2J876n-E1H8GA.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;그 다음 쿼리를 날려서 실제 데이터가 잘 들어갔는지 확인을 해 봅니다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2000/1*kbDqABgCO535MHaL5bzNDw.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h3 id=&quot;마무리&quot;&gt;마무리&lt;/h3&gt;

&lt;p&gt;실제 &lt;code class=&quot;highlighter-rouge&quot;&gt;CSV 파일&lt;/code&gt;로 데이터를 가지고 있거나 한 경우에 엑셀로 돌리기 무거운 경우 이렇게 손쉽게 &lt;code class=&quot;highlighter-rouge&quot;&gt;BigQuery&lt;/code&gt;에 올려서 데이터를 손쉽게 핸들링 할 수 있습니다.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>Google BigQuery에 CSV 파일 업로드 하기</title>
    <updated>2018-03-04T09:00:00+09:00</updated>
    <dc:date>2018-03-04T09:00:00+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>백명석</name>
    </author>
    <id>https://brunch.co.kr/@@2xm/32</id>
    <link href="https://brunch.co.kr/@@2xm/32"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;&lt;p&gt;모처럼 Clean Code 강의(https://www.youtube.com/user/codetemplate/videos) 자료에 대한 공유할 만한 질문이 있어서 질문과 답변을 정리해 본다.  질문 https://www.youtube.com/watch?v=IIrjI7YUw6g&amp;amp;index=18&amp;amp;list=PLuLb6MC4SOvXCRePHrb4e-EYadjZ9KH&lt;img src=&quot;http://t1.daumcdn.net/brunch/service/user/2xm/image/RHwoxn00_mZBp2sWIAu80Asd0ME.png&quot; width=&quot;500&quot;&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>독립적인 배포/개발에 대해서 - 어느 주니어 개발자분의 질문</title>
    <updated>2018-03-04T09:42:06+09:00</updated>
    <dc:date>2018-03-04T09:42:06+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>김준형</name>
    </author>
    <id>https://medium.com/@ghilbut/1-2%EB%85%84-%EC%A0%95%EB%8F%84-%EA%BE%B8%EC%A4%80%ED%9E%88-%ED%95%98%EC%8B%A4-%EC%83%9D%EA%B0%81%EC%9D%B4%EC%8B%9C%EB%9D%BC%EB%A9%B4-%EB%91%90%EA%B6%8C-%EB%AA%A8%EB%91%90-%EB%B3%B4%EC%8B%9C%EA%B8%B0%EB%A5%BC-%EA%B6%8C%ED%95%98%EA%B3%A0-%EC%8B%B6%EC%8A%B5%EB%8B%88%EB%8B%A4-222f29544bd5?source=rss-8482dec25ee1------2</id>
    <link href="https://medium.com/@ghilbut/1-2%EB%85%84-%EC%A0%95%EB%8F%84-%EA%BE%B8%EC%A4%80%ED%9E%88-%ED%95%98%EC%8B%A4-%EC%83%9D%EA%B0%81%EC%9D%B4%EC%8B%9C%EB%9D%BC%EB%A9%B4-%EB%91%90%EA%B6%8C-%EB%AA%A8%EB%91%90-%EB%B3%B4%EC%8B%9C%EA%B8%B0%EB%A5%BC-%EA%B6%8C%ED%95%98%EA%B3%A0-%EC%8B%B6%EC%8A%B5%EB%8B%88%EB%8B%A4-222f29544bd5?source=rss-8482dec25ee1------2"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;1~2년 정도 꾸준히 하실 생각이시라면 두권 모두 보시기를 권하고 싶습니다. ‘알고리즘 문제 해결 전략'의 풀이를 깊이 있게 이해하고 응용하려면 ‘Introduction to algorithm’이 도움이 되실겁니다. 그리고, 요즘 난이도 있는 인터뷰들(전화, 오프라인 모두)은 CS 기초에 대해 많이 물어보기 때문에 ‘Introduction to algorithm’에 나온 자료구조의 정의를 충분히 숙지하거나 복잡도 계산에 익숙해 지는 것이 도움이 됩니다. 저도 ‘Introduction to algorithm’을 제대로 다 보지는 못했지만, 문제를 풀면서 특정 자료구조나 알고리즘에 대해 이해가 부족하다고 느껴지면 책을 열어보고는 합니다. 다만, 책값이 부담되신다면 ‘Introduction to algorithm’ 구매를 조금 미루셔도 될 듯 합니다. 풀이에 필요한 내용은 인터넷을 통해서도 어느 수준까지는 공부하는데 무리가 없으니까요.&lt;/p&gt;
&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=222f29544bd5&quot; width=&quot;1&quot; height=&quot;1&quot;&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>1~2년 정도 꾸준히 하실 생각이시라면 두권 모두 보시기를 권하고 싶습니다.</title>
    <updated>2018-03-15T11:46:18+09:00</updated>
    <dc:date>2018-03-15T11:46:18+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>chan</name>
    </author>
    <id>https://brunch.co.kr/@@6oa/14</id>
    <link href="https://brunch.co.kr/@@6oa/14"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;&lt;p&gt;오랜만이다. 그간 이런 저런 고민도 참 많았고, 투정도 많이 부리고, 여기저기 미X개 역할도 상당히 했던 것 같다. 그래서 브런치에 머릿속 필터없이 마구 지껄지껄 하기까지 수개월이 걸린듯 하다.우선. 자축하자. MySQL은 여전히 무사하다. 물론 이런저런 아슬아슬한 상황도 있었고, 마음도 많이 졸이기도 했지만.. 쫄보 행원 DBA 는 여전히 잘 살아가고 있&lt;img src=&quot;http://t1.daumcdn.net/brunch/service/guest/image/VpzXepho71nr5UcvBs69UUr0MT8.png&quot; width=&quot;500&quot;&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>벌써 3월! 나는 누구인가? - 은행 오픈소스 DBA 8개월차.. 나는 지금?</title>
    <updated>2018-03-15T00:50:24+09:00</updated>
    <dc:date>2018-03-15T00:50:24+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>jhrogue</name>
    </author>
    <id>http://jhrogue.blogspot.com/2018/03/blog-post_17.html</id>
    <link href="http://jhrogue.blogspot.com/2018/03/blog-post_17.html"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-k47BXMJ3vYM/WqyEiAI9qsI/AAAAAAAADSI/SWAhtVISRTIYXGUZpOFsp-yu6K12ZsOXQCLcBGAs/s1600/%25E1%2584%2589%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2585%25E1%2585%25AC%25E1%2584%2587%25E1%2585%25A1%25E1%2586%25AE%25E1%2584%2582%25E1%2585%25B3%25E1%2586%25AB%2B%25E1%2584%258C%25E1%2585%25A9%25E1%2584%258C%25E1%2585%25B5%25E1%2586%25A8%25E1%2584%258B%25E1%2585%25B4%2B%25E1%2584%258B%25E1%2585%25A1%25E1%2586%25AB%25E1%2584%258C%25E1%2585%25A5%25E1%2586%25AB%25E1%2584%2580%25E1%2585%25A7%25E1%2586%25BC%25E1%2584%258B%25E1%2585%25A7%25E1%2586%25BC.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://1.bp.blogspot.com/-k47BXMJ3vYM/WqyEiAI9qsI/AAAAAAAADSI/SWAhtVISRTIYXGUZpOFsp-yu6K12ZsOXQCLcBGAs/s1600/%25E1%2584%2589%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2585%25E1%2585%25AC%25E1%2584%2587%25E1%2585%25A1%25E1%2586%25AE%25E1%2584%2582%25E1%2585%25B3%25E1%2586%25AB%2B%25E1%2584%258C%25E1%2585%25A9%25E1%2584%258C%25E1%2585%25B5%25E1%2586%25A8%25E1%2584%258B%25E1%2585%25B4%2B%25E1%2584%258B%25E1%2585%25A1%25E1%2586%25AB%25E1%2584%258C%25E1%2585%25A5%25E1%2586%25AB%25E1%2584%2580%25E1%2585%25A7%25E1%2586%25BC%25E1%2584%258B%25E1%2585%25A7%25E1%2586%25BC.jpg&quot; data-original-width=&quot;458&quot; data-original-height=&quot;669&quot;&gt;&lt;/a&gt;&lt;/div&gt; &lt;p&gt;아주 오래 전에 &lt;a href=&quot;http://jhrogue.blogspot.kr/2010/10/managing-unexpected.html&quot;&gt;[독서광] Managing the Unexpected&lt;/a&gt;라는 책을 소개해드린 적이 있었는데, 얼마 전에 한국어 번역서가 나왔다는 사실을 알게되었기에 독자 여러분들께 소개드린다.&lt;/p&gt; &lt;p&gt;최근에 온리 더 브레이브라는 실화를 바탕으로 하는 영화를 봤는데, 자연재해에 맞서 싸우는 산림 소방관들의 이야기를 잘 그려냈다. 그런데, 불현듯 예전에 읽은 'Managing the Unexpected'가 떠올랐다. 이 책 1장에서 다룬 내용이 바로 세로 그란데의 화재를 다루는 내용이었고 고신뢰조직(HRO)의 대표적인 예가 산림 소방서이므로 자연스래 연상된 것 같다.&lt;/p&gt; &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/81I8Q-UciSM&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt; &lt;p&gt;이 책은 위험한 상황이나 환경에서 사람 목숨이 왔다갔다하는 조직뿐만 아니라 일반적인 조직에서도 성과를 높이기 위해 응용 가능한 여러 가지 훌륭한 아이디어와 구체적인 절차를 기술하고 있기 때문에 회복탄력성 관점에서 주의 깊게 살펴보면 여러 가지 교훈을 얻을 것이다. 이 책 처음에 나오는 가슴 뜨끔한 문구를 읽어보면 마음 가짐이 달라질지도...&lt;/p&gt; &lt;blockquote&gt;위기를 다룰 수 있는 능력은 그 위기가 발생하기 이전에 개발되어 있던 구조들에 크게 의존합니다. 사건이란 어느 면에서 보면 잔인한 평가와 같습니다. 미리 준비되어 있지 않은 것들은 모두 삽시간에 복잡하고 거대한 문제로 빨려 들어갑니다. 거기에서 모든 약점들이 서로 앞을 다투어 드러나는 것입니다.&lt;/blockquote&gt; &lt;p&gt;결론: 출간한지 10년이 넘었지만 여전히 유효한 내용을 담고 있으므로 강력하게 추천한다.&lt;/p&gt; &lt;p&gt;보너스: 컬럼비아 호의 사고 사례를 아주 잘 설명하고 있는 &lt;a href=&quot;https://www.theatlantic.com/magazine/archive/2003/11/columbias-last-flight/304204/&quot;&gt;Columbia's Last Flight&lt;/a&gt;도 참고로 읽어보면 더욱 좋겠다.&lt;/p&gt; EOB&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>[독서광] 신뢰받는 조직의 안전경영</title>
    <updated>2018-03-17T12:27:00+09:00</updated>
    <dc:date>2018-03-17T12:27:00+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>jhrogue</name>
    </author>
    <id>http://jhrogue.blogspot.com/2018/03/b-3-2.html</id>
    <link href="http://jhrogue.blogspot.com/2018/03/b-3-2.html"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-4LD3vfQV778/WqYPJ2SROyI/AAAAAAAADR4/jwi_1eTkHmALjsilrWv-qBlmyvis5LRcwCLcBGAs/s1600/17-developer-productivity.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://3.bp.blogspot.com/-4LD3vfQV778/WqYPJ2SROyI/AAAAAAAADR4/jwi_1eTkHmALjsilrWv-qBlmyvis5LRcwCLcBGAs/s400/17-developer-productivity.png&quot; width=&quot;334&quot; height=&quot;400&quot; data-original-width=&quot;1018&quot; data-original-height=&quot;1220&quot;&gt;&lt;/a&gt;&lt;/div&gt; (오늘의 짤방: 개발자의 생산성 from http://www.monkeyuser.com/2016/developer-productivity/)   &lt;ol&gt;
&lt;li&gt;빅데이터/인공지능 &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/news/2018/03/propelml-js-machine-learning&quot;&gt;Propel: Scientific and ML Computing JavaScript Library from Node.js Founder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.theguardian.com/books/2018/mar/11/the-genius-within-review-smart-look-boosting-brains-david-adam&quot;&gt;The Genius Within review – a smart look at boosting our brains&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@karpathy/a-peek-at-trends-in-machine-learning-ab8a1085a106&quot;&gt;A Peek at Trends in Machine Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/waymo/same-driver-different-vehicle-bringing-waymo-self-driving-technology-to-trucks-e55824b55b8f&quot;&gt;Same driver, different vehicle: Bringing Waymo self-driving technology to trucks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/machine-learning/rules-of-ml/&quot;&gt;Rules of Machine Learning: Best Practices for ML Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://news.mk.co.kr/newsRead.php?sc=30000001&amp;amp;year=2018&amp;amp;no=154436&amp;amp;sID=301&quot;&gt;로봇 기사 &quot;어디로 모실까요&quot; 5분 뒤 상황 예측 차로변경 척척&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.itworld.co.kr/news/108466&quot;&gt;미국 내 데이터 과학과 머신러닝의 초고속 성장 원동력 4가지&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.nytimes.com/2018/03/06/technology/uber-self-driving-trucks.html?smid=tw-share&quot;&gt;Uber’s Self-Driving Trucks Hit the Highway, but Not Local Roads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.thurrott.com/windows/windows-10/153662/microsoft-brings-ai-prowess-windows-10-apps&quot;&gt;Microsoft Brings Its AI Prowess to Windows 10 Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://motherboard.vice.com/en_us/article/3k7mgn/baidu-deep-voice-software-can-clone-anyones-voice-with-just-37-seconds-of-audio&quot;&gt;‘Deep Voice’ Software Can Clone Anyone's Voice With Just 3.7 Seconds of Audio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pythonhosted.org/spyder/overview.html&quot;&gt;Spyder is the Scientific PYthon Development EnviRonment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.datasciencecentral.com/profiles/blogs/programming-languages-for-data-science-and-ml-with-source-code-il&quot;&gt;Programming Languages for Data Science and ML - With Source Code Illustrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://colah.github.io/posts/2015-08-Understanding-LSTMs/&quot;&gt;Understanding LSTM Networks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://news.naver.com/main/read.nhn?mode=LPOD&amp;amp;mid=sec&amp;amp;oid=015&amp;amp;aid=0003902210&quot;&gt;&quot;네가 뭘 틀릴지 알고 있다&quot;… 노량진 간 'AI 족집게 강사'&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://qz.com/1206229/this-is-the-best-book-for-learning-modern-statistics-its-free/&quot;&gt;These are the best books for learning modern statistics—and they’re all free&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.technologyreview.com/s/610298/tech-companies-should-stop-pretending-ai-wont-destroy-jobs/&quot;&gt;Kai-Fu Lee - Tech companies should stop pretending AI won’t destroy jobs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.wired.com/story/ml-brain-boost/&quot;&gt;AI JUST LEARNED HOW TO BOOST THE BRAIN'S MEMORY&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://rise.cs.berkeley.edu/blog/pandas-on-ray/&quot;&gt;Pandas on Ray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.machinebox.io/how-anyone-can-build-a-machine-learning-image-classifier-from-photos-on-your-hard-drive-very-5c20c6f2764f&quot;&gt;Build a machine learning image classifier from photos on your hard drive very quickly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.quantamagazine.org/the-bayesian-probability-puzzle-solution-20180302/&quot;&gt;Solution: ‘When Probability Meets Real Life’&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.weforum.org/agenda/2018/02/mind-reading-ai-creates-images-from-your-thoughts&quot;&gt;This mind-reading AI can see what you're thinking - and draw a picture of it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://research.googleblog.com/2018/03/making-healthcare-data-work-better-with.html&quot;&gt;Making Healthcare Data Work Better with Machine Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/waymo/waymo-reaches-5-million-self-driven-miles-61fba590fafe&quot;&gt;Waymo reaches 5 million self-driven miles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.reuters.com/article/us-pharmaceuticals-data/big-pharma-big-data-why-drugmakers-want-your-health-records-idUSKCN1GD4MM&quot;&gt;Big pharma, big data: why drugmakers want your health records&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/machine-learning/crash-course/&quot;&gt;머신러닝을 배우려는 실무자를 위한 자기 주도형 학습 가이드 (by Google)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/donkey-car&quot;&gt;$200 Self-Driving Cars with RasPi and Tensorflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.quantamagazine.org/why-self-taught-artificial-intelligence-has-trouble-with-the-real-world-20180221/&quot;&gt;Why Self-Taught Artificial Intelligence Has Trouble With the Real World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.itworld.co.kr/news/108381&quot;&gt;머신러닝과 인공지능의 신뢰 얻기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://arxiv.org/pdf/1106.5736.pdf&quot;&gt;Algorithms for Solving Rubik’s Cubes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/intuitionmachine/neurons-are-more-complex-than-what-we-have-imagined-b3dd00a1dcd3&quot;&gt;Surprise! Neurons are Now More Complex than We Thought!!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.nytimes.com/interactive/2018/02/27/opinion/automated-vehicles-cant-save-cities.html&quot;&gt;Automated Vehicles Can't Save Cities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;암호화폐/블록체인 &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zdnet.co.kr/news/news_view.asp?artice_id=20180311122820&amp;amp;type=det&amp;amp;re=&quot;&gt;부테린, 블록체인 한계 넘을 아이디어 공개&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://jhrogue.blogspot.kr/2018/03/blog-post.html&quot;&gt;[독서광] 블록체인 무엇인가?&lt;/a&gt;(본인이 쓴 글) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.nytimes.com/interactive/2018/obituaries/overlooked-ada-lovelace.html&quot;&gt;Ada Lovelace - A gifted mathematician who is now recognized as the first computer programmer.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://m.kisdi.re.kr/mobile/medi/pho_view.m?seq=32757&quot;&gt;4차 산업혁명과 블록체인 컨퍼런스&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.zdnet.co.kr/news/news_view.asp?artice_id=20180308152325&amp;amp;type=det&amp;amp;re=&quot;&gt;블록체인으로 전자투표·통관까지 처리한다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/magazine/mt845650.aspx&quot;&gt;Blockchain - Blockchain Fundamentals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ciokorea.com/news/37490?page=0,0&quot;&gt;암호화폐 열기 속으로··· KFC, 코닥, 버거킹 등 5개 기업 사례&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.technologyreview.com/s/610392/ethereums-smart-contracts-are-full-of-holes/&quot;&gt;Ethereum’s smart contracts are full of holes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hackernoon.com/an-undervalued-blockchain-market-in-china-is-good-news-for-you-d0c010170622&quot;&gt;An Undervalued Blockchain Market In China Is Good News For You&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://steemit.com/coinkorea/@goldenman/and-atomic-swaps-and-etomic-swaps&quot;&gt;[암호화폐] 아토믹 스왑 &amp;amp; 에토믹 스왑, 쉬운 말로 설명해보기 (Atomic Swaps &amp;amp; Etomic Swaps)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://steemit.com/coinkorea/@nand/2018-university-class-list-about-blockchain-in-korea&quot;&gt;2018년도 블록체인 관련 과목이 열린 한국 대학교는 어디?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ciokorea.com/news/37455&quot;&gt;미 증권거래위 &quot;ICO는 주식&quot;··· '암호통화 규제' 더 강화한다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://beta.techcrunch.com/2018/03/04/icos-delivered-at-least-3-5x-more-capital-to-blockchain-startups-than-vc-since-2017/&quot;&gt;ICOs delivered at least 3.5x more capital to blockchain startups than VC since 2017&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.itworld.co.kr/news/108417&quot;&gt;“수요는 많은데 개발자는 부족” 블록체인 채용 현황과 기술 역량 습득 가이드&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://qz.com/1194612/telegram-ico-allocations-are-being-flipped-for-millions-before-going-on-public-sale/&quot;&gt;People are already flipping the Telegram ICO for millions, even though it’s not on sale yet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://arstechnica.com/information-technology/2018/03/ethereum-fixes-serious-eclipse-flaw-that-could-be-exploited-by-any-kid/&quot;&gt;Ethereum fixes serious “eclipse” flaw that could be exploited by any kid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/articles/cryptocurrency-changes-it-industry&quot;&gt;How Cryptocurrencies are Changing the IT Industry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hbr.org/2017/01/the-truth-about-blockchain&quot;&gt;The Truth About Blockchain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.blockchainnews.co.kr/m/view.php?idx=697&quot;&gt;일본 전자상거래 공룡 '라쿠텐', 9조원 규모 암호화폐 발행&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;읽을거리 &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://work.qz.com/1226761/a-former-google-engineer-explains-how-creative-freedom-can-turn-people-into-entitled-jerks/&quot;&gt;A former Google engineer explains how creative freedom can turn people into entitled jerks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.muz.li/how-to-be-a-great-junior-team-member-649740ccb757&quot;&gt;How To Be A Great Junior Team Member - Or how to make the very best of your first real job&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://qz.com/1225195/youre-probably-way-too-optimistic-about-your-future-happiness/&quot;&gt;You’re probably way too optimistic about your future happiness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ted.com/talks/adam_galinsky_how_to_speak_up_for_yourself&quot;&gt;How to speak up for yourself&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://reason.com/archives/2018/03/11/going-to-college-is-selfish&quot;&gt;Going to College Is Selfish - Let's stop pretending education is a public good.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.theguardian.com/technology/2018/jan/23/mary-lee-berners-lee-obituary&quot;&gt;Mary Lee Berners-Lee obituary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.innovator.or.kr/2018/03/ceo.html?m=1&quot;&gt;CEO여, 잘못된 의사결정이 우유부단함보다 낫다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.bbc.com/future/story/20180228-there-are-benefits-to-being-antisocial-or-a-loner&quot;&gt;Why being a loner may be good for your health&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.backblaze.com/blog/ssd-vs-hdd-future-of-storage/&quot;&gt;HDD vs SSD: What Does the Future for Storage Hold?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.theatlantic.com/health/archive/2018/03/you-dont-know-yourself-as-well-as-you-think-you-do/554612/&quot;&gt;People Don't Actually Know Themselves Very Well&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/1802.07068&quot;&gt;Talent vs Luck: the role of randomness in success and failure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://physicsbuzz.physicscentral.com/2015/09/one-winning-move.html&quot;&gt;How 4,000 Physicists Gave a Vegas Casino its Worst Week Ever&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hbr.org/2018/01/perfectionism-is-increasing-and-thats-not-good-news&quot;&gt;Perfectionism Is Increasing, and That’s Not Good News&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.bloomberg.com/news/articles/2018-02-16/supertall-towers-are-driving-an-elevator-revolution&quot;&gt;Supertall Towers Are Driving an Elevator Revolution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://qz.com/email/quartz-obsession/1220036/&quot;&gt;The Peter principle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://liveandventure.com/2018/03/04/airbnb-2/&quot;&gt;에어비앤비 초창기 일화들&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shindonga.donga.com/3/all/13/1165778/1&quot;&gt;구속영장, 발부와 기각 사이&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://m.blog.naver.com/pyjlawyer/221165444537&quot;&gt;[여의도변호사박영진] 사회주의적 결혼, 자본주의적 결혼&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.scientificamerican.com/beautiful-minds/the-role-of-luck-in-life-success-is-far-greater-than-we-realized/&quot;&gt;The Role of Luck in Life Success Is Far Greater Than We Realized - Are the most successful people in society just the luckiest people?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/emotional-intelligence-software&quot;&gt;Am I a Brilliant Jerk?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://news.joins.com/article/22402594&quot;&gt;시총 128조 증발···미국을 바꿨던 GE 어쩌다 망가졌나&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://news.naver.com/main/read.nhn?mode=LSD&amp;amp;mid=shm&amp;amp;sid1=103&amp;amp;oid=025&amp;amp;aid=0002801832&quot;&gt;[강갑생의 바퀴와 날개] 좌석 모자라 아우성인데..KTX, SRT 열차 못 늘리는 까닭은?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.theguardian.com/world/video/2018/mar/01/venice-italy-snow-drone-footage-aerial-view-video&quot;&gt;Venice in the snow: drone footage shows off city's beautiful white carpet - video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://mirrorzine.kr/shortstory/123416&quot;&gt;[소설] 초공간 도약 항법의 개발&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cbinsights.com/reports/CB-Insights_Auto-Tech-2018-Briefing.pdf&quot;&gt;State of Auto Tech 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mtlynch.io/why-i-quit-google/&quot;&gt;Why I Quit Google to Work for Myself&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.wsj.com/articles/your-love-of-your-old-smartphone-is-a-problem-for-apple-and-samsung-1519822801&quot;&gt;Your Love of Your Old Smartphone Is a Problem for Apple and Samsung&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sec.gov/Archives/edgar/data/1639920/000119312518063434/d494294df1.htm&quot;&gt;Spotify Form F-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/spaceshipone&quot;&gt;How to Make a Spaceship&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bestfolios.com/&quot;&gt;Design portfolio inspirations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.labmanager.com/news/2018/02/countries-with-greater-gender-equality-have-lower-percentage-of-female-stem-graduates&quot;&gt;Countries with Greater Gender Equality Have Lower Percentage of Female STEM Graduates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://qz.com/email/quartz-obsession/1214890/&quot;&gt;Ejection seats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.atlasobscura.com/articles/blankets-summer-hot&quot;&gt;Why Do We Sleep Under Blankets, Even on the Hottest Nights?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt; EOB&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>[B급 프로그래머] 3월 2주 소식(빅데이터/인공지능, 암호화폐/블록체인, 읽을거리 부문)</title>
    <updated>2018-03-13T14:19:00+09:00</updated>
    <dc:date>2018-03-13T14:19:00+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>jhrogue</name>
    </author>
    <id>http://jhrogue.blogspot.com/2018/03/blog-post.html</id>
    <link href="http://jhrogue.blogspot.com/2018/03/blog-post.html"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-W-oM8QtHzpU/WqHagyISPQI/AAAAAAAADRo/YyQ9iH1D3hMaNDvsvpAe2fOdWcV2p-qDQCLcBGAs/s1600/%25E1%2584%2587%25E1%2585%25B3%25E1%2586%25AF%25E1%2584%2585%25E1%2585%25A9%25E1%2586%25A8%25E1%2584%258E%25E1%2585%25A6%25E1%2584%258B%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2586%25E1%2585%25AE%25E1%2584%258B%25E1%2585%25A5%25E1%2586%25BA%25E1%2584%258B%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2580%25E1%2585%25A1.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://2.bp.blogspot.com/-W-oM8QtHzpU/WqHagyISPQI/AAAAAAAADRo/YyQ9iH1D3hMaNDvsvpAe2fOdWcV2p-qDQCLcBGAs/s1600/%25E1%2584%2587%25E1%2585%25B3%25E1%2586%25AF%25E1%2584%2585%25E1%2585%25A9%25E1%2586%25A8%25E1%2584%258E%25E1%2585%25A6%25E1%2584%258B%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2586%25E1%2585%25AE%25E1%2584%258B%25E1%2585%25A5%25E1%2586%25BA%25E1%2584%258B%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2580%25E1%2585%25A1.jpg&quot; data-original-width=&quot;458&quot; data-original-height=&quot;636&quot;&gt;&lt;/a&gt;&lt;/div&gt; &lt;p&gt;우연히 블록체인 관련 서적 추천평을 요청 받아서 출간에 앞서 미리 읽어봤는데, 게으름으로 인해 이제 독후감을 정리해본다. 오늘 소개해드릴 책은 아마존에서 높은 판매 순위를 자랑하는 &lt;a href=&quot;https://www.amazon.com/Blockchain-Basics-Non-Technical-Introduction-Steps/dp/1484226038&quot;&gt;Blockchain Basics: A Non-Technical Introduction in 25 Steps &lt;/a&gt;의 번역서인 &lt;a href=&quot;http://www.yes24.com/24/goods/58551591?scode=032&amp;amp;OzSrank=1&quot;&gt;블록체인 무엇인가&lt;/a&gt;다.&lt;/p&gt; &lt;p&gt;이 책은 원서 제목이 잘 나타내듯이 기술과 관련이 없는 분들을 위해 수학 공식과 코드를 동원하지 않고 블록체인을 설명하는 목적으로 만들어졌다. 물론 그렇다고 해서 인문학적이거나 비즈니스적으로 접근하지는 않으며 실제 블록체인의 동작 원리를 설명하고 있다. 직접 작성한 추천평을 보시면 이해가 가시리라...&lt;/p&gt; &lt;blockquote&gt;▶ 블록체인이란 큰 덩어리를 조각내 소화시켜 주는 책!&lt;br&gt;  많은 사람들이 블록체인을 이해할 때 높은 진입장벽을 느낀다. 블록체인은 여러 기술들이 적재적소에 융합된 것이기 때문이다. 하지만 이 책이라면 단계적이고 효과적으로 블록체인을 배울 수 있다. 일단, 블록체인의 장벽인 여러 기술을 조각들로 분리한다. 그런 다음 이 조각들을 수학, 코딩 같은 어려운 설명 없이 각개격파해 나간다. 손쉽게 조각들을 알아가다 보면 종국에는 블록체인이라는 큰 퍼즐을 완성할 수 있게 된다.&lt;/blockquote&gt; &lt;p&gt;이 책의 구조는 조금 독특한데 소프트웨어 공학 원리를 풀어서 설명하는 1부, 소유권을 중심으로 블록체인의 필요성을 확인하는 2부, 실제 블록체인이 동작하는 원리를 개별 구성 요소로 쪼개어 소개하는 3부, 블록체인의 한계를 다루는 4부, 블록체인의 미래를 다루는 5부로 나눠진다. 이렇게 설명하면 각각 따로노는 듯이 보이지만 실제 책을 읽어보면 유기적으로 잘 연결되어 있기 때문에 상당히 인상 깊게 다가온다. 물론 현업 블록체인 개발자 관점에서는 심심하다고 느껴질지도 모르겠다.&lt;/p&gt; &lt;p&gt;본문에 나오는 몇 가지 해시 관련 실험이 가능하게 원서 홈 페이지에서 제공하는 부록이 존재한다. 다음 링크를 따라 들어가서 직접 해시 함수로 장난을 치다보면 본문 내용이 더욱 잘 와닿을 것이다.&lt;/p&gt; &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.blockchain-basics.com/HashFunctions.html&quot;&gt;SHA 해시 함수 데모&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.blockchain-basics.com/HashPuzzle.html&quot;&gt;블록 채굴 기본 아이디어&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt; &lt;p&gt;결론: 컴퓨터 비전공자나 보안/암호 쪽 지식이 부족한 초보 개발자가 블록체인을 이해하고 싶을 경우 이 책이 출발점으로서 많은 도움을 줄 것이다.&lt;/p&gt; &lt;p&gt;보너스: 이 책에서 한단계 더 깊히 들어가고 싶으면 MSDN에 소개된 &lt;a href=&quot;https://msdn.microsoft.com/en-us/magazine/mt845650.aspx&quot;&gt;Blockchain - Blockchain Fundamentals&lt;/a&gt;를 적극 추천한다.&lt;/p&gt; EOB&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>[독서광] 블록체인 무엇인가?</title>
    <updated>2018-03-10T16:22:00+09:00</updated>
    <dc:date>2018-03-10T16:22:00+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>jhrogue</name>
    </author>
    <id>http://jhrogue.blogspot.com/2018/03/b-3-1.html</id>
    <link href="http://jhrogue.blogspot.com/2018/03/b-3-1.html"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-g6SsWfs9W6s/Wp8zsDz0THI/AAAAAAAADRM/TUveTI0BDd43WfdCJfKao2nd8cnW7cKQwCLcBGAs/s1600/the%2Breality%2Bof%2Bscaling.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://2.bp.blogspot.com/-g6SsWfs9W6s/Wp8zsDz0THI/AAAAAAAADRM/TUveTI0BDd43WfdCJfKao2nd8cnW7cKQwCLcBGAs/s1600/the%2Breality%2Bof%2Bscaling.jpg&quot; data-original-width=&quot;634&quot; data-original-height=&quot;828&quot;&gt;&lt;/a&gt;&lt;/div&gt; (오늘의 짤방: The reality of scaling via @InfoQ)  &lt;ol&gt;
&lt;li&gt;개발/관리도구 &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/go-concurrency-gc&quot;&gt;The Why of Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zwischenzugs.com/2018/02/24/5-things-i-did-to-change-a-teams-culture/&quot;&gt;Five Things I Did to Change a Team’s Culture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/edu/c++/&quot;&gt;Google C++ Course&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ciokorea.com/news/37456&quot;&gt;'클릭 몇 번으로 앱 만든다?'··· 로우 코드의 가능성과 한계&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.itworld.co.kr/news/108415&quot;&gt;How-To : 윈도우 10 PC 발목 잡는 8가지 원인 찾아내기&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jybaek.tistory.com/686&quot;&gt;Google Colaboratory를 아시나요?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://devhints.io/&quot;&gt;Rico's cheatsheets for developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/news/2018/03/java-ee-becomes-jakarta-ee&quot;&gt;Java EE Becomes Jakarta EE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://techblog.bozho.net/gdpr-practical-guide-developers/&quot;&gt;GDPR – A PRACTICAL GUIDE FOR DEVELOPERS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kjanshair.github.io/2018/02/20/prometheus-monitoring/?imm_mid=0fbccc&amp;amp;cmp=em-webops-na-na-newsltr_20180302&quot;&gt;Monitoring with Prometheus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=uTEL8Ff1Zvk&amp;amp;feature=youtu.be&quot;&gt;What's the Difference Between DevOps and SRE?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://jhrogue.blogspot.kr/2018/03/b.html&quot;&gt;[B급 프로그래머] 더 이상 초보 개발자가 아니라는 사실을 언제 알게 되나요?&lt;/a&gt;(본인이 쓴 글) &lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://books.goalkicker.com/&quot;&gt;Programming Notes for Professional books&lt;/a&gt;(강력 추천) &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://peter.bourgon.org/go-best-practices-2016/&quot;&gt;Go best practices, six years in&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.google.com/document/d/131vjr4DH6JFnb-blm_uRdaC0_Nv3OUwjEY5qVCxCup4/edit#&quot;&gt;WebAssembly architecture for Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.wired.com/story/github-ddos-memcached/&quot;&gt;GITHUB SURVIVED THE BIGGEST DDOS ATTACK EVER RECORDED&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yujineeee/clean-code-php&quot;&gt;Clean Code PHP - 한글판&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/emotional-intelligence-software&quot;&gt;Am I a Brilliant Jerk?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/articles/10-lessons-distributed-team&quot;&gt;Top 10 Lessons in Building a Distributed Engineering Team&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.freecodecamp.org/why-you-need-python-environments-and-how-to-manage-them-with-conda-85f155f4353c&quot;&gt;Why you need Python environments and how to manage them with Conda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/news/2018/03/OMR-OpenJ9&quot;&gt;Eclipse Open J9 – an Open Source Java Virtual Machine Based on the Eclipse OMR Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fossa.io/&quot;&gt;Master your open source_ - Dependency tracking, license compliance and attribution notices on autopilot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ciokorea.com/news/37426&quot;&gt;속뜻을 찾아라··· 관리자가 알아둘 만한 개발자 언어 15가지&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spectrum.ieee.org/computing/hardware/computing-with-random-pulses-promises-to-simplify-circuitry-and-save-power&quot;&gt;Computing With Random Pulses Promises to Simplify Circuitry and Save Power&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/news/2018/02/first-look-jdk10-rc1&quot;&gt;A First Look at Java 10 Release Candidate 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mtlynch.io/why-i-quit-google/&quot;&gt;Why I Quit Google to Work for Myself&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.elastic.co/blog/doubling-down-on-open&quot;&gt;Doubling Down on Open(Elastic X-Pack)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://phoboslab.org/log/2017/02/decode-it-like-its-1999&quot;&gt;DECODE IT LIKE IT'S 1999&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@gitlab/gitlabs-2018-product-vision-prototype-demo-6bd3c5d26348&quot;&gt;GitLab’s 2018 Product Vision: Prototype demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=S9JGmA5_unY&quot;&gt;How secure is 256 bit security?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.quora.com/Which-design-patterns-in-computer-programming-have-you-used-the-most-often-in-your-projects-so-far/answer/Harold-Serrano?share=429b89b1&quot;&gt;Which design patterns in computer programming have you used the most often in your projects so far?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://banzaicloud.com/blog/prometheus-federation/&quot;&gt;Monitoring multiple federated clusters with Prometheus - the secure way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pm2.keymetrics.io/&quot;&gt;pm2 - Advanced, production process manager for Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@keavy/who-i-want-to-work-for-b04ce972c202&quot;&gt;Who I want to work for&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/sangminpark1979/kubernetes-88700018/1&quot;&gt;Kubernetes 소개(한국어)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.mailerlite.com/&quot;&gt;mailer lite - All You Need to Power Your Email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wgropp.cs.illinois.edu/courses/cs598-s16/lectures/lecture15.pdf&quot;&gt;Lecture 15: Moore’s Law and Dennard Scaling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kennethreitz/requests-html&quot;&gt;Pythonic HTML Parsing for Humans™&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cloud.google.com/files/Cloud-native-approach-with-microservices.pdf&quot;&gt;Taking the Cloud-Native Approach with Microservices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hackernoon.com/why-isnt-agile-working-d7127af1c552&quot;&gt;Why Isn’t Agile Working?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.itworld.co.kr/news/108321&quot;&gt;글로벌 칼럼 | 왜 SHA-3을 사용하지 않는가&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/crazyguitar/pysheeet/blob/master/docs/notes/python-new-py3.rst&quot;&gt;New in Python3 cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://plato.stanford.edu/entries/computer-science/&quot;&gt;The Philosophy of Computer Science&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mitmproxy.org/&quot;&gt;mitmproxy is a free and open source interactive HTTPS proxy.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.asciinema.org/&quot;&gt;asciinema - Record and share your terminal sessions, the right way.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cockpit-project.org/&quot;&gt;Cockpit is a server manager that makes it easy to administer your GNU/Linux servers via a web browser.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tryolabs.com/blog/2016/12/20/top-10-python-libraries-of-2016/&quot;&gt;Top 10 Python libraries of 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@boxed/moving-a-large-and-old-codebase-to-python3-33a5a13f8c99&quot;&gt;Moving a large and old codebase to Python3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.popit.kr/%EC%9E%90%EB%B0%94-%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-go-%EC%9E%A0%EA%B9%90-%EC%82%AC%EC%9A%A9%ED%95%B4-%EB%B4%A4%EC%8A%B5%EB%8B%88%EB%8B%A41/&quot;&gt;자바 개발자가 Go 잠깐 사용해 봤습니다(1)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jacobian.org/writing/python-environment-2018/&quot;&gt;MY PYTHON DEVELOPMENT ENVIRONMENT, 2018 EDITION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.cloudflare.com/using-go-as-a-scripting-language-in-linux/&quot;&gt;Using Go as a scripting language in Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://software.intel.com/en-us/blogs/2014/02/19/why-has-cpu-frequency-ceased-to-grow&quot;&gt;Why has CPU frequency ceased to grow?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wordsandbuttons.online/programmers_guide_to_polynomials_and_splines.html&quot;&gt;Programmer's guide to polynomials and splines &lt;li&gt;&lt;a href=&quot;http://libdill.org/tutorial-sockets.html&quot;&gt;Tutorial: Using libdill sockets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/danielgtaylor/jpeg-archive&quot;&gt;jpeg-archive - Utilities for archiving JPEGs for long term storage.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fastcompression.blogspot.kr/2018/02/when-to-use-dictionary-compression.html?r=1&quot;&gt;When to use Dictionary Compression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ho94949/poi-korean-translate/blob/master/XXI/OI21.pdf&quot;&gt;폴란드 정보올림픽 문제&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/go-programming-language&quot;&gt;Go Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://allendowney.blogspot.kr/2018/02/learning-to-program-is-getting-harder.html&quot;&gt;Learning to program is getting harder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;http://jhrogue.blogspot.kr/2018/02/b.html&quot;&gt;[B급 프로그래머] 배우는 방법을 다시 배우기&lt;/a&gt;(본인이 작성한 글) &lt;/li&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;고성능 서버/데이터베이스 &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ciokorea.com/news/37471&quot;&gt;'마리아DB vs. 오라클'··· DBMS 전쟁 '판 커진다&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.citusdata.com/blog/2018/03/06/postgres-planner-and-its-usage-of-statistics/&quot;&gt;The Postgres 10 feature you didn't know about: CREATE STATISTICS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://amitkapila16.blogspot.kr/2018/03/zheap-storage-engine-to-provide-better.html&quot;&gt;zheap: a storage engine to provide better control over bloat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.hnpwa.com/introducing-the-hnpwa-api-656db6b88ec1&quot;&gt;Introducing the HNPWA API - Delivering Hacker News JSON data faster than before.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/kafka-streams-spring-cloud&quot;&gt;Kafka Streams - from the Ground Up to the Cloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/news/2018/02/serverless-app-repository&quot;&gt;AWS Makes Serverless Application Repository Generally Available&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/news/2018/02/axondb-event-store-cqrs&quot;&gt;AxonDB, a New Implementation of an Event Store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/presentations/uber-scalability-services&quot;&gt;Scaling Uber to 1,000 Services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.percona.com/resources/white-papers/preventing-common-deadly-mysql-problems&quot;&gt;A Checklist for Preventing Common But Deadly MySQL® Problems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://reconfigure.io/features&quot;&gt;The power of FPGA with Reconfigure.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/news/2018/02/Best-New-Features-MySQL-8&quot;&gt;Preview of New Features in MySQL 8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/ko-kr/azure/architecture/patterns/&quot;&gt;클라우드 디자인 패턴(for Azure)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.geekwire.com/2018/dropbox-saved-almost-75-million-two-years-building-tech-infrastructure/&quot;&gt;Dropbox saved almost $75 million over two years by building its own tech infrastructure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ciokorea.com/news/37360&quot;&gt;“2021년 클라우드 트래픽, 전체의 95%” 시스코 GCI 전망&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dzone.com/articles/why-we-moved-from-nosql-mongodb-to-postgresql&quot;&gt;Why We Moved From NoSQL MongoDB to PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lefred.be/content/top-10-mysql-8-0-features-for-dbas-ops/&quot;&gt;TOP 10 MySQL 8.0 features for DBAs &amp;amp; OPS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt; (보너스: Memory segmentation cheat sheet via @404death) &lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-dtkebvnVcI0/Wp83U3sRlrI/AAAAAAAADRY/cvSIrEgkcCIorPhIqAbq579lHLRAS0blgCLcBGAs/s1600/memory_cheatsheet.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://1.bp.blogspot.com/-dtkebvnVcI0/Wp83U3sRlrI/AAAAAAAADRY/cvSIrEgkcCIorPhIqAbq579lHLRAS0blgCLcBGAs/s400/memory_cheatsheet.jpg&quot; width=&quot;400&quot; height=&quot;283&quot; data-original-width=&quot;1600&quot; data-original-height=&quot;1131&quot;&gt;&lt;/a&gt;&lt;/div&gt; EOB&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>[B급 프로그래머] 3월 1주 소식(개발/관리도구, 고성능 서버/데이터베이스 부문)</title>
    <updated>2018-03-07T17:12:00+09:00</updated>
    <dc:date>2018-03-07T17:12:00+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>애자일컨설팅</name>
    </author>
    <id>http://agile.egloos.com/5905451</id>
    <link href="http://agile.egloos.com/5905451"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;&lt;p&gt;프로그래밍을 어떻게 공부해야 좋냐는 질문은 전산학을 전공하는 대학생부터 10년차 개발자까지 다들 마음 속에 품고있는 화두 같은 게 아닌가 싶습니다. 또 프로그래밍을 가르치는 사람 입장에서는 어떻게 가르쳐야할까가 중요한 고민이 될 겁니다.&lt;br&gt;
&lt;br&gt;
이 두 부류의 분들에게 도움이 되는 동영상 강의를 2015년도에 찍었습니다. 블로그에서는 처음 소개하게 되는 것 같습니다.&lt;br&gt;
&lt;br&gt;
우선 첫번째 강의는 &quot;&lt;a href=&quot;https://mindscale.kr/course/how-to-learn-prg&quot; target=&quot;_blank&quot;&gt;프로그래밍 어떻게 공부할 것인가&lt;/a&gt;&quot;입니다. 총 4시간 가량 되는 동영상 강의입니다. 대상은 프로그래밍을 효과적으로 공부하고 싶어하는 분들이며, 이미 프로그래머인 분들뿐만 아니라 향후 프로그래머가 되고 싶어하는 사람, 혹은 프로그래밍을 한 번 배워보고 싶어하는 타분야 종사자까지도 고려해서 만들었습니다. 하지만 사실 강의의 상당 부분은 프로그래밍과 관련이 없는 분들도 들으실 수 있습니다. 일례로 8강에서는 영어 공부법에 대한 이야기를 하기도 하고요.&lt;br&gt;
&lt;br&gt;
이 강의의 특징은 근거 기반(evidence based)이라는 점이 아닐까 합니다. 되도록 교육학, 심리학, 소프트웨어공학 등의 연구 결과를 반영해 강의를 만들었습니다. 원래 이런 쪽 이야기는 개인의 제한된 경험에 기반하거나 혹은 주관적 의견에 좌우되는 경우가 많은데 그런 위험을 피하실 수 있을 겁니다.&lt;br&gt;
&lt;br&gt;
현재 한 시간 분량의 강의를 무료로 공개해 두었습니다. (이제까지 무료로 2회차를 볼 수 있었는데 더 추가했습니다)&lt;br&gt;
&lt;br&gt;
두번째 강의는 첫번째 강의의 원칙들을 적용해서 동영상 강의를 만들어 봤습니다. 그래서 효과적으로 가르치는 예를 보여드리기 위해서 만든 시범 강의입니다. 전체 4시간반 정도 되는 강의입니다. 주제는 정규식(Regular Expression)입니다. 정규식은 텍스트에서 패턴 검색을 할 때 자주 쓰는 도구인데요, 프로그래머라면 다들 어느 정도는 접해보셨을 겁니다. 하지만 이 강의는 제목이 &quot;&lt;a href=&quot;https://mindscale.kr/course/regex&quot; target=&quot;_blank&quot;&gt;일상 정규식&lt;/a&gt;&quot;입니다. 즉, 프로그래머뿐 아니라 데이터, 텍스트를 다루는 분들이 일상적으로 정규식을 잘 쓰게 도와주는 걸 목표로 합니다. 그리고, 정규식과는 관련없이 어떻게 가르쳐야할까 고민하는 분들에게 좋은 예시가 되는 강의라고 생각합니다.&lt;br&gt;
&lt;br&gt;
이 강의의 특징 중 하나는 과정적, 생성적 접근을 했다는 점입니다. 노벨상을 수상한 머리 겔만(Murray Gell-Mann)의 유명한 일화가 있습니다. 어렸을 때부터 천재로 유명한 겔만은 19세에 MIT를 조기입학했는데요, 당시 물리학 수업을 듣던 친구 하나가 나중에 밝힌 일화입니다. 그 친구가 1주일 내내 고민해도 안풀리는 문제가 있어서 겔만의 기숙사 방을 두드렸다고 합니다. 겔만이 문을 열고 그 사이로 빼꼼히 문제지를 몇 초간 쳐다보더니 &quot;-1&quot;이라고 답하고는 문을 닫았다고 합니다. 그 몇 초 사이에 머리 속으로 문제를 푼 것이죠. 이 친구는 여기에 충격을 받고 MIT를 자퇴합니다. 그러고 나중에 알게 된 것이 겔만이 천재라서 아주 특이한 경우라는 것이었죠. 이런 해프닝이 벌어진 이유는 겔만이 답만 이야기를 해줬기 때문입니다. 그 과정은 빼먹고 말이죠. 그런데 많은 정규식 강의/교재가 그렇습니다. 이럴 때는 이런 정규식을 쓰면 된다는 말만 하지, 애초에 그 정규식을 생각해낸 사람이 머리 속에서 어떤 과정을 거쳤을지를 가르쳐주지 않습니다. 그래서 배워도 응용을 못하고 다 까먹는 것이지요. 그러나 본 강의에서는 정규식을 잘 쓰는 사람이 어떤 과정을 거쳐서 그런 기발한 정규식 패턴을 생각해내는지를 밝히고 있습니다. 이를 과정적 혹은 생성적이라고 부릅니다.&lt;br&gt;
&lt;br&gt;
이 강의도 대략 한 시간 분량의 강의를 무료로 공개해 두었습니다. (이제까지 무료로 2회차를 볼 수 있었는데 더 추가했습니다) 아마 이 동영상만 보셔도 이제까지 봐온 정규식 교재나 강의들과 뭐가 다른가 바로 느낄 수 있지 않을까 합니다.&lt;br&gt;
&lt;br&gt;
프로그래밍을 어떻게 배울까 어떻게 가르칠까 고민하시는 분들에게 지름길이 되기를 바랍니다.&lt;br&gt;
&lt;br&gt;
--김창준			  
		&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</summary>
    <title> 프로그래밍 어떻게 배우고 어떻게 가르칠까  </title>
    <updated>2018-03-16T13:47:23+09:00</updated>
    <dc:date>2018-03-16T13:47:23+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>gywndi</name>
    </author>
    <id>http://gywn.net/2018/03/pmm-intro/</id>
    <link href="http://gywn.net/2018/03/pmm-intro/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;&lt;p&gt;Overview 정말 오랜만에 글을 써봅니다. 은행이 오픈한지도 어언 8개월째를 훌쩍 접어들었네요. 여전히 MySQL 서버군에는 이렇다할 장애 없이, 무난(?)하게 하루하루를 지내고 있습니다.. (아.. 그렇다고 놀고만 있지는 않았어요!!) 사실 그동안의 경험과 삽질을 바탕으로, 필요성을 느꼈던 다양한 부분을 중앙 매니저에 최대한 녹여보았고, 그 집대성의 결과가 지금 뱅킹 MySQL시스템입니다. MHA 관리, 스키마 관리, 파티션 관리, 패스워드 관리, 백업/복구 관리..아.. […]&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>PMM 이야기 1편 – INTRO</title>
    <updated>2018-03-04T02:33:28+09:00</updated>
    <dc:date>2018-03-04T02:33:28+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>기선</name>
    </author>
    <id>http://whiteship.me/?p=14027</id>
    <link href="http://whiteship.me/?p=14027"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;&lt;p&gt;스프링 부트 2.0 정식 버전이 나왔다. 그리고 예전부터 하고 싶던 방송도 시작했다. 시작한 날부터 주말도 거르지 않고 매일 대략 1시간씩 방송을 했고 오늘은 아마도 15일차 레퍼런스 코딩 방송을 진행할 것 같다. 목표는 레퍼런스를 (거의) 다 보며 웬만큼 중요해 보이는 것들은 (거의) 전부 코딩해 보는 것이다. 일종의 갈증을 해소하는 방법 중 하나이고 어느 정도 효과가 있는 … &lt;a href=&quot;http://whiteship.me/?p=14027&quot; class=&quot;more-link&quot;&gt;Continue reading&lt;span class=&quot;screen-reader-text&quot;&gt; &quot;스프링 부트 2.0 레퍼런스 코딩 소회&quot;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>스프링 부트 2.0 레퍼런스 코딩 소회</title>
    <updated>2018-03-08T06:12:13+09:00</updated>
    <dc:date>2018-03-08T06:12:13+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>rein</name>
    </author>
    <id>https://rein.kr/blog/archives/4370</id>
    <link href="https://rein.kr/blog/archives/4370"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;지난 설에 양가 방문하고 나니 도저히 이대로는 못 버티겠다 싶어서, 3월 초에 배터리 교체를 받았다. 사용 중인 &lt;a href=&quot;https://www.apple.com/support/iphone6s-unexpectedshutdown/&quot; target=&quot;_blank&quot;&gt;아이폰 6S는 특정 시기 생산품에 대해서 무상 교체&lt;/a&gt;를 하는데, 그 대상이라 공짜로 교체 받긴 했다.&lt;/p&gt;
&lt;p&gt;가장 가까운 서비스 센터가 판교 일렉트로 마트 안에 있어서 휴일에 판교역에 갔다와야 했다. Orz.&lt;/p&gt;
&lt;p&gt;배터리 교체는 생각보다 얼마 안걸렸고 — 대략 20분 내외? — 잠시 대기 줄에서 기다린 시간이 한 15분 정도였던듯. 근데 이건 문열자 마자 뛰어가서 그렇고, 실제로는 이보다야 더 걸리겠지.&lt;/p&gt;
&lt;p&gt;교체하고나니 배터리가 좀 더 오래 가기는 하는데, 체감 상으로 더 컸던 부분은 트위터 실행 속도가 빨라졌다 정도? 배터리 충전량 줄면 성능 줄이는게 생각보다 더 컸던 듯 싶다.&lt;/p&gt;
&lt;p&gt;코코넛 배터리에도 이제 충전 잔량이 크게 나온다 신난다(?).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://rein.kr/blog/wp-content/uploads/2018/03/Screen-Shot-2018-03-17-at-09.27.39.png&quot; alt=&quot;Screen Shot 2018-03-17 at 09.27.39&quot; width=&quot;602&quot; height=&quot;975&quot; class=&quot;alignnone size-full wp-image-4386&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;feedflare&quot;&gt;
&lt;a href=&quot;http://feeds.feedburner.com/~ff/reinblog?a=_lagw96wx3s:NOAYrWbxOxA:yIl2AUoC8zA&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/reinblog?d=yIl2AUoC8zA&quot; border=&quot;0&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/reinblog?a=_lagw96wx3s:NOAYrWbxOxA:D7DqB2pKExk&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/reinblog?i=_lagw96wx3s:NOAYrWbxOxA:D7DqB2pKExk&quot; border=&quot;0&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/reinblog?a=_lagw96wx3s:NOAYrWbxOxA:YwkR-u9nhCs&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/reinblog?d=YwkR-u9nhCs&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;img src=&quot;http://feeds.feedburner.com/~r/reinblog/~4/_lagw96wx3s&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot;&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>iPhone 배터리 교체</title>
    <updated>2018-03-17T09:35:59+09:00</updated>
    <dc:date>2018-03-17T09:35:59+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>rein</name>
    </author>
    <id>https://rein.kr/blog/archives/4368</id>
    <link href="https://rein.kr/blog/archives/4368"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;&lt;em&gt;로버트 해리스&lt;/em&gt; 의 장편 소설. 흔히 &lt;em&gt;팩션&lt;/em&gt; 이라고 말하는 장르의 소설이다. 내가 본 상당 수의 팩션은 로버트 해리스 작인듯 – 이니그마, 당신들의 조국, 고스트 라이터, 아크엔젤, 어느 물리학자의 비행 등등. 덤으로 키케로 3부작 (이 이름이 맞나?) 도 있고.&lt;/p&gt;
&lt;p&gt;제목에서 바로 알 수 있듯이, “교황 선종” – “새 교황 선출” 까지의 짧은 기간을 배경으로 한 소설이다.&lt;br&gt;
직전 몇 대 교황 실명이 나오긴하지만 소설 자체는 정말로 픽션. 배경과 이전 교황이름만 현실에서 가져왔다.&lt;/p&gt;
&lt;p&gt;콘클라베 관해서는 뉴스 단신에 나온 정도만 알고 있었는데 — 투표 결과 선출하지 못하면 검은 연기, 선출하면 흰 연기가 난다 정도? — 여러모로 궁금증을 충족시켜주는 스토리라인이었다.&lt;br&gt;
읽다보면, 내가 왜 종교가 없는지도 되새김질 좀 하고, &lt;em&gt;현실&lt;/em&gt; 의 천주교회가 끌고가고 있는 추문들도 한 번 들춰보고. 그리고 로버트 해리스 소설의 결말들을 그다지 맘에들어하지 않는데 – 이니그마 정도만 맘에 들었음 – 이건 꽤 괜찮았다.&lt;/p&gt;
&lt;p&gt;다만 이거 전자책으로 나오는 줄 모르고 종이책 나오자마자 사서 책장 공간이 처치 곤란 Orz.&lt;/p&gt;
&lt;div class=&quot;feedflare&quot;&gt;
&lt;a href=&quot;http://feeds.feedburner.com/~ff/reinblog?a=g0ofJyHTZbw:mNBAYPvXIEE:yIl2AUoC8zA&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/reinblog?d=yIl2AUoC8zA&quot; border=&quot;0&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/reinblog?a=g0ofJyHTZbw:mNBAYPvXIEE:D7DqB2pKExk&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/reinblog?i=g0ofJyHTZbw:mNBAYPvXIEE:D7DqB2pKExk&quot; border=&quot;0&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.feedburner.com/~ff/reinblog?a=g0ofJyHTZbw:mNBAYPvXIEE:YwkR-u9nhCs&quot;&gt;&lt;img src=&quot;http://feeds.feedburner.com/~ff/reinblog?d=YwkR-u9nhCs&quot; border=&quot;0&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;img src=&quot;http://feeds.feedburner.com/~r/reinblog/~4/g0ofJyHTZbw&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot;&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>리뷰: 콘클라베</title>
    <updated>2018-03-15T22:06:34+09:00</updated>
    <dc:date>2018-03-15T22:06:34+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>outsideris@gmail.com (Outsider)</name>
    </author>
    <id>https://blog.outsider.ne.kr/1362</id>
    <link href="https://blog.outsider.ne.kr/1362"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;h1&gt;웹개발 관련&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://medium.com/@DidierFranc/replacing-redux-with-the-new-react-context-api-8f5d01a00e8c&quot;&gt;Replacing redux with the new React context API&lt;/a&gt;&lt;/strong&gt; : React 16.3에 도입된 context API로 Flux 패턴을 간단히 구현하는 방법을 설명한 글이다. React에 대해서 자세히 모르지만, Context API가 상태관리 방법에 많은 영향을 줄 것으로 보인다. 이 글에서도 본인이 만든 &lt;a href=&quot;https://github.com/didierfranc/react-stateful&quot;&gt;react-stateful&lt;/a&gt;를 소개하고 있는데 소스를 참고해 보는 것도 좋을 것 같다.(영어)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://medium.com/@kennethrohde/progressive-web-apps-coming-to-all-chrome-platforms-80e31272e2a8&quot;&gt;Progressive Web Apps coming to all Chrome platforms&lt;/a&gt;&lt;/strong&gt; : 모바일 중심이었던 PWA을 데스크톱에서도 지원하려고 진행되고 있는 내용을 정리한 글이다. 최신 크롬에서 flag를 설정하면 데스크톱에서도 웹 애플리케이션은 PWA로 설치해서 데스크톱 앱처럼 사용할 수 있다. 현재 지원하는 부분과 상황을 정리한 글이다.(영어)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://hackernoon.com/redesigning-redux-b2baee8b8a38&quot;&gt;Redesigning Redux&lt;/a&gt;&lt;/strong&gt; : Redux가 좋지만, 너무 초기에 인기를 끌어서 Dan Abramov가 리팩토링을 하기가 어려워서 지금의 복잡성을 가지게 되었다고 얘기하며 Redux에서 더 간단한 구조로 바꿀 수 있는 부분을 설명한 글이다. 이를 바탕으로 자신이 만든 &lt;a href=&quot;https://github.com/rematch/rematch&quot;&gt;Rematch&lt;/a&gt; 라이브러리를 소개하고 있기는 하지만 읽어볼 만한 글이다.(영어)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://designmodo.com/webfonts-woff-2/&quot;&gt;WebFonts Working Group Announces WOFF 2.0 File Format&lt;/a&gt;&lt;/strong&gt; : WebFonts 워킹 그룹에서 WOFF 1.0보다 압축, 압축 해제가 개선된 WOFF 2.0 포맷을 발표했다.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;http://ahnheejong.name/articles/why-i-prefer-react-over-vuejs/&quot;&gt;React를 Vue.js보다 선호하는 이유&lt;/a&gt;&lt;/strong&gt; : React가 Vue.js 보다 좋은 이유를 &quot;타입스크립트의 지원&quot;, &quot;단순한 컴포넌트 정의의 용의함&quot;, &quot;더 빠르고 대담한 개선&quot;으로 꼽으며 각 항목을 설명한 글이다. React가 대세가 되어 최근에는 Vue.js가 좋은 글을 많이 보다가 반대의 글을 보니까 또 새롭다.(한국어)&lt;br&gt;
&lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;그 밖의 프로그래밍 관련&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;http://woowabros.github.io/study/2018/03/05/sdp-sap.html&quot;&gt;안정된 의존관계 원칙과 안정된 추상화 원칙에 대하여&lt;/a&gt;&lt;/strong&gt; : 개발할 때 인터페이스를 만들지 않을지를 코드의 안정성과 추상성으로 판단하는 접근 방법을 설명한 글이다. 엉클 밥의 &quot;패키지 설계의 원칙&quot;에 기반을 둬서 안정성과 추상성이 왜 인터페이스와 관련 있는지를 설명하고 두 성질을 어떻게 판단할지를 수식으로 설명하면서 구체적인 예시를 통해 Controller, Service, Repository가 이 접근방법에 따라 인터페이스 구현 여부를 결정하는 방법을 설명하다. 처음 읽을 때는 좀 헷갈렸는지 인터페이스에 대해 고민한다면 꼭 읽어봐야 할만한 글이고 설계할 때 수식을 적용할 정도로 고민한 부분이 놀랍기도 하다.(한국어)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://medium.freecodecamp.org/developing-an-ethereum-decentralized-voting-application-a99de24992d9&quot;&gt;A guide to developing an Ethereum decentralized voting application&lt;/a&gt;&lt;/strong&gt; : 이더리움의 DApp으로 투표 애플리케이션을 만들어 보는 글이다. Solidity로 스마트 컨트랙트를 만들고 Truffle을 이용해서 테스트하면서 투표할 수 있는 웹 애플리케이션을 만들어 보는데 막연히 DApp에 대해서 듣기는 했는데 이글을 보니 DApp이 어떻게 돌아가고 어떤 식으로 만들 수 있는지 어느 정도 알 수 있게 되었다.(영어)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://docs.google.com/document/d/131vjr4DH6JFnb-blm_uRdaC0_Nv3OUwjEY5qVCxCup4/preview#heading=h.mjo1bish3xni&quot;&gt;WebAssembly architecture for Go&lt;/a&gt;&lt;/strong&gt; : Go 1.11 버전을 목표로 하는 Go 컴파일러에 도입할 WebAssembly의 아키텍처를 설명한 글이다. WebAssembly의 특징을 설명하고 Go에서 어떻게 처리할 예정인지를 설명하고 있다.(영어)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://github.com/EOSIO/Documentation/blob/master/ko-KR/TechnicalWhitePaper.md&quot;&gt;EOS.IO 기술 백서&lt;/a&gt;&lt;/strong&gt; : &lt;a href=&quot;https://eos.io/&quot;&gt;EOS&lt;/a&gt; 기술백서의 한국어 번역본이다.(한국어)&lt;br&gt;
&lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;볼만한 링크&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://brunch.co.kr/@svillustrated/13&quot;&gt;12. 사고를 쳐도 혼나지 않는 회사&lt;/a&gt;&lt;/strong&gt; : 포스트모템에 대한 글이다. 포스트모템을 좋아하지만 최근 SRE 책을 읽고 더 체계적으로 포스트모템을 할 필요가 있겠다 싶었는데 이 글에서도 공감하기 쉬운 실생활의 포스트모템부터 구글의 예시까지 나와 있어서 곱씹어 볼 만하다.(한국어)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://insights.stackoverflow.com/survey/2018&quot;&gt;Stack Overflow Developer Survey 2018 Results&lt;/a&gt;&lt;/strong&gt; : Stack Overflow가 사용자를 대상으로 진행할 설문의 결과를 공개했다. 이런 식으로 매년 공개하는데 Stack Overflow의 사용자들이 지역이나 성별, 선호 기술, 연차 등 아주 자세한 설문 결과의 통계를 볼 수 있다.(영어)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://stratechery.com/2018/lessons-from-spotify/&quot;&gt;LESSONS FROM SPOTIFY&lt;/a&gt;&lt;/strong&gt; : 투자받은 금액을 기반으로 사용자를 늘려서 수익을 높이는 요즘의 비즈니스 모델에서 Spotify는 사용자 증가에 맞춰서 수익을 늘렸지만 로얄티 때문에 이윤을 높이지 못해서 문제가 되는 부분을 정리한 글이다. Spotify가 엄청난 성장을 하고 있음에도 지금 실제로 수익은 만들지 못하고 있고 이 부분에서 Spotify가 할 수 있는 부분까지 정리되어 있어서 읽어볼 만하다.(영어)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;http://hl1itj.tistory.com/170&quot;&gt;오픈 소스를 대하는 올바른 자세&lt;/a&gt;&lt;/strong&gt; : 최근 올챙이와 카카오 사이에 벌어진 이슈와 관련하지만, 이 사건 자체를 다룬 건 아니고 오픈 소스 커뮤니티와 기업과의 관계에 대한 생각을 정리한 글이다. 오픈소스 커뮤니티가 만든 소프트웨어를 사용하면서 기업이 커뮤니티에 기여하는 도덕적 의무를 강조하고 있다.(한국어)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;http://minieetea.com/2018/03/archives/5264&quot;&gt;기획자의 페르소나&lt;/a&gt;&lt;/strong&gt; : 개인적으로 국내에서 기획자는 사실 기획보다는 PM 및 프로젝트를 총괄하는 과도한 역할을 담당한다고 보는 편인데 이 글에서 기획자가 실제로 하는 수많은 일이 잘 정리되어 있다. 기획자에 대한 답이라기보다는 이런 상황에 어떤 기획자가 되어야 하는지 고민을 던지는 글이다.(한국어)&lt;br&gt;
&lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;IT 업계 뉴스&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://community.letsencrypt.org/t/acme-v2-and-wildcard-certificate-support-is-live/55579&quot;&gt;ACME v2 and Wildcard Certificate Support is Live&lt;/a&gt;&lt;/strong&gt; : Let's Encrypt에서 드디어 와일드카드 인증서를 사용할 수 있게 되었다.(영어)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;http://v.media.daum.net/v/20180315082128639&quot;&gt;'여자 잡스'로 불리던 홈즈, 결국 사기꾼 전락&lt;/a&gt;&lt;/strong&gt; : 한 방울의 피로 200여 개의 질병을 진단할 수 있는 '에디슨'을 개발했다면 주목받은 테라노스의 엘리자베스 홈즈가 사기 혐의로 기소되어 50만 달러의 벌금을 내고 10년간 상장 기업의 입원으로 활동하지 않는 데 합의했다.(한국어)&lt;br&gt;
&lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;프로젝트&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://github.com/apple/swift-nio&quot;&gt;SwiftNIO&lt;/a&gt;&lt;/strong&gt; : Apple이 만든 이벤트 기반 네트워크 애플리케이션 프레임워크.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://github.com/atom/xray&quot;&gt;xray&lt;/a&gt;&lt;/strong&gt; : Atom 팀에서 Electron 위에서 Rust로 새로 에디터를 만드는 프로젝트.&lt;br&gt;
&lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;버전 업데이트&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;http://grafana.org/&quot;&gt;Grafana&lt;/a&gt; v5.0&lt;/strong&gt; : 매트릭 대쉬보드, &lt;a href=&quot;https://grafana.com/blog/2018/03/01/grafana-v5.0-released/&quot;&gt;릴리스 공지&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://www.tensorflow.org/&quot;&gt;TensorFlow&lt;/a&gt; v1.6.0&lt;/strong&gt; : 기계학습, 딥러닝 라이브러리, &lt;a href=&quot;https://github.com/tensorflow/tensorflow/releases/tag/v1.6.0&quot;&gt;릴리스 공지&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://www.gnome.org/&quot;&gt;GNOME&lt;/a&gt; v3.28&lt;/strong&gt; : 데스크탑 환경, &lt;a href=&quot;https://www.gnome.org/news/2018/03/gnome-3-28-released/&quot;&gt;릴리스 공지&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href=&quot;https://git-lfs.github.com/&quot;&gt;Git LFS&lt;/a&gt; v2.4.0&lt;/strong&gt; : Git의 대용량 파일 시스템, &lt;a href=&quot;https://blog.github.com/2018-03-02-git-lfs-2.4.0-released/&quot;&gt;릴리스 공지&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.outsider.ne.kr/1362?commentInput=true#entry1362WriteComment&quot;&gt;댓글 쓰기&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;http://feeds.feedburner.com/~r/rss_outsider_dev/~4/NI-zJOAr5R0&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot;&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>기술 뉴스 #98 : 18-03-15</title>
    <updated>2018-03-15T22:41:15+09:00</updated>
    <dc:date>2018-03-15T22:41:15+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>outsideris@gmail.com (Outsider)</name>
    </author>
    <id>https://blog.outsider.ne.kr/1361</id>
    <link href="https://blog.outsider.ne.kr/1361"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;작년 말에 트위터에는 올렸지만, 작년 12월 중순에 퇴사했다. 지금까지는 입사를 정해놓고 퇴사를 했지만, 이번에는 어른들의 사정으로 퇴사를 먼저 했다. &lt;a href=&quot;https://blog.outsider.ne.kr/1233&quot;&gt;2016년 여름에 입사했으니&lt;/a&gt; 1년 4개월 정도를 다니고 퇴사한 셈이다. 당장 수익이 없으면 큰 문제가 있는 것도 아니었고 연말에는 채용도 더디게 진행되는 관계로 맘 편히 좀 쉬면서 다음에 어떻게 할지를 생각해 보기로 했다.&lt;/p&gt;

&lt;p&gt;전 회사에서 &lt;a href=&quot;https://blog.outsider.ne.kr/1359&quot;&gt;원격 근무도 하면서&lt;/a&gt; 개발문화나 협업 등 내가 이상적으로 생각하는 개발팀에 가까워지면서 만족하고 있었기에(완성했다기보다는 기반을 다졌다는 게 정확하겠다.) 당시에는 딱히 다음 진로나 이직을 고민하고 있지 않았다. 퇴사했으니 겸사겸사 여유를 가지고 고민하는 게 나을 것 같았고 어느새 10년 차(11년 차인가?) 정도 되다 보니 앞으로의 진로에 대해서 고민이 많이 생겼다. 앞으로 한참 동안 더 개발을 해야 하는데 이것저것 공부하기는 해도 그동안 하던 대로만 해온 느낌이 있어서 앞으로 개발자로서 더 오래 먹고 살려면 이때쯤 엔지니어링적으로 커리어를 더 잘 갖춰야겠다는 생각이었다.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;해외 기업&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.outsider.ne.kr/1233&quot;&gt;이전 글&lt;/a&gt;에도 썼지만, 해외 기업에 지속해서 관심이 있었다. 전에 글에도 영어 공부 안 했다고 반성한다고 했는데 이번에도 역시 평소에 공부 안 하다가 다시 한번 좌절을 맛봤다. 이번에는 진짜 영어공부도 하면서 장기 목표를 가지고 준비해야겠다. 내가 해외 기업에 관심 갖는 건 해외에 나가 살고 싶은 게 아니라 그들의 개발문화와 분위기가 궁금해서이다. 그렇다 보니 목표하는 회사들도 꽤 수준이 높은 회사이기도 하고 해외로 갈 생각은 없다 보니 국내에서 원격으로 근무할 수 있는 회사를 주로 보게 되었다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://weworkremotely.com/&quot;&gt;We work Remotely&lt;/a&gt;를 주로 보면서 관심 있는 회사들에 일단 이력서를 넣었다. 사실 합격할 수 있을 거라고 큰 기대는 안 하고 있었고 취업은 해야 하니 도전해보면서 내가 어느 정도까지 해볼 수 있는지 한번 점검해본다는 의미가 더 컸다. 외국계 회사는 채용프로세스가 길어서 이직은 어차피 천천히 결정할 예정이므로 외국계 먼저 진행해 보면서 이직 고민을 하면 되겠다는 게 생각이었다.&lt;/p&gt;

&lt;p&gt;5-6개 회사에 이력서를 냈는데 대부분은 서류에 떨어지고 &quot;이 회사에 개발팀이 있었어?&quot; 싶었던 S사는 온라인 코딩 테스트에서 떨어지고 C사는 화상 면접까진 했는데 역시나 영어가 문제가 되면서 떨어졌다. 해보고 나니 크게 일단 영어로 원활하게 대화할 수 없다는 문제와 코딩테스트를 볼 때 내가 가진 기술이 너무 JavaScript 위주라는 부분이 문제로 느껴졌다. 나처럼 다양한 배경을 특별히 원하거나 Node.js 개발자가 필요한 게 아니라면 영어를 통과하더라도 기술에서 떨어질 수도 있겠다는 생각이 들었다. 그리고 무엇보다 영문 이력서를 매력적으로 잘 쓰지 못하는 것 같다. 이 부분은 유료 서비스를 쓰던 연습이 좀 필요할 것 같다. 냉정히 생각해 보면 국문 이력서도 이력서를 잘 쓴다기보다 이 블로그나 GitHub 등으로 사전 정보를 제공하는 셈이라 원래도 이력서를 잘 쓰는 편은 아닌 것 같다. 암튼 그렇게 해외 기업은 바로 탈락을 했다.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;취업을 위한 고민들&lt;/h1&gt;

&lt;p&gt;연말이 지나면서 여러 회사와 개발팀을 만나고 다녔다. 전에는 회사 다니면서 이직을 하니까 지인들만 아는 상태로 조용히 진행했는데 이번에는 트위터에 퇴사를 알리고 시작했기 때문에 감사하게도 날 좋게 봐준 여러 회사가 한번 만나자고 해서 많이 만나고 다녔다. 이직한 지 1년 반도 안 되었는데 그때 관심 있는 회사를 많이 만나보고 결정했던 거라 이번에 이직하면서 가장 큰 문제는 가고 싶은 회사가 없다는 거였다. &lt;strong&gt;내가 합격하냐 아니냐의 문제가 아니라 가고 싶다 하는 회사가 없었다.&lt;/strong&gt; 그러다 보니 내가 전에 몰랐던 회사를 찾아야 했고 그러다 보니 연락 오면 일단 다 만났다. 입사 지원을 한 건 아니고 만나서 내 상황이라 내가 할 수 있는 일들을 설명하고 그 회사가 원하는 역할이나 나와 맞을 수 있는 부분을 얘기 나누었다. 내가 입사 지원을 하냐 마냐를 떠나서 재미있는 시간이었고 내가 가서 할 수 있는 역할이 없을 것 같아도 얘기들은 건 재미있었다. 내가 개발자이다 보니 만나서 얘기하는 사람도 개발자인 게 어떻게 개발하는지 어떤 이슈가 있는지 무슨 고민을 하는지를 얘기할 수 있어서 더 재미있었다.&lt;/p&gt;

&lt;p&gt;여러 회사를 만나나 보니 어느 정도 내가 원하는 것이 정리되는 것 같았다. 가장 큰 관심사는 &quot;재미있냐&quot;이지만 여러 회사와 개발팀이랑 얘기하면서 생각을 정리할 수 있게 되었다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;기술적으로 도전적인 일을 하고 싶었다.&lt;/strong&gt; 앞에서도 얘기했듯이 이 정도 연차에서 기술적인 경험을 잘 쌓아서 더 오래 개발할 수 있게 해야겠다는 건 확고했다. 난 관리자가 될 생각은 거의 없지만 최근에 시니어 개발자의 역할에 대해서는 많이 생각해 보게 되었다. 하지만 그건 그거로 내가 관심 있는 건 엔지니어링이라서 아직은 이쪽에서 더 많이 해야 했다. 도전적인 일이라면 여러 가지가 있는데 완전히 새로운 분야일 수도 있고 내가 하던 일에서 더 깊이 있거나 스케일 큰일이 될 것이다. 새로운 분야라면 내가 앞으로 기대되는 분야에 도전해 보는 것인데 말 그대로 새로운 분야라서 내가 재미있을지를 판단하기 어려웠다. 기존에 하던 일이라면 주로 웹인데 API 서버나 웹서비스를 많이 만들어봤지만 트래픽을 대규모로 맞아본 적은 없었다. 백엔드에서는 트래픽이 커지면 간단한 부분도 다 도전적이 되므로 재밌겠다는 생각이 들었다.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;기술 중심 회사였으면 좋겠다.&lt;/strong&gt; 물론 개발자를 뽑는 IT 회사는 다 기술회사라고 할 수도 있지만 내 기준에서 기술 자체가 회사의 핵심인지 회사의 핵심을 가능케 하려고 기술을 사용하는지 다르다고 본다. 그런 면에서 국내에는 기술 중심의 회사가 많지 않다고 생각한다. 이번에는 기술 중심 회사로 가고 싶었다. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;개발팀의 문화도 신경 쓰는 부분이었다.&lt;/strong&gt; 이건 한마디로 정의하기도 어렵지만, 개발팀이 더 좋은 개발팀이 되기 위해서 노력하는 개발팀의 문화는 나한테는 중요했기에 이 부분도 맞춰보려고 얘기를 많이 나누었다. 완성된 곳은 없으므로 사실 의도만 괜찮으면 상관없었다. 그래서 주로 얘기를 나누던 것은 현재 어떻게 노력하고 있는지 뭘 하고 싶은지 지금까지는 왜 안되었는지를 많이 얘기한 것 같다. 그리고 들어가서 내가 이런 부분에 기여할 수 있는 부분이 어느 정도인지도 중요했다.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;기술 선택의 자유도.&lt;/strong&gt; 트랜디한 기술이 꼭 다 좋은 건 아니지만 난 트랜디한 기술을 좋아하고 더 좋은 방법이 있으면 갈아치우는 걸 좋아해서(혼자만 그런 건 아니고 당연히 팀원들과 합의한 후에...) 이런 부분에서 자유도가 얼마나 있는지가 중요했다. 여기서 자유도라는 건 내가(혹은 다른 사람이) 제안을 하고 그 내용이 합리적이라면 팀이 움직일 수 있는 정도의 자유도이다. 그런 면에서 일차적으로는 대기업이 뒷순위로 많이 밀렸다. 대기업은 부분별로 담당 부서가 있어서 내 맘대로 하지 못하는 영역이 너무 많았다. 이건 대기업으로서는 당연한 부분이지만 나는 좀 답답하게 느끼는 편이었고 내가 가진 장점을 다 발휘 못 한다는 느낌이 있다. 그런 면에서 AWS나 GCP같은 퍼블릭 클라우드를 쓰지 않는 건 나한테는 큰 마이너스 요소가 되었다.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;원격 근무.&lt;/strong&gt; 원격 근무의 지지자가 되었기에 원격 근무를 다음 회사에서도 꼭 다시 하고 싶었지만 국내에서 원격 근무를 기본 조건으로 넣으면 사실 갈 회사가 엄청 줄어들어서 대부분 생각을 물어보는 정도였다.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;집에서 가까웠으면 좋겠다.&lt;/strong&gt; 항상 회사를 꽤 멀리만 가다가 강남권 회사로 다니기 시작한 뒤로는 개인시간이 많아져서 꽤 편했다. 그전에는 출퇴큰에 그렇게 시간을 많이 빼앗긴다는 생각을 하지 못했지만... 그래서 이번에서 일단 가까운 곳을 먼저 찾기 시작했다. 필수조건은 아니지만 가능하면 멀지 않은 곳으로 가고 싶었다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이렇게 정리되어도 어려운 부분은 많았다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;업무를 구체적으로 얘기하다 보면 내 관심 분야가 너무 많다는 느낌을 확실히 받았다. 그 부분이 나를 잘 써먹을 수 있는 부분이라고는 생각하지만 보통 뭘 하고 싶냐고 묻는데 여기에 내 대답은 보통 백엔드 혹은 특정 부분 개발하면서 인프라도 어느 정도 개입하고 싶고 팀 문화도 개선하고 싶고 자동화도 하고 싶고 사업 쪽도 가까이서 보고 싶고... 뭐 이런 식인데 보통 회사가 이렇게 사람을 구하진 않다 보니 얘기가 잘 진행이 안 되었다. 보통은 내가 잘할 수 있는 부분이라고 생각하는 걸 다 얘기하고 회사에서 생각하는 내 역할은 무엇인지를 다시 물어보는 편이었다. 그리고 아주 작은 규모 아니면 다른 영역까지 협업할 수 있는 조직은 많지 않기도 했다.&lt;/li&gt;
&lt;li&gt;Node.js가 사용하는 조직은 그렇게 많지 않았다. 아무래도 내가 JavaScript를 제일 많이 사용했다 보니 JavaScript를 써먹을 수 있는 곳이 가장 좋기는 한데 내가 다른데 관심 가진 사이 React의 세상이 되면서 프론트엔드는 내가 전문영역으로 넣기에는 너무 커져 버렸다. React 혹은 그와 비슷한 프레임워크로 개발하는 요즘 프론트엔드는 아예 그쪽으로 갈아타면 할 수는 있겠지만 다른 쪽도 하면서 같이 하기에는 커졌다. 그런 프론트엔드 역할을 제외하면 Node.js밖에 없는데 Node.js를 사용하는 조직은 꽤 적었다. 그래서 Node.js로 이직이 쉽지 않구나 하는 생각도 들었다.&lt;/li&gt;
&lt;li&gt;연차가 꽤 높다는 느낌이 많이 들었다. 이번에 회사를 많이 만나면서 시니어 개발자가 많이 부족하다는 절감했는데 작은 조직을 많이 만나다 보니 내 연차가 약간 부담이 되었다. 일단 날 보자고 해서 만나거니 상대 회사는 부담이라고 생각 안 할 수도 있지만 스타트업은 개발팀의 평균 나이가 적은 경우가 많아서 많이 차이 나게 되면 나로서는 부담이 되었다. 그렇다고 내가 팀장이나 관리자로 가려는 것도 아니라서... 팀장이나 관리자가 꼭 나이가 많아야 한다거나 나이 어린 사람 밑에서 일할 수 없다는 건 아닌데 다른 팀원과 달리 나만 나이 차이가 꽤 나는 건 커뮤니케이션이나 이런 부분에서 약간은 우려되는 부분이 있다고 생각한다.(&quot;내가 꼰대인가&quot;하는 생각을 하루에도 몇 번씩 하게 될지도...)&lt;br&gt;
&lt;br&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;BlockchainOS&lt;/h1&gt;

&lt;p&gt;회사는 많이 만났지만 실제로 이력서를 내고 공식적으로 지원한 곳은 그렇게 많지 않았는데 여러 가지를 고민하다가 &lt;a href=&quot;https://boscoin.io/&quot;&gt;BlockchainOS&lt;/a&gt;로 결정했다. BlockchainOS는 이번 이직 과정에서 꽤 나중에 만나서 진행하게 되었는데 다행히 붙어서 입사하게 되었는데 다른 회사들이 여러 번 만나고 오래 고민했던 것에 비교해서 너무 단기간에 정해서 걱정이 좀 되기도 했다. 앞에서 도전적인 일을 하고 싶다고 했는데 새로운 분야를 생각해 볼 때 딥러닝과 블록체인 정도가 생각났었다. 하지만 둘 다 내가 해본 영역이 아니고 아는 사람도 없어서 진행은 안 되고 있었는데 결과적으로는 블록체인으로 오게 되었다.&lt;/p&gt;

&lt;p&gt;코인 투자에 관심이 별로 없고 거래소에 대해서는 부정적인 의견도 있지만, Blockchain이라는 기술 자체는 결국 살아남을 것이라고 보고 있었다. 여기서는 BOScoin이라는 코인을 만드는데 Blockchain 기술을 직접 개발하는 회사라서 꽤 도전적이고 생각할수록 재미있겠다는 생각이 들었다. Blockchain이 아직 초기인데 너무 주목을 받아서 사기인가 싶은 곳도 많은 게 사실이지만 여긴 그렇진 않은 것 같았고 아직 이 기술을 어떻게 활용할지 제대로 아는 곳은 거의 없고 이제 앞으로 해낸 회사는 잘 될 것이고 못해낸 곳은 거기까지라고 생각한다. 지금 이 타이밍에 블록체인이라는 기술을 깊게 봐두면 앞으로 이 기술이 잘 되었을 때 해볼 수 있는 것도 많겠다고 생각이 들었다.&lt;/p&gt;

&lt;p&gt;나도 블록체인 개발을 봐야 하지만 내 역할은 (회사에선 DevOps라고 부르지만) SRE(Site Reliability Engineer)이다. 지난 회사에서 인프라스트럭처쪽을 많이 하면서 흥미가 생겨서 이번에 여러 회사와 얘기하면서도 내가 인프라를 계속하고 싶어한다는 걸 알게 되었다. &lt;a href=&quot;https://blog.outsider.ne.kr/1358&quot;&gt;사이트 신뢰성 엔지니어링이라는 책&lt;/a&gt;을 보면서 진지하게 이쪽을 더 해볼까 하는 생각도 했는데 진짜로 하게 되었다. 국내에 어차피 블록체인 쪽을 해본 사람이 거의 없지만 내가 해오던 분야가 아니라서 잘할 수 있을지 확신은 없는데 SRE하면서 블록체인 개발도 같이할 수 있고 내 기술 스택도 완전히 달라지지 않는 거라서 딱 좋다고 생각하고 있다.&lt;/p&gt;

&lt;p&gt;아직 1주일 근무해서 아는 게 하나도 없지만, 은근 궁금한 게 많아서 기대감이 커지고 있다. 매일 회의 때마다 모르는 내용이 하도 많아서 공부할 내용에 압도되긴 하지만 개발이 언제 안 그런 적이 있긴 했던가... 블록체인 자체도 흥미롭고 블록체인의 분산 서버에서 인프라 운영은 어떻게 접근해야 할지도 나에게 미지의 영역이라 당분간은 공부만 원 없이 하게 될 것 같다.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;쉬는 동안 좋게 봐주시고 연락해주신 분들께 감사의 말씀 드립니다. 제가 다른 쪽으로 결정했을 때 따로 다 연락을 드리지 못하고 이렇게 블로그에서 말씀드려서 죄송합니다.&lt;/h3&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.outsider.ne.kr/1361?commentInput=true#entry1361WriteComment&quot;&gt;댓글 쓰기&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;http://feeds.feedburner.com/~r/rss_outsider_dev/~4/yBEuyV1p8JY&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot;&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>새로운 회사, 새로운 역할, 새로운 분야</title>
    <updated>2018-03-12T03:12:25+09:00</updated>
    <dc:date>2018-03-12T03:12:25+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>outsideris@gmail.com (Outsider)</name>
    </author>
    <id>https://blog.outsider.ne.kr/1360</id>
    <link href="https://blog.outsider.ne.kr/1360"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;올 초에 세운 목표 중에 오픈소스에 더 많이 참여하기가 있었다. 이전에도 어느 정도 하긴 했지만 사이드 프로젝트 외에 다른 오픈소스 프로젝트에 Pull Request도 많이 보내도 더욱 적극적으로 참여하기로 마음을 먹었다. 그렇게 세운 &lt;strong&gt;목표 중 하나가 오픈소스 프로젝트에 메인테이너로 들어가는 것&lt;/strong&gt;이었다. 개발하다가 발견한 내용에 대해서 Pull Reqeust를 보내서 종종 참여하기는 하지만 특정 오픈소스에 개발에 참여한다고 할 정도로 깊게 들어가 보진 않았다. 정확히는 해봐야지 하다가 매번 못하고 있었다.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;mocha.js의 멤버로 합류하게 되다&lt;/h1&gt;

&lt;p&gt;아침에 출근하면서 트위터를 열자 다음과 같은 멘션이 와있었다.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;
&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/Outsideris?ref_src=twsrc%5Etfw&quot;&gt;@outsideris&lt;/a&gt; thanks for your PRs!  I've invited you to the mochajs org on GitHub if you are interested in helping maintain Mocha&lt;/p&gt;— Christopher Hiller (@b0neskull) &lt;a href=&quot;https://twitter.com/b0neskull/status/970786447815929856?ref_src=twsrc%5Etfw&quot;&gt;March 5, 2018&lt;/a&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;영어로 트윗을 나눌 사람이 많지 않아서 그냥 스팸인가 하고 보다가 내용확인이 되자 잠이 확 깨버렸다. 저 &lt;a href=&quot;https://github.com/boneskull&quot;&gt;@boneskull&lt;/a&gt;는 현재 &lt;a href=&quot;https://mochajs.org/&quot;&gt;mocha.js&lt;/a&gt;를 리드하고 있는 개발자인데 놀래서 메일을 열어보니 정말 GitHub의 초대 메일이 와 있었다.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;https://blog.outsider.ne.kr/attach/1/6384833009.gif&quot; width=&quot;700&quot; height=&quot;395&quot; alt=&quot;GitHub에서 온 초대 메일&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;내가 거부할 이유가 무엇이 있을까 당연히 바로 Join을 누르고 들어가고 &lt;a href=&quot;https://github.com/mochajs&quot;&gt;Mochajs org&lt;/a&gt;의 일원이 되고 모든 저장소의 푸시 권한을 갖게 되었다.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;https://blog.outsider.ne.kr/attach/1/7848744967.gif&quot; width=&quot;537&quot; height=&quot;299&quot; alt=&quot;Mocha org의 멤버 목록&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;아직 메인테이너라고 부르기에는 아직 한 일이 없지만, GitHub 시스템에서는 mocha.js의 메인테이너의 권한을 갖게 되었다.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;https://blog.outsider.ne.kr/attach/1/4096354043.gif&quot; width=&quot;750&quot; height=&quot;113&quot; alt=&quot;GitHub에서 member로 표시된다&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;스크린숏이 많게 느껴지는 건 기분 좋아서 기록용으로 많이 찍어서이다. ^^ 아는 사람과 만든 게 아닌 다른 org의 멤버로 합류한 건 [2014년](AngularUI 프로젝트의 멤버가 되다...) 이후 처음인데 저 때는 내 개인 프로젝트가 org로 들어간 거였고 이번은 큰 프로젝트에 들어간 거라 느 느낌이 완전히 다르다. 목표는 원래 닿을 듯 말 듯 한 정도가 좋은데 올해 목표가 벌써 해결되어서 조정해야겠다.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;mocha의 멤버가 되기까지&lt;/h1&gt;

&lt;p&gt;작년 말부터 오픈소스 프로젝트에 더 참여해 보려고 관심 있는 프로젝트는 watching을 걸어서 알림을 다 받아보고 있었다. 모든 이슈를 읽어보는 건 아니지만 이렇게 알림을 받으면 프로젝트에서 이슈나 PR이 어느 정도 처리되고 있는지 어느 정도 알 수 있다. 오픈소스 프로젝트에 들어가는 건 꽤 어려운 부분이 알만한 프로젝트는 이미 상당히 성숙했기 때문에 코드가 복잡해서 참여하기가 쉽지 않고 작은 프로젝트는 알기가 어렵다.&lt;/p&gt;

&lt;p&gt;어차피 어려우니까 주로 내가 관심 있거나 사용하는 프로젝트를 위주로 모니터링하면서 이슈 처리하는 부분을 보고 있었다. 오픈소스 프로젝트 기여는 메인테이너들의 성향도 크게 영향을 받아서 메인테이너들이 기여 많이 받으려고 노력하는 프로젝트에 먼저 관심을 두게 되었다. 메인테이너들이 까칠하면 영어도 힘든데 논의하기도 쉽지 않고 PR을 제출해도 들어가기가 쉽지 않다.&lt;/p&gt;

&lt;p&gt;작년에 틈틈이 보던 프로젝트는 &lt;a href=&quot;https://github.com/babel/babel&quot;&gt;babel&lt;/a&gt;이었는데 Babel의 규모가 워낙 거대하기도 하고 AST랑 ECMAScript 표준에 깊게 연결되어 있어서 알아야 할 부분이 많이 있었다. 여전히 관심이 있었지만 &lt;a href=&quot;https://github.com/babel/babel/pulls?utf8=%E2%9C%93&amp;amp;q=is%3Apr+author%3Aoutsideris&quot;&gt;PR 몇 개 올리고는&lt;/a&gt; 별다른 작업을 못 하고 있었다.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;https://blog.outsider.ne.kr/attach/1/4125004918.gif&quot; width=&quot;750&quot; height=&quot;203&quot; alt=&quot;Readme 파일에 있던 기여 요청 문구&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;그러다가 올해 목표를 세우고 눈에 들어온 프로젝트가 &lt;a href=&quot;https://github.com/mochajs/mocha&quot;&gt;mocha.js&lt;/a&gt;이다. 지금은 &lt;a href=&quot;https://github.com/mochajs/mocha/commit/0542c407fcc08be3a3e293d5df943f22d292e304#diff-04c6e90faac2675aa89e2176d2eec7d8&quot;&gt;제거&lt;/a&gt;되었지만 Readme에 기여를 요청하는 내용이 크게 적혀있었다. 내용만 봐도 mocha의 사용자 수에 비해서 @boneskull 혼자 프로젝트를 유지보수 하느라고 고생 중임을 알 수 있었다.&lt;/p&gt;

&lt;p&gt;mocha.js는 테스트 프레임워크로 수년 동안 사용하고 있기에 내부 소스는 몰라도 내용이나 사용방법 등은 잘 알고 있었기에 참여를 좀 해볼 수 있을 것 같아서 프로젝트에 올라오는 이슈나 PR을 눈여겨보고 있었다.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;https://blog.outsider.ne.kr/attach/1/7758266216.gif&quot; width=&quot;750&quot; height=&quot;536&quot; alt=&quot;mocha 프로젝트 이슈의 라벨들&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;이슈도 대부분 라벨이 붙어 있어서 참여할 수 있는 이슈를 훨씬 더 찾기 쉬웠다. 그리고 경험상 이슈에 라벨이 잘 붙어 있으면 프로젝트 메인테이너들이 기여하는 사람들한테 훨씬 친절할 가능성이 크다. 저런 라벨링은 관리를 쉽게 하기 위함도 있지만 잘 모르는 사람도 기여할 수 있게 제공하는 부분이기 때문이다.&lt;/p&gt;

&lt;p&gt;처음에는 프로젝트 구조를 파악하기 위해서 &lt;code&gt;good-first-issue&lt;/code&gt;를 위주로 보다가 비교적 &lt;a href=&quot;https://github.com/mochajs/mocha/issues/3208&quot;&gt;간단해 보이는 이슈&lt;/a&gt;를 찾아서 PR을 보냈다. 하라는 거 다 수정했는데 아직도 머지를 안 해주고 있다. 이젠 권한도 있는데 확 내가 해버릴까 보다.&lt;/p&gt;

&lt;p&gt;전체 소스 구조는 아직 파악하지 못했지만, 대충의 폴더 및 파일구조와 원하는 부분만 테스트 돌리는 법은 파악했기에 이슈에 올라오는 처리할 수 있는 내용은 수정해서 &lt;a href=&quot;https://github.com/mochajs/mocha/pulls?utf8=%E2%9C%93&amp;amp;q=is%3Apr+author%3Aoutsideris&quot;&gt;PR을 올리기 시작했다&lt;/a&gt;. 지금 보니 1, 2월에 4개의 PR을 올리고 이 중 2개만 머지되었다.&lt;/p&gt;

&lt;p&gt;PR을 처리하기 위해서 이슈도 계속 보고 있었기 때문에 그냥 질문이나 사용법을 몰라서 올라오는 이슈 같은 것도 &lt;a href=&quot;https://github.com/mochajs/mocha/issues/3252&quot;&gt;답변&lt;/a&gt;을 달기 시작했다. 권한이 없으면 라벨링이나 이슈, PR 관리는 못 하지만 댓글 정도는 달아서 메인테이너들이 모든 이슈를 다 대응하지 않게 할 수는 있다.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;https://blog.outsider.ne.kr/attach/1/1198320853.gif&quot; width=&quot;542&quot; height=&quot;292&quot; alt=&quot;mocha 프로젝트의 내 기여 정보&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;1, 2월에 참여한 부분을 적었는데 사실상 왜 org에 초대했는지 모를 정도로 한 활동은 미비하다. 위 그래프를 보아도 아직 커밋 4개에 기여 순위도 35위 밖에 되지 않는다. 그래도 PR이랑 이슈에서 종종 보이면서 어느 정도 익숙해졌기 때문인 것 같고 기여할 사람이 많지 않다는 의미이기도 하다. 요즘은 테스트 프레임워크로 Jest가 뜨고 있지만, mocha의 사용자층을 보면 이 정도 기여는 안타까운 일이다.&lt;/p&gt;

&lt;p&gt;아무튼, 이제는 권한이 생기었으니 코드 기여가 아니더라도 이슈나 PR 관리 등 할 수 있는 일이 좀 더 많아졌다. &lt;a href=&quot;https://github.com/boneskull&quot;&gt;@boneskull&lt;/a&gt;와 관리하는 방식도 어느 정도 맞추어야 해서 한참 자세히 봐야겠지만 좋은 기회가 생겨서 Mocha를 집중적으로 봐야겠다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.outsider.ne.kr/1360?commentInput=true#entry1360WriteComment&quot;&gt;댓글 쓰기&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;http://feeds.feedburner.com/~r/rss_outsider_dev/~4/WQLtVhA-kjQ&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot;&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>Mocha.js org의 멤버가 되다</title>
    <updated>2018-03-07T03:46:13+09:00</updated>
    <dc:date>2018-03-07T03:46:13+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>outsideris@gmail.com (Outsider)</name>
    </author>
    <id>https://blog.outsider.ne.kr/1359</id>
    <link href="https://blog.outsider.ne.kr/1359"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;Automattic을 포함해서(&lt;a href=&quot;https://blog.outsider.ne.kr/1338&quot;&gt;바지 벗고 일하면 안 되나요?&lt;/a&gt; 참고) GitHub 등 많은 해외의 많은 회사가 언젠가부터 원격근무를 중심으로 일하면서 어느새 나한테도 원격근무로 일하는 건 하나의 목표가 되었다. 오픈소스를 보면서 개발자가 원격으로 일하면서도 좋은 소프트웨어를 만드는 것은 많이 보았고 원격근무를 중심으로 일하는 회사들이 많이 생겨났기 때문에 가능하다는 것은 알고 있었다. 하지만 해본 적은 없었으므로 상상만 했지 현실적인 부분은 잘 몰랐다.&lt;/p&gt;

&lt;p&gt;그러다가 지난 회사에서 1년 반 정도 원격근무를 병행해서(100% 원격은 아니니까) 일했고 그 경험을 정리해 보려고 한다. 원격근무를 해보고 나니 더욱 원격근무의 지지자가 되었다. 앞으로 원격근무를 더 많이 할 기회가 생기면(그러기를 기대한다) 원격근무에 대한 생각이 어떻게 발전할지 모르지만, 지금의 생각을 정리해 보기로 했다.&lt;/p&gt;

&lt;p&gt;이해를 돕기 위해 설명하자면 내가 있었던 조직은 100% 원격으로 근무한 것은 아니고 사무실에 내 자리가 있지만 필요할 때는 공유하고 원격근무를 하고 얼굴을 보고 일해야 할 일이 있거나 하면 사무실로 나가기도 하는 등 원격근무와 자율출근이 섞인 형태로 일했다. 사무실에 나가는 것도 원격 근무의 일부라고 생각하기에 나는 그냥 원격근무라고 부르고 싶다.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;원격 근무? 재택 근무?&lt;/h1&gt;

&lt;p&gt;사람마다 용어를 다르게 쓰는데 나는 &lt;strong&gt;&quot;원격 근무&quot;라는 용어를 더 선호하는 편&lt;/strong&gt;이다. 핵심은 물리적인 공간에 모이지 않은 상태로 일을 한다는 것인데 재택근무는 &quot;집에서 일한다&quot;라는 느낌이 너무 강해서 핵심이 전달 안 되는 느낌이다. 원격 근무를 하면 같이 일하는 사람이 한 곳에 있지 않을 뿐 집에 있든지 카페에 있든지 어떤 코워킹 스페이스에 있든지 상관없다. 심지어 사무실에 있을 수도 있다.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;원격 근무는 복지일까? 아닐까?&lt;/h1&gt;

&lt;p&gt;전에 같이 일하던 동료들하고도 이런 얘기를 여러 번 나누었는데 나는 복지라고 생각하는 편이다. 내가 HR은 아니라 정확한 복지의 의미를 생각해 본 적이 없어서 제대로 정의할 수 있는지도 모르겠지만 내가 생각하는 회사의 복지는 &lt;strong&gt;&quot;직원이 업무에 더 집중하고 잘할 수 있게 회사가 제공하는 것&quot;&lt;/strong&gt;이다. 예를 들면 대출이나 보험 같은 건 개인 일 때문에 업무에 지장이 생기는 것을 줄여주는 것이고 식대 지원이나 리프레시 휴가 같은 건 만족도나 행복감을 높여주어서 직원들이 더 일을 잘 할 수 있게 하는 것이다.&lt;/p&gt;

&lt;p&gt;이런 맥락에서 &lt;strong&gt;원격 근무는 복지다.&lt;/strong&gt; 전에는 너무 당연하다고 생각해서 깨닫지 못했지만, 원격 근무를 하고 나서 내가 불필요한 일에 스트레스를 많이 받고 있었다는 것을 깨달았다.&lt;/p&gt;

&lt;p&gt;예를 들어 아침에 일어났는데 눈이 너무 많이 왔거나 비가 너무 많이 오면 그냥 원격근무를 했다. 길 가면서 넘어질까 조심하거나 옷 다 젖으면서 사무실에 가느니 그냥 집에서 일하거나 동네 카페에서 일하는 게 훨씬 편했기 때문이다. 아니면 잠시 병원을 가야 하거나 개인적인 볼일로 어디 들려야 할 때는 예전 같으면 반차나 휴가를 써야 했기에 내가 언제 휴가를 쓸 수 있고 이런 일 때문에 내 휴가 쓰는 것도 신경 쓰이니까 다른 일정과 맞추기도 하고 여러 가지로 신경 써야 했는데 원격근무를 할 때는 그냥 일하다가 얘기하고 갔다 오거나 좀 늦게부터 일한다고 공유하면 그만이었다. 이 볼일이 먼 곳에 있어도 크게 신경 쓸 것 없이 그냥 볼일 보고 그 근처 카페 같은 곳에서 일하면 끝이었다. 사소하게는 업무 중에 집중이 안 되거나 너무 졸리거나 하면 얘기하고(중요하다!) 좀 쉬거나 잠시 눈 붙인 후에 다시 집중해서 일하면 그만이었다.&lt;/p&gt;

&lt;p&gt;심지어 나는 왜 모든 회사가 9~10시 사이에 모두가 사무실로 나오도록 해서 생기는 이득이 무엇인지 의문이 들었다. 난 출퇴근 거리가 가까운데도 출퇴근 안 하는 것만으로도 스트레스가 크게 줄어서 출퇴근이 먼 사람의 이득은 훨씬 클 거로 생각한다. 내가 가장 회의감을 느낄 때가 아침에 출근하는데 배가 아파서 지하철을 내렸다 가면 시간 내에 갈 수 있을지 아니면 사무실까지 참을 수 있을지를 고민할 때이다.&lt;/p&gt;

&lt;p&gt;사소한 출퇴근 문제부터 개인 볼일까지 원격 근무를 하니까 회사 출퇴근과 충돌해서 신경 써야 하는 많은 일에 대한 스트레스가 거의 사라지면서 업무 강도가 높더라고 내 만족도는 크게 높아졌다. 앞으로는 연봉이 더 낮아도 원격 근무가 가능하다면 충분히 고려할만한 정도가 되었다.&lt;/p&gt;

&lt;p&gt;결국, 회사는 직원들이 더 일을 잘 할 수 있게 여러 가지 복지를 제공하는 것인데 국내의 수많은 회사가 왜 원격 근무에 대한 고민이나 실험은 하지 않는지 궁금할 뿐이다. 다른 복지에 비교해서 돈이 많이 드는 일도 아닌데... 노파심에 말하자면 복지도 회사마다 다르듯이 원격 근무가 모든 조직이나 업무형태에 다 좋다고 얘기하는 것은 아니다.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;죄책감&lt;/h1&gt;

&lt;p&gt;원격 근무를 오래 꿈꿔왔음에도 처음 원격근무를 했을 때 내가 당황했던 것은 죄책감(?)이었다. 사무실로 출근해도 때로는 팀원들과 수다를 떨기도 하고 중간에 좀 휴식을 취하기도 하고 어느 날은 너무 집중이 안 돼서 어영부영 보내기도 한다. 아니면 올림픽이나 사회적 큰 이슈가 있으면 방송이나 글을 틈틈이 보기도 한다. 회사 경영자 처지에서는 온종일 일만 열심히 하기를 바랄지도 모르겠지만 사람이 개인 일도 있고 기분의 기복도 있는데 어떻게 그렇게 되겠는가? 아무튼, 회사에 출근해서 오늘 일을 제대로 못 했다고 하더라도 일정에 큰 문제가 있지 않으면 퇴근 시간이 되면 퇴근을 하게 된다. 혹은 퇴근은 못 했다고 하더라도 퇴근 시간이 지난 후에 야근한다는 개념으로 일을 하게 된다.&lt;/p&gt;

&lt;p&gt;사무실에 앉아있다고 하더라도 누가 내 모니터를 감시하거나 내가 얼마나 일하고 있는지 시간별로 다 보고 있는 것은 아님에도 막상 카페에 혼자 앉아 있으니 죄책감(?)이 꽤 컸다. 이건 성격에 따라 다를 수도 있긴 한데 아마 이 죄책감은 다른 사람들이 내가 얼마나 일한다고 생각할까 하는 것에 대한 불안감이라고 생각한다.&lt;/p&gt;

&lt;p&gt;개발 같은 경우 3~4시간 열심히 개발했지만, 완성이 안 되거나 처음에 생각을 잘못해서 했던 작업을 다 버리고 새로 하는 일도 꽤 많이 있다. 사무실에서는 이런 일들이 그냥 다시 해야 해서 짜증 나는 정도의 일이었는데 카페에서 채팅도 안 하고 3~4시간 작업하다가 이런 상황을 만나면 엄청 당황하게 되었다. 왜냐하면, 다른 사람으로서는 내가 3~4시간 열심히 일했는지 침대에 누워서 잤는지 알 수 없는 일이기 때문이었다. 그래서 초반에는 이런 상황에 빨리 간단한 일을 찾아서 커밋을 올리면서 내가 일하고 있음을 알리거나 괜히 채팅에 3~4시간 일했던 게 날아갔음을 투정 부리면서 &quot;나 놀지 않았어요&quot;를 최대한 어필하려고 노력했다.&lt;/p&gt;

&lt;p&gt;내 경우에는 이런 죄책감이 완전히 사라지는데 한 6개월 정도가 걸렸던 것 같다. 사람에 따라 처음부터 괜찮은 사람도 있는 것 같은데 나는 최소한 그랬다. 생각해 보면 이 죄책감은 이상한 게 사무실에 있다고 하더라도 옆 사람이 어떤 작업을 현재 하고 있고 어떻게 실패했고 하는 것을 다 알지는 않는다. 이슈 단위나 큰 일정에 따라 확인은 하지만 개별 개발자가 시간마다 어떤 작업 하고 있는지는 당연히 모르고 관리자가 아니라 동료라면 더욱 그렇다. 그러므로 이런 죄책감은 실제로 필요한 것이라기보다는 익숙한 사무실 출근을 안 하고 원격으로 일해서 생기는 것으로 보인다.&lt;/p&gt;

&lt;p&gt;원격 근무를 도입한 조직이라면 팀원들한테 이런 죄책감을 느끼지 않아도 된다는 메시지를 충분히 주어서 신뢰가 생기게 만들어야 한다고 본다. 참고로 동료와 업무 공유를 할 필요가 없다는 얘기가 아니다. 사실 업무 공유는 원격 근무에서 훨씬 더 중요한데 이건 뒤에서 더 얘기하겠다.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;오버워크&lt;/h1&gt;

&lt;p&gt;국내에는 아직 원격 근무가 많지 않고 평균적으로는 근무환경이 좋지 않다 보니 원격 근무를 쉬면서 일하는 것처럼 생각하는 느낌이 있다. &lt;a href=&quot;https://blog.outsider.ne.kr/1009&quot;&gt;REMOTE 책&lt;/a&gt;(국내 번역서는 &quot;리모트 : 사무실 따윈 필요 없어!&quot;)을 보면 &quot;관리자들은 원격근무를 하면 사람들이 일하지 않을까 봐 걱정하지만, 열정 있는 직원들이라면 오히려 원격근무에서 너무 많이 일해서 걱정이라고 한다.&quot;라는 얘기가 나오는데 실제로 해보니 그랬다. 원격 근무에 출퇴근 시간이 정해져 있는 게 아니다 보니까 특별한 일이 없으면 그냥 계속 일을 하게 되었다.&lt;/p&gt;

&lt;p&gt;아무래도 업무 시간이 나한테 다 맡겨졌으니 그에 대한 책임을 더 느끼게 되었고 원격 근무라는 게 내가 가장 집중하고 생산성이 높을 때 일을 할 수 있다 보니까 그런 상태에 들어갔을 때 더 많이 하게 되는 느낌이었다. 일이 잘 안될 때는 조금 일찍 들어가기도 하지만 일이 잘 될 때는 원래도 퇴근 시간이라는 개념이 크지 않으므로 그냥 일을 끝낼 때까지 계속하게 되었다. 또 개발은 코드를 작성하다가 갑자기 멈추기 싫을 때가 많은데 이런 때는 시간에 상관없이 계속하게 되었다.&lt;/p&gt;

&lt;p&gt;앞의 죄책감과 비슷한 부분일 수도 있는데 원격으로 일하면 내가 어느 정도로 평가받고 있는지 잘 모르게 된다. 어떻게 보면 전에도 몰랐는데 원격 근무를 하면 실제로 커밋한 코드나 논의 등 일로만 평가받으니까 더 신경 쓰게 되는 것 같다. 그래서 약간 일을 더 해서 충분히 일을 잘하고 있다고 어필하게 되는 것 같다.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;원격 근무는 비동기 협업을 의미한다&lt;/h1&gt;

&lt;p&gt;원격 근무에 대한 어떤 규칙은 없었지만 1년 반 정도 원격근무를 하면서 원격으로 더 일을 잘하기 위해서 논의도 많이 하고 조금씩 불편할 부분을 개선하고 실험하다 보니 원격 근무를 점점 많이 하게 되었다. 내가 속한 개발 조직은 15~20명 정도였는데 나중에는 하루에 팀의 10~30% 정도만 사무실로 출근을 했다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;원격 근무의 핵심은 비동기로 일하는 것으로 생각한다. 그래서 원격 근무를 하면 단순히 사무실에 안 나오는 것이 아니라 일하는 방식 자체를 바꾸어야 한다.&lt;/strong&gt; 같은 시간 같은 장소에 팀원들을 모아두는 것은 동기 방식으로 일하기 위함인데 나도 필요할 때 옆 사람한테 말 걸고 도움을 청하는 경우도 많긴 하지만 동기 방식은 요청하는 사람(대부분은 관리자?)의 관점에서 편한 방식이라고 생각한다. 내가 한참 집중해서 코딩하고 있는데 PM이 날 찾아온다거나 어떤 회의 중에 나보고 들어오라고 하면 내가 뭘 하고 있든 간에 멈추어야 한다. 내 경험상 이런 인터럽트 때문에 생기는 실무자들의 비효율을 고민하는 조직은 많지 않았다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;원격 근무로 일하면 자연스럽게 비동기가 된다.&lt;/strong&gt; 일단 바로 부르고 싶어도 자리에 없으니까 부를 수가 없다. 그렇다 보니 회의할 때도 보통 먼저 오늘 사무실에 나왔는지를 물어보는 메시지가 오면서 내가 가능한 시간을 물어보고 회의시간을 잡아서 진행하게 된다. 보통 회의는 그렇게 잡지 않냐고 할 수도 있겠지만 빈도수 자체가 다르다. 그렇다 보니 오히려 일이 많을 때는 원격근무를 많이 하게 되었다. 정량적으로 검증은 못 해봤지만 원격으로 일할 때는 실제 인터럽트도 없고 내가 그 인터럽트도 제어할 수 있어서 훨씬 개발을 많이 할 수 있었다. 반대로 좀 여유가 있어서 사람들과 수다도 떨 수 있을 때 사무실을 나가게 되었다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;원격 근무를 하면 비동기 방식이 강제되지만, 원격 근무를 더 잘하려면 공격적으로 비동기 방식을 도입해야 한다.&lt;/strong&gt; 비동기로 일한다는 것은 꽤 많은 부분이 달라진다. 보통은 Slack, GitHub, Jira 등을 사용할 텐데 비동기 방식으로 일하면 이러한 도구들이 완전히 업무의 중심이 되어서 모든 논의, 진행 상황, 결과가 다 어딘가에 기록으로 남아야 한다. 같은 시간에 다 있는 것도 아니고 또 일하고 있어도 채팅을 보고 있는 것은 아니므로 Slack으로 논의하고 GitHub이나 Jira에 기록으로 남겨서 나중에라도 확인하고 따라갈 수 있게 해야 한다. 기록은 나중에 합류한 팀원들에게도 도움이 되는 문서화인데 비동기로 일하면서 이런 부분을 신경 쓰면 자연스럽게 문서화가 된다. 조직 차원에서 이런 기록은 엄청나게 중요한 부분이다.&lt;/p&gt;

&lt;p&gt;그리고 원격보다 비동기를 강조한 것은 업무 형태 자체를 이쪽으로 가야 한다고 생각하기 때문이다. 그래서 &lt;strong&gt;딱 한 명 빼고 모두 사무실에 나왔다고 하더라도 비동기로 일해야 한다.&lt;/strong&gt; 채팅으로 얘기하고 기록을 남기거나 사무실에서 회의하고 논의한 얘기는 다시 회의록으로 만들어서 공유해서 팀에서 진행 상황을 놓치는 사람이 없게 해야 한다. 아직 사무실에서 출근하는 게 보통 더 익숙하므로 이런 부분은 팀원 전체가 계속 신경 쓰고 노력하지 않으면 쉽지 않은 부분이다. 다시 생각해 보면 당연한 부분이다. 원격 근무를 하지 않아도 휴가를 가거나 사무실에 있어도 모든 회의에 참여하는 것은 아니므로 당연히 기록을 남기고 모두가 알 수 있게 해야 한다. 하지만 사무실에 모두 있으면 불편하지 않기 때문에 간과하기 쉽다.&lt;/p&gt;

&lt;p&gt;그래서 원격 근무를 하려면 전사적으로 비동기로 일해야 한다. 이전에 있던 곳에서는 개발조직이 다른 부서와 밀접하게 닿아서 하지 않는 일이 많아서 개발조직이 원격 근무를 더 잘 할 수 있었다. 개발, 디자인, 기획, QA, 운영 같은 부분은 비동기로 일하는 게 충분히 가능하다고 생각하지만 다른 부서들은 내가 업무형태를 정확히 알지 못하므로 뭐라 말하기는 어렵다. 그 부서는 성격상 모여서 일하더라도 팀 간의 협업은 최소한 비동기가 되어야 회사가 원격으로 일할 수 있어야 한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/minhee/rimoteu-doibgi&quot;&gt;스포카처럼 점진적인 원격 근무 도입&lt;/a&gt;을 하는 경우가 아니라면 일주일이나 한 달에 한번 원격 근무 같은 규칙은 무의미하다고 본다. 원격 근무를 하려면 협업 형태가 완전히 비동기가 되어야 하는데 일주일이나 한 달에 한번 같은 규칙은 오히려 휴가나 일찍 퇴근하는 날처럼 비쳐서 일하는 방식은 안 바뀌고 좀 쉬는 날 정도로 받아들여질 가능성이 크다.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;관리의 문제&lt;/h1&gt;

&lt;p&gt;난 관리자는 아니지만 연차가 오르다 보니 관리에 대해서도 관심을 끌게 되었다. 원격 근무를 떠나서 국내에서 관리 대한 고민이나 경험은 그리 성숙하지 못했다는 게 내 생각이다. 여기서 관리는 팀원 관리, 프로젝트 관리, 일정 관리 등을 모두 포함하는데 막상 관심을 가지니 너무 복잡하고 어려운 문제라서 관리만 전문적으로 하는 스페셜리스트가 왜 이렇게 없는가 싶을 정도다. 까놓고 말하면 일정 정해놓고 압박하고 비난하기 바빴지 체계적인 관리에 대해서 심각하게 고민하고 업계에 그 경험이 쌓이게 하는 노력은 거의 없었다고 본다.&lt;/p&gt;

&lt;p&gt;사무실에 있을 때 관리자들이 어떤 관리하는지 모르지만, 원격 근무는 얼굴을 보지 않고 일하다 보니 관리가 더 중요하다. 단적으로 특정 팀원이 몸이 안 좋거나 집안일로 고민이 많은 경우 사무실에 있으면 눈치챌 수 있지만, 원격으로는 본인이 얘기하지 않으면 알아차리기가 어렵다. 그 외 업무적으로나 회사 내 인간관계가 힘든 경우도 자연히 알아낼 방법이 없으므로(사무실에 있다고 자연히 알게 되는 건 아니지만...) 이런 부분에 신경을 써야 한다.&lt;/p&gt;

&lt;p&gt;해외의 원격 근무 경험 글을 보면 정기적으로 팀원끼리 잡담하는 시간을 만들거나 업무와 상관없이 개인의 상황만 물어보고 챙겨주는 관리자들이 존재한다. 사실 업무 외의 부분만 챙겨주는 관리자는 원격 근무가 아니더라도 외국 회사들에는 꽤 있다. 이런 경험을 못 해서 정확히 어떤 느낌인지는 모르겠지만 원격 근무를 하면 이런 시도가 필요하다&lt;/p&gt;

&lt;p&gt;관리는 평가로도 이어질 수 있는데 원격으로 일하면 평가할 수 있는 내용이 실제로 한 일, 기록에 남은 일이 대부분이라서 훨씬 더 공정하다고 생각한다. 불필요하게 사무실에 오래 앉아있거나 눈치 보지 않고 일을 더 잘하는 것에 모두 집중할 수 있다. 물론 이건 개념상으로만 그런거고 실제로 진행되면 객관적인 평가 기준을 마련하기 위해서 팀 내에서 많은 고민과 노력이 필요할 것이다. 평가에 대해서도 내 경험이 짧아서 어렴풋이 생각한 정도만 정리한 것이긴 하다.&lt;/p&gt;

&lt;h1&gt;신규 입사자, 신입에 대한 지원&lt;/h1&gt;

&lt;p&gt;사무실로 출퇴근하는 것이 너무 당연해서인지 개개인의 성격에 따라 다른지 모르지만, 아직 국내에서 원격 근무로 일하는 방식이 맞는 사람이 있고 아닌 사람이 있다고 생각한다. 그래서 팀원을 뽑을 때도 원격 근무에 맞는지를 뽑아야 한다. 이건 누가 좋고 나쁘냐가 아니라 팀에 맞냐 안 맞냐에 대한 얘기이다. 원격 근무를 하려면 시간에 대해 관리를 해주거나 감시해주는 사람이 없으므로 자기 주도적으로 일할 수 있어야 하고 비동기로 일하는 부분에 어느 정도 동의가 있어야 한다. 그렇다 보니 어느 순간부터는 면접 때 이런 부분도 물어보곤 했다.&lt;/p&gt;

&lt;p&gt;하지만 그래도 해결 안 된 부분은 새로 들어온 사람이나 주니어에 대한 지원이다. 그나마 경력자는 잘 작성해 놓은 문서를 제공하고 사무실에 갔을 때 몇 번 설명해 주면 되지만 신입 지원은 여전히 잘 모르겠다. 보통 사무실에 출퇴근할 때 신입이 입사하면 정기적으로 일부 시간을 빼서 같이 페어 코딩을 하거나 옆에서 지속해서 가르쳐 주면 된다. 하지만 원격 근무라고 생각하면 신입이 새로 회사에 왔는데 정작 자기랑 일할 사람은 아무도 사무실에 없다거나 무엇을 해야 할지 모르겠는데 물어볼 사람도 없는 문제가 발생할 수 있다. 사무실에서도 편하게 물어보라고 해도 신입 입장에서는 당연히 하나도 안 편할 텐데 얼굴도 보지 않은 상태에서는 더 쉽지 않을 것이다. 그리고 신입을 어느 정도 지도를 해주면서 빨리 업무 능력이 향상되도록 도와주어야 하는데 원격 근무로 이 부분을 얼마나 효율적으로 할 수 있는지는 여전히 고민인 부분이다.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;우리가 했던 시도&lt;/h1&gt;

&lt;p&gt;원격 근무를 계속하면서도 아직 모르는 부분이 많았기 때문에 논의하면서 계속 개선해 나갔다. 원격 근무 경험도 많지 않고 팀에 맞는 방법도 찾아야 하므로 지속해서 팀에서 더 좋은 방법을 논의하는 것이 중요하다. 전에 있던 조직은 새로운 방법을 도입하자고 얘기 나오면 논의가 활발하게 진행되는 편이었고 진행을 했다가도 비효율적이면 바로 이슈 제기를 하는 편이라서 더 편하게 의견을 말하고 실험할 수 있었다. 가장 좋은 방법을 한 번에 찾는 것보다는 좋았던 방법이 팀 상황에 따라 안 좋아질 수도 있으므로 지속해서 개선할 수 있는 조직이 훨씬 건전하다고 생각한다.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;일하는 상태에 대한 공유&lt;/h3&gt;

&lt;p&gt;출퇴근과 원격 근무가 섞여 있다 보니 처음에는 원격 근무를 하는 사람만 Slack과 캘린더로 공유하고 사무실로 나오는 사람은 그냥 나왔다. 출퇴근 시간도 정해져 있는 것은 아니라서 다른 사람이 언제 일하고 있는지 몰라서 생기는 불편함을 줄이기 위해 일을 시작하면 채팅으로 시작했음을 같이 일하는 사람들에게 알리고 퇴근할 때도 알리고 퇴근했다. 이는 사무실에 나오는 사람도 사무실에 나옴을 알리고 퇴근할 때는 말하고 퇴근해서 사무실에 나오냐 안 나오냐의 차이를 없앴다.&lt;/p&gt;

&lt;p&gt;이 공유는 중간에 자리를 비울 때도 마찬가지로 잠시 자리 비움을 알리고 돌아와서 업무 재개를 하면 다시 알렸다. 추가로 집중해서 개발하고 싶을 때도 2~3시간은 채팅 안 볼 것이라고 얘기하기도 해서 서로 일하기가 편해졌다.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;정기적인 만남의 자리&lt;/h3&gt;

&lt;p&gt;원격 근무가 활성화되면서 사무실에 안 나오는 일이 많다 보니 서로 얼굴을 보기 어려워졌다. 타이밍이 안 맞으면 일주일에 한 번도 못 보는 일도 생기곤 해서 한 달에 한 번씩 다 같이 모여서 점심을 먹는 자리를 만들었다. 이때 그냥 수다를 떨기도 하고 전체가 다 같이 논의할 얘기를 하기도 했다. 물론 이러한 모임은 필수는 아니었다.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;Slack의 스탠드업 미팅&lt;/h3&gt;

&lt;p&gt;스탠드업 미팅을 좋아하진 않는데 다른 사람이 진행하는 업무를 어느 정도 공유하기 위해서 슬랙에서 스탠드업 미팅을 진행했다. 스탠드업 미팅은 보통 서서 아주 짧게 하라지만 길어지는 경우가 허다하고 같은 시간에 모이지 않는 우리에겐 적합하지 않았다. 슬랙봇 서비스가 많은데 우리는 &lt;a href=&quot;https://github.com/18F/standup-slack-bot&quot;&gt;standup-slack-bot&lt;/a&gt;를 사용해서 스탠드업 미팅을 진행했다.&lt;/p&gt;

&lt;p&gt;이런 봇은 대부분 비슷한데 아침에 bot한테 &quot;어제 한 일&quot;, &quot;오늘 할 일&quot;, &quot;일을 방해하는 요소&quot;, &quot;목표&quot;를 적으면 봇이 이 내용을 모아서 정해진 시간에 전체가 볼 수 있게 공유한다. 아침에 출근하면 보통 오늘 할 작업을 대부분 정리하므로 어차피 해야 할 일이고 그걸 bot에 적어놓으면 몇 분 걸리지 않으면서 전체가 다른 사람이 현재 어떤 일을 하고 어떤 일로 고생 중인지를 알게 되었다. 이는 팀이 커짐에 따라 더 작은 단위로 나누거나 팀 성격에 따라서는 진행 안 하기도 했다.&lt;/p&gt;

&lt;h3&gt;컨퍼런스 콜&lt;/h3&gt;

&lt;p&gt;사무실에도 출근할 수 있다 보니 채팅으로 논의하다가 주제가 커지거나 하면 항상 다음 회의 일정을 잡아서 논의하곤 했다. 이렇게 하다 보니 회의가 많아지기도 했고 바로 진행해도 될 일이 회의 잡아서 진행될 때까지 미뤄지는 느낌도 있어서 간단한 일부터 시작해서 논의가 시작되면 바로 컨퍼런스 콜로 진행해서 끝내버리는 일이 많아졌다. 시간이 지나면서 컨퍼런스 콜이 더 자연스러워지니 대부분의 회의도 항상 컨퍼런스 콜을 연결해서 사무실에 안 나온 사람도 회의 내용을 들을 수 있게 했다.&lt;/p&gt;

&lt;p&gt;이전까지는 난 항상 카페에서 원격 근무를 했는데 컨퍼런스 콜을 하면서 처음으로 원격을 해도 카페가 아닌 업무 공간이 필요하다는 생각을 했다. 카페는 너무 시끄러워서 마이크가 있어도 말할 수가 없었다.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h1&gt;에필로그&lt;/h1&gt;

&lt;p&gt;원격 근무를 얘기하면 보통 걱정을 더 많이 하는데 문제는 해결하는 방향으로 나아가면 되는 거 아닌가 싶다. 원격 근무에 대한 걱정에 대한 질문에 대한 내 대부분의 대답은 &quot;그럼 사무실에 있을 때는 어떻게 했나요?&quot;가 되는데 사무실에서 일하다가 프로젝트 일정이 망가졌을 때 아무도 사무실에 모여있는 게 문제인가는 생각하지 않는데 원격 근무에 대한 걱정은 대부분 원격 근무 자체가 문제가 아닐까 생각하는 경우가 많은 것 같다.&lt;/p&gt;

&lt;p&gt;난 원격 근무를 지지하게 되었지만, 원격 근무가 모든 회사나 업무에 맞는다고는 생각하지 않는다. 그리고 사람들이 동의하지 않으면 진행하기 어려운 부분이기도 하다. 해외에서는 더 좋은 인력을 데려오려고(거리나 위치 때문에 입사를 안 하는 경우도 많으므로) 원격 근무를 도입하는 때도 많은데 국내에서도 이런 추세가 많이 생겨서 경험이 더 많이 누적되기를 바랄 뿐이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.outsider.ne.kr/1359?commentInput=true#entry1359WriteComment&quot;&gt;댓글 쓰기&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;http://feeds.feedburner.com/~r/rss_outsider_dev/~4/0FyP_i79-bE&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot;&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>1년 반 정도의 원격 근무 경험</title>
    <updated>2018-03-05T04:05:21+09:00</updated>
    <dc:date>2018-03-05T04:05:21+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>outsideris@gmail.com (Outsider)</name>
    </author>
    <id>https://blog.outsider.ne.kr/1358</id>
    <link href="https://blog.outsider.ne.kr/1358"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;div class=&quot;ttbReview&quot;&gt;
&lt;fieldset style=&quot;PADDING-RIGHT: 5px; PADDING-LEFT: 5px; PADDING-BOTTOM: 5px; MARGIN: 10px; WIDTH: 90%; PADDING-TOP: 5px&quot;&gt;
&lt;legend&gt;&lt;a href=&quot;http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=129407308&amp;amp;ttbkey=ttboutsideris1727002&amp;amp;COPYPaper=1&quot; target=&quot;_blank&quot; class=&quot;aladdin_title&quot;&gt;사이트 신뢰성 엔지니어링&lt;/a&gt;&lt;/legend&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=129407308&amp;amp;ttbkey=ttboutsideris1727002&amp;amp;COPYPaper=1&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;http://image.aladin.co.kr/product/12940/73/cover/k902532482_1.jpg&quot; alt=&quot;&quot; border=&quot;0&quot;&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot; style=&quot;vertical-align:top;&quot;&gt;
&lt;a href=&quot;http://www.aladin.co.kr/shop/wproduct.aspx?ItemId=129407308&amp;amp;ttbkey=ttboutsideris1727002&amp;amp;COPYPaper=1&quot; target=&quot;_blank&quot; class=&quot;aladdin_title&quot;&gt;사이트 신뢰성 엔지니어링&lt;/a&gt; - &lt;img src=&quot;http://image.aladin.co.kr/img/common/star_s10.gif&quot; border=&quot;0&quot; alt=&quot;10점&quot;&gt;&lt;br&gt;벳시 베이어 외 지음&lt;br&gt;장현희 옮김&lt;br&gt;제이펍&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/fieldset&gt;
&lt;br&gt;&lt;br&gt;
&lt;/div&gt;

&lt;p&gt;이 책은 구글의 &quot;사이트 신뢰성 엔지니어링(Site Reliability Engineering)&quot; 즉, SRE가 무엇인지 설명하는 책이다. 구글에서는 10년 이상 전부터 SRE라는 역할을 가진 사람들이 있었다고 하는데 그 경험을 가지고 SRE를 외부에 소개하기 위해서 &lt;a href=&quot;https://landing.google.com/sre/&quot;&gt;웹사이트&lt;/a&gt;를 만들고 내부 SRE들의 경험을 모아서 &lt;a href=&quot;https://landing.google.com/sre/book/index.html&quot;&gt;책으로 공개&lt;/a&gt;했다. 이 책은 구글이 공개한 이 책을 번역한 책이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;소프트웨어 엔지니어링도 마찬가지로 제품을 출시한 이후보다는 출시하기 전에 더 많은 노력이 필요한 것처럼 보이지만, 사실 시스템의 총비용 중 어림잡아 40%~90%가 제품을 출시한 이후에 발생한다. 현재 소프트웨어 업계에서는 프로덕션 환경에 배포가 완료되어 실제로 동작하는 소프트웨어를 '안정화된' 것으로 생각하고 소프트웨어 엔지니어들이 이에 대해 비교적 신경을 덜 쓰는 형태가 정착되어 있는데, 이는 완전히 잘못된 것이다. 이 관점에 따라 소프트웨어 엔지니어링이라는 것이 주로 소프트웨어 시스템을 디자인하고 개발하는 데 초점을 맞춘 것이라면, 소프트웨어 객체를 처음부터 배포와 운영, 개선, 그리고 폐기에 이르기까지 전체 생명주기를 다루는 방법 또한 존재해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;나는 이전에 있던 회사에서 SRE팀을 만들면서 SRE에 대해서 본격적으로 관심을 가지기 시작했다. &quot;SRE가 어떤 일을 하는가?&quot;에 대해서 설명을 하다 보면 대부분은 &quot;DevOps구나&quot;라고 받아들인다. 꼭 틀린 말은 아니라고 생각하지만 요즘 관심 분야기도 하고 구글은 SRE라는 역할을 어떻게 보고 만들어왔는지가 궁금해서 이 책이 나오자마자 사서 읽게 되었다. 페이지가 500페이지가 넘는데 이렇게 두꺼운 책을 보는 건 오랜만이지만 재미있게 읽었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;업계 표준 용어인 데브옵스를 다른 의미를 가진 단어로 간주한다. 분명히 코드로서의 인프라스트럭처에 무게 중심을 두기는 하지만, 우리에게 가장 중요한 것은 신뢰성이기 때문이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이 책은 SRE가 무엇인지 장황하게 설명하기보다는 실제로 구글 내에서 SRE가 어떻게 일을 하는지를 구체적으로 설명하고 있다. 그래서 각 장의 저자들은 다 다른 사람들이고 이렇게 에세이처럼 작성된 많은 글을 분야별로 묶어서 하나의 책으로 낸 것이다. 다 읽고 나서도 그래서 SRE는 무엇이지? 우리 조직에서는 어떻게 해야 하지?에 대한 명확한 답을 얻지 못할 수도 있다고 생각한다. 대신 쉽게 알지 못하던 구글 내에서 SRE가 어떻게 일하는지를 자세하게 살펴보고 있고 이런 접근방식에서 많은 생각을 하게 될 수 있을 것 같다. 내가 SRE로 일한다면 이 책에 나온 부분과 비슷한 사례를 겪으면 책을 다시 한번 참고하고 접근방식에 대해서 다시 한번 고민해 보면 많은 것을 얻을 수 있을 것 같다.&lt;/p&gt;

&lt;p&gt;추가로 이 책을 읽으면서 계속 든 생각은 &lt;strong&gt;&quot;내가 있는 조직은 구글이 아니다.&quot;&lt;/strong&gt;라는 점이었다. 이 책에 나오는 수많은 사례에서 &quot;이 정도 까지 고민하고 이런 부분까지 개선하는구나!&quot; 싶으면서도 내가 속한 조직에서 이렇게까지 할 일이 있을지, 혹은 그런 노력을 들일 여유가 있을지 하는 생각이 들었다. 구글과 똑같이 할 여력은 대부분 없으니 구글의 SRE는 어떤 마인드로 일하는가에 더 집중해야 할 것 같다.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;Part 1 소개&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;SRE란 운영팀을 위한 소프트웨어 엔지니어를 말한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;SRE가는 용어가 아직 많이 알려주지 않으므로 1부에서는 SRE에 대해 설명한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;기본적으로 SRE팀은 엔지니어링에 초점을 맞춘다는 점이 가장 중요하다. 끊임없이 엔지니어링을 추구하지 않으면 업무 부담이 증가하여 그 부담을 나누기 위해 더 많은 인력이 필요하게 되고 결국에는 서비스의 크기에 따라 전통적인 운영 업무를 담당하는 인력이 기하급수적으로 늘어나게 된다.&lt;br&gt;
  ...중략...&lt;br&gt;
  이러한 숙명에서 벗어나려면 서비스를 관리하는 팀은 코드를 작성해야 한다. 그렇지 못하면 늘어나는 일감에 파묻히게 될 뿐이다. 그래서 구글은 SRE팀에 티켓, 전화 응대, 수작업 등, 소위 '운영' 업무에 최대 50%의 시간만 투입하도록 정해두고 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;SRE가 접근하는 방법에 거의 동의하는 편이다. 구글이 사내에서 어떻게 SRE가 시간을 사용하는지 추적하는지가 궁금하긴 했지만...&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;사실 우리가 원하는 것은 시스템이 자동화되는(automated) 것이 아니라 자동적(automatic)이 되는 것이다.&lt;br&gt;
  &lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Part 2 원리와 원칙들&lt;/h2&gt;

&lt;p&gt;그동안 SRE를 운영하면서 쌓아온 경험을 바탕으로 한 원칙들이 2부에 정리되어 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;사용자들은 주로 적절하게 높은 수준의 신뢰성과 극대화된 신뢰성의 차이를 알아차리지 못한다. 왜냐하면, 사용자의 경험이란 모바일 네트워크나 그들이 사용하는 장비처럼 신뢰성이 낮은 컴포넌트들에 의해 좌우되기 때문이다.&lt;br&gt;
  ...중략...&lt;br&gt;
  SRE는 이런 점을 고려하여 업타임을 극대화하는 대신, 서비스가 다운될 수 있는 위험 요소와 빠른 혁신과 효과적인 서비스 운영 사이의 균형을 찾음으로써 사용자의(기능, 서비스, 그리고 성능에 대한) 전체적인 만족도를 향상시키는 것에 집중된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;처음부터 그랬는지 진행하면서 개선되어 있는지는 모르지만, 구글이 꽤 큰 조직임에도 실용성을 유지하고 있음이 느껴졌다. 말로만 하면서 실용성이 떨어지는 것이 아니라 실제로 더 나아지도록 많은 고민을 한 걸 알 수 있었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;우리의 목표는 서비스에서 발생 가능한 위험 요소 중 기업이 기꺼이 부담할 용의가 있는 위험 요소들을 찾아내는 것이다. 우리는 충분히 신뢰할 수 있는 서비스를 구현하기 위해 노력하지만, 필요 이상의 신뢰성을 확보하려고는 하지 않는다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;SLO는 서비스 수준 목표(Service Level Objectives)를 의미하며, SLI에 의해 측정된 서비스 수준의 목표 값 혹은 일정 범위의 값을 의미한다. 그래서 SLO는 SLI &amp;lt;= 목표치 또는 최소값 SLI &amp;lt;= 최댓값으로 표현할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;책 전체에서 SLO 얘기가 계속 나오는데 SRE가 이 수치를 큰 목표로 하고 있음을 알수 있었다. 이런 수치를 목표로 작업해 본 적은 없기는 한데 운영 관점에서 상태를 파악하기 좋은 수치라는 생각이 들었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;삽질이란 프로덕션 서비스를 운영하는 것과 직접적으로 연관이 있지만, 수작업을 동반하고, 반복적이며, 자동화가 가능하고, 사후 대처가 필요하며(tactical), 지속적인 가치가 결여되어 있으면서도 서비스의 성장에 따라 지속적으로 늘어나는 업무들을 말한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;우리는 소프트웨어 기반의 자동화는 대부분의 상황에서 사람이 직접 수행하는 작업보다 우수하다고 생각하기는 하지만, 이 두 가지보다 더 나은 방법은 둘 다 필요치 않은 고수준의 시스템, 즉 자율(autonomous) 시스템을 디자인하는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;결국, 우리의 임무는 시스템의 신속함과 안정성 사이의 균형을 유지하는 것이다.&lt;br&gt;
  &lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;Part 3 사례&lt;/h2&gt;

&lt;p&gt;3부에서는 구체적인 프로젝트나 사례를 가지고 설명한다. 구글에서 SRE가 어떤 일을 처리하고 어떻게 접근하는지를 볼 수 있고 구글의 시스템을 엿볼 수 있어서 개발자로서도 재미있는 부분이었다. 개별 사례를 정리하기는 무리이니 인상적인 부분만 정리한다. 특히 앞에서 얘기한 &quot;우린 구글이 아니다&quot;를 많이 생각한 부분이기도 한데 분산 크론을 구현하거나 마이크로서비스에서 연속적인 장애를 막기 위해 처리하는 사례에서 많이 놀랐다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;우리는 'SRE'에서 'E'가 우리 조직의 특성을 정의한다고 믿고 있으므로 최소 50%의 시간을 엔지니어링에 투자하려고 노력한다. 남은 50% 중에서는 25% 정도를 비상대기에 사용하고 나머지 25%는 프로젝트 업무가 아닌 다른 운영 업무에 할애한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;운영 업무의 부족은 SRE팀에게 있어서는 당황스러운 부분이다. 프로덕션 환경을 너무 오래 접하지 못한다면 자신감이 너무 지나치거나 혹은 부족해질 수 있으며, 더 큰 문제는 실제 환경과 SRE가 보유한 지식 간의 차이가 장애가 발생한 후에야 비로소 드러난다는 점이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;우리의 규모와 변화의 속도를 고려하면 사건 사고는 필연적인 것이다.&lt;br&gt;
  ...중략...&lt;br&gt;
  이런 장애들로부터 계속해서 학습할 수 있는 정규화된 절차를 갖지 않는다면 이런 장애들은 무한정 반복될 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;SRE가 엔지니어링에 많은 투자를 하고 있기는 하지만 소프트웨어 개발 조직은 아니므로 운영에 대한 부분에도 계속 신경 쓰고 있다는 것을 알 수 있다. 추측건대 전통적인 운영조직을 SRE로 바꾸면서 엔지니어링을 강조하게 되지만 실제로는 운영업무가 나머지 반이므로 지금은 운영업무에 대해 감이 너무 적어지지 않도록 계속 유지하는 것 같다. 특히 운영에 문제가 없어서 잘 동작하는 경우 SRE가 개입할 일이 적어지면 프로덕션에 대해 감이 멀어져서 생기는 잠재적인 문제를 해결하기 위해 노력하는 것도 인상적이었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;어떤 종류의 장애도 발생할 수 있다는 생각보다는 모든 것이 잘못될 수 있다는 생각을 갖는 것은 실제로 발생할 긴급 사태를 대비하기 위한 중요한 과정이다. 가능한 모든 재난의 조합과 각 재난에 대응하기 위한 계획을 세워두면 적어도 하룻밤의 숙면을 보장한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;한편으로는 SRE나 DevOps에 관심이 있지만 나는 소프트웨어 엔지니어로서의 경력을 계속 가져왔기 때문에 대부분 접근방법도 소프트웨어 엔지니어링에 치중되어 있다는 생각이 들었다. 각종 사례를 읽다 보니 나는 좀 더 운영 쪽 마인드와 접근방법을 배울 필요가 있겠다 싶었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;무언가를 배우는 데 있어 과거에 있었던 일을 문서로 남기는 것보다 나은 방법은 없다. 기록은 다른 누군가의 실수를 바탕으로 학습을 하는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;포스트모텀은 SRE에게는 필수적인 도구다.&lt;br&gt;
  ...중략...&lt;br&gt;
  포스트모텀은 불이익을 주기 위한 것이 아니다. 회사 전체가 실패로부터 새로운 것을 배울 수 있는 기회인 것이다.&lt;br&gt;
  ...중략...&lt;br&gt;
  서로를 비난하지 않는 포스트모텀은 SRE 문화의 신조다. 실제로 포스트모텀 과정에서 누군가를 비난하는 상황을 완전히 방지하려면 어떤 개인이나 팀의 실수나 부적절한 조치를 지목하지 않고 장애를 유발한 원인을 판단하는 데 집중해야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;포스트모텀이나 문서로 남기는 부분은 그동안 해온 접근이 틀리진 않았구나 하는 생각과 구체적인 사례를 보니 더 개선할 부분도 꽤 있겠다는 생각도 들었다.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;Part 4 관리&lt;/h2&gt;

&lt;p&gt;4부에서는 SRE 조직은 운영하고 다른 팀과 협업하는 관리 측면을 얘기하는데 내가 관리자는 아니다 보니 확 다가오진 않았다. 나중에 비슷한 고민을 할 때 참고해 보면 좋을 것 같기는 하다. 특히 다른 팀과 SRE의 협업 관점은 생각해 볼 만한 부분도 많고 구글도 개발조직이 SRE를 호의적으로 받아들이지 않는다는 느낌도 있었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;SRE 지원자는 찾기도 어려울 뿐 아니라 효과적으로 면접을 진행하기는 더욱 어렵다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;구글에서도 어려운 거 보면 아직은 SRE는 역할이 업계에 제대로 자리 잡은 건 아닌 것 같다. 아마 시간을 들여서 책을 쓰고 사이트도 만들고 하는 것이 이런 이유 때문이 아닐까 싶다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;엔지니어들은 산만한 주변 환경으로 인해 여러 가지 방식으로 인지적 몰입 상태를 이루지 못한다.&lt;br&gt;
  ...중략...&lt;br&gt;
  주의가 분산되는 상황을 최소화하기 위해서는 컨텍스트 전환(context switching)을 최소화해야 한다. 일부 방해 요소는 불가피하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
막연하게 SRE라는 용어만 사용하고 있었는데 책을 다 읽고 나니 많이 구체화한 느낌이다. 아직도 그래서 SRE가 뭐야? 라고 하면 너무 많은 생각이 스쳐 지나가서 잘 정리 안 되긴 하지만....&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/uTEL8Ff1Zvk?rel=0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;마지막으로 Google에서 올린 &lt;a href=&quot;https://youtu.be/uTEL8Ff1Zvk&quot;&gt;What's the Difference Between DevOps and SRE?&lt;/a&gt;라는 영상을 공유한다. 5분짜리 영상이지만 DevOps와 SRE가 어떻게 다른지를 이해하기 쉽다고 생각한다. &lt;strong&gt;&quot;If you think about DevOps as a philosophy, SRE is a prescriptive way of accomplishing that philosophy.&quot;&lt;/strong&gt;가 핵심이라고 생각하고 있다.&lt;/p&gt;

&lt;h1&gt;“class SRE implements DevOps”&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://blog.outsider.ne.kr/1358?commentInput=true#entry1358WriteComment&quot;&gt;댓글 쓰기&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;http://feeds.feedburner.com/~r/rss_outsider_dev/~4/LTGtdhHK7Vk&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot;&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>[Book] 사이트 신뢰성 엔지니어링</title>
    <updated>2018-03-03T18:22:01+09:00</updated>
    <dc:date>2018-03-03T18:22:01+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>오종빈</name>
    </author>
    <id>http://ohyecloudy.com/pnotes/archives/gitlab-self-approval/</id>
    <link href="http://ohyecloudy.com/pnotes/archives/gitlab-self-approval/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;&lt;img src=&quot;http://ohyecloudy.com/pnotes/assets/2018-03-04-gitlab-self-approval-00.jpg&quot; alt=&quot;/pnotes/assets/2018-03-04-gitlab-self-approval-00.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;작업 환경에 관련된 건 뭐든지 최악을 대비한다. 내가 없어도 원하는 건 할 수 있는 상황으로 만들어야 삶이 편하다. 우선은 돌아가니깐 출근 후에 관련된 일감(task)이나 메일을 보고 개선하거나 좀 더 두고 보는 결정을 하면 된다.&lt;/p&gt;
&lt;p&gt;‘&lt;a href=&quot;https://docs.gitlab.com/ee/user/project/merge_requests/merge_request_approvals.html&quot;&gt;Merge request approvals&lt;/a&gt;’ 기능을 켰다. 필요 승인자를 2명으로 설정했다. 여기서 걱정이 생긴다. 만약 승인자가 없는 경우에 merge 해야 할 상황이 생기면 어떻게 하나? 그래서 &lt;a href=&quot;https://docs.gitlab.com/ee/user/project/merge_requests/&quot;&gt;merge request&lt;/a&gt;에 댓글로 ’&lt;b&gt;셀프 승인&lt;/b&gt;‘을 달면 bot 계정이 나타나서 merge 하는데 필요한 승인을 하게 했다. &lt;a href=&quot;http://ohyecloudy.com/pnotes/archives/gerrit-code-review-2014-01-2017-03/&quot;&gt;gerrit&lt;/a&gt;은 더 느슨했다. merge 점수 제한이 2점일 경우 스스로 2점을 주고 merge 할 수 있었다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;제가 어제 퇴근 전에 merge 한 코드가 잘못됐습니다. 그래서 수정을 했는데, 시간이 조금 늦었죠. 동작하는 걸 확인하고 주위를 둘러보니 제가 올린 merge request를 승인할 수 있는 프로그래머가 없더라구요. 그래서 merge를 못 했습니다. 오늘 날짜 데일리 빌드는 클라이언트 크래시가 날 겁니다. 제가 올려놓은 merge request 좀 빨리 봐주세요. 아~ 빨리 한 명 더 와야 하는데.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;개구멍은 만들어놨다. 적어도 이런 일을 벌어지지 않는다. 이제 좀 더 다듬을 차례다. KWH 팀장이 좋은 의견을 많이 줬다. ‘셀프 승인’ 댓글 명령을 ’&lt;b&gt;핫픽스&lt;/b&gt;’ 명령과 ’&lt;b&gt;사소함&lt;/b&gt;’ 명령으로 대체했다. 동작이 아닌 의도를 나타낸다. 언제 써야 하는지 따로 설명할 필요 없다. bot이 나타나 merge request에 승인하고 난 후 &lt;a href=&quot;https://slack.com/&quot;&gt;slack&lt;/a&gt; 프로그래머 채널에 알리게 했다. 무분별한 사용을 막음과 동시에 사용법도 알려주는 용도였다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;리뷰를 염두에 둔 커밋을 만드는 게 가장 큰 장점이라 생각한다. 2점 이상 돼야 merge 할 수 있는 규칙. 커밋을 올린 사람도 2점을 줄 수 있는 느슨한 규칙을 사용했다. 느슨한 규칙을 사용했어도 리뷰를 염두에 둔 커밋을 만들 게 된다는 건 코드 품질 향상에 크게 기여한다고 생각한다. - &lt;a href=&quot;http://ohyecloudy.com/pnotes/archives/gerrit-code-review-2014-01-2017-03/&quot;&gt;#gerrit #codereview 사용 소감&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;그래도 다른 사람 확인 없이 merge 할 수 있게 하는 건 막아야 하지 않을까요? 코드 리뷰가 가진 가치 중에 방점을 어디에 두느냐에 따라 개구멍에 대한 태도가 다르다. 팀 전체 코드 품질 유지를 가장 큰 가치로 생각한다면 거부감이 들 수도 있을 것 같다. &lt;b&gt;난 리뷰를 염두에 둔 커밋을 만드는 것 자체가 가장 큰 장점이라고 생각해서 스스로 merge 할 방법을 열어놔도 문제없다고 생각한다&lt;/b&gt;.&lt;/p&gt;
&lt;p&gt;jenkins를 사용했다. &lt;a href=&quot;https://docs.gitlab.com/ce/user/project/integrations/webhooks.html&quot;&gt;gitlab webhook&lt;/a&gt;을 추가하고 댓글이 달릴 때마다 발동되게 했다. &lt;a href=&quot;https://github.com/jenkinsci/gitlab-plugin&quot;&gt;jenkins gitlab&lt;/a&gt; 플러그인에서 댓글을 필터링해서 jenkins job을 시작한다. 봇 계정 &lt;a href=&quot;https://docs.gitlab.com/ce/user/profile/personal_access_tokens.html&quot;&gt;personal access tokens&lt;/a&gt;를 사용해 merge request를 승인했다. 사용한 jenkins 플러그인은 &lt;a href=&quot;https://plugins.jenkins.io/http_request&quot;&gt;HTTP Request&lt;/a&gt;. slack 채널에 알리는 건 &lt;a href=&quot;https://plugins.jenkins.io/slack&quot;&gt;slack notification&lt;/a&gt; 플러그인을 사용했다.&lt;/p&gt;
&lt;img src=&quot;http://feeds.feedburner.com/~r/ohyecloudy-network/~4/NQFJOQXvpU4&quot; height=&quot;1&quot; width=&quot;1&quot; alt=&quot;&quot;&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>#gitlab merge에 승인(approval) 두 개가 필요한 환경에서 개구멍 만들어 놓기</title>
    <updated>2018-03-04T00:00:00+09:00</updated>
    <dc:date>2018-03-04T00:00:00+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>delmadang</name>
    </author>
    <id>http://blog.naver.com/delmadang/221228575035</id>
    <link href="http://blog.naver.com/delmadang/221228575035"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;&lt;p&gt;뇌과학자이자 정신과 전문의이신 어느 저명한 박사님으로부터 메일이 왔다. 지난 편을 읽으셨고 참고하라고 자료를 보내 주셨다. 옛날에 SBS 호기심천국에서 카이스트 교수님으로부터 편지가 왔다고 소개하면서, 카이스트 교수님이 보신다고 생각하니까 갑자기 긴장이 되더라고 임성훈 씨가 하는 얘기를 들었는데, 그 마음이 갑자기 공감이 된다. (ㅋㅋ) 자자~~ 긴장하지 말자. 내 모습 이대로~! 그런데 뇌과학은 인문계열일까 자연계열일까? 물론 세상 만사를 전부 두부 자르듯이 인문, 자연으로 정확히 나눌 수는 없을 것이다. 사람도 자연의 일부이기 때문이다. 그럼에도 인문과 자연으로 구분하는 방식이 별로 이상하다고 여겨지지 않는 것은.......&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>&lt;강한 인공지능론&gt; 9. (정의) 세상과 마음의 경계</title>
    <updated>2018-03-14T11:29:40+09:00</updated>
    <dc:date>2018-03-14T11:29:40+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>유병후</name>
    </author>
    <id>https://libsora.so/posts/apply-jupyter-into-blog/</id>
    <link href="https://libsora.so/posts/apply-jupyter-into-blog/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;h2 id=&quot;why-jupyter&quot;&gt;why jupyter?&lt;/h2&gt;

&lt;p&gt;얼마 전에 &lt;a href=&quot;https://colab.research.google.com&quot;&gt;google colabratory&lt;/a&gt; 라는 서비스가 있다는 소리를 들었다.
&lt;a href=&quot;http://jupyter.org&quot;&gt;jupyter&lt;/a&gt;를 구글 서버 위에서 사용할 수 있다고 하더라.&lt;/p&gt;

&lt;p&gt;jupyter라는게 있다는걸 이미 알고 있었지만 나는 문서 공유를 중요하게 생각해서 jupyter를 사용하지 않았다.
웹기반으로 만들어진 markdown 편집기 중에는 구글 드라이브를 저장소로 사용하는게 있다.
이런 툴을 사용하면 어떤 컴퓨터에서 작업하든 기존에 수정하던 문서를 이어서 편집할 수 있다.
jupyter는 로컬에 설치해서 사용하는 프로그램이다보니 편집이 모든 환경에서 가능하지도 않고 문서 공유도 쉽지 않아 보이더라.&lt;/p&gt;

&lt;p&gt;하지만 google colabratory가 등장하면서 내가 jupyter를 안쓸 이유가 사라졌다.&lt;/p&gt;

&lt;p&gt;나는 markdown 문법을 좋아한다.
웬만하면 markdown 문법으로 글을 쓰고싶다.
하지만 구글에서 공식적으로 만든 서비스 중에서 markdown을 쓸 수 있는게 없는거같더라.
구글 드라이브에서 markdown을 쓰려면 StackEdit같은 서드파티를 이용해야 한다.
하지만 jupyter는 markdown을 지원한다.
google colabratory가 등장하면서 기존보다 좋아졌다.&lt;/p&gt;

&lt;p&gt;그이번 기회에 jupyter로 글을 써서 블로그에 올리는게 가능하게 블로그 빌드 시스템을 고치기로 했다.&lt;/p&gt;

&lt;h2 id=&quot;hugo-jupyter&quot;&gt;hugo-jupyter&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/knowsuchagency/hugo_jupyter&quot;&gt;hugo_jupyter&lt;/a&gt; 라는 라이브러리가 있다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Publish Jupyter notebooks with Hugo&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;한줄 설명만 봐도 내가 필요로 하는 기능이 있다.
이것을 사용하면 jupyter를 hugo에서 사용하는게 가능하더라.&lt;/p&gt;

&lt;p&gt;그리고 남이 짠건 나랑 안맞는 부분이 있다. 메타데이터를 다루는 방식이 내 취향이 아니다.
hugo로 글을 쓸라면 글 제목, 작성일, 작성자 같은 메타데이터를 문서에 넣어야한다.
hugo-jupyter는 jupyter에서 지원하는 notebook metadata를 이용해서 문제를 해결했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;hugo-jupyter-1.png&quot; alt=&quot;hugo-jupyter-1&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;hugo-jupyter-2.png&quot; alt=&quot;hugo-jupyter-2&quot;&gt;&lt;/p&gt;

&lt;p&gt;하지만 나는 jupyter를 주로 쓰진 않을 것이다.
나는 google colabratory를 주로 사용할거다.
근데 google colabratory에서 notebook metadata를 편집하는 기능을 찾지 못했다.
아무래도 없는거같다.&lt;/p&gt;

&lt;h2 id=&quot;nbconvert&quot;&gt;nbconvert&lt;/h2&gt;

&lt;p&gt;jupyter를 markdown으로 export할 수 있다면 기존의 문서와 같은 방식으로 다룰수 있을 것이다.
jupyter에 내장된 &lt;a href=&quot;https://github.com/jupyter/nbconvert&quot;&gt;nbconvert&lt;/a&gt;를 이용하면 여러가지 포맷으로 jupyter 문서를 출력할 수 있다.
nbconvert가 지원하는 포맷 중에 markdown이 있더라.
markdown으로 출력하면 matplotlab로 그린 그래프도 이미지 파일로 만들어져서 나오더라.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import matplotlib.pyplot as plt
import numpy as np

x = np.arange(20)
y = [x + np.random.randn(1) for x in x]
a, b = np.polyfit(x, y, 1)
plt.plot(x, y, 'o', np.arange(20), a*np.arange(20)+b, '-');
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;./article_4_0.png&quot; alt=&quot;png&quot;&gt;&lt;/p&gt;

&lt;p&gt;nbconvert를 markdown으로 출력하는게 괜찮아보여서 이것을 골랐다.&lt;/p&gt;

&lt;p&gt;변환할때는 아래의 명령을 이용했다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;jupyter nbconvert *.ipynb --to markdown \
  --MarkdownExporter.file_extension=.mkdn \
  --output=article \
  --NbConvertApp.output_files_dir=.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;latex&quot;&gt;LaTeX&lt;/h2&gt;

&lt;p&gt;내가 LaTeX를 쓸 일이 없다보니 블로그에 붙이는건 생각도 안하고 있었다.
그런데 google colabratory 예제를 보니까 LaTeX가 들어있더라.
언제 쓸진 모르겠지만 jupytey 가능한건 일단 넣고 싶었다.
그래서 아래의 두 LaTeX 수식을 렌더링 하려고 삽질했다.&lt;/p&gt;

&lt;p&gt;한줄짜리 $e^{i\pi} + 1 = 0$ 수식&lt;/p&gt;

&lt;p&gt;조금 많이 복잡한 수식&lt;/p&gt;

&lt;p&gt;$\begin{bmatrix}
  1. &amp;amp; 1. &amp;amp; 1. \\
  1. &amp;amp; 1. &amp;amp; 1. \\
\end{bmatrix} +
\begin{bmatrix}
  1. &amp;amp; 2. &amp;amp; 3. \\
  4. &amp;amp; 5. &amp;amp; 6. \\
\end{bmatrix} =
\begin{bmatrix}
  2. &amp;amp; 3. &amp;amp; 4. \\
  5. &amp;amp; 6. &amp;amp; 7. \\
\end{bmatrix}$&lt;/p&gt;

&lt;p&gt;생각을 비우고 남들 한걸 따라하면 웬만해서는 잘 돌아간다.
&lt;a href=&quot;https://takuti.me/note/hugo-kramdown-and-katex/&quot;&gt;Hugo meets kramdown + KaTeX&lt;/a&gt; 라는 글이 있더라.
&lt;a href=&quot;https://github.com/Khan/KaTeX&quot;&gt;KaTeX&lt;/a&gt;를 붙였다.&lt;/p&gt;

&lt;p&gt;하지만 남들이 코드 짠거 그대로 복붙한게 항상 잘 돌아간다면 프로그래머라는 쓸모없는 존재일거다.
한줄짜리 LaTeX에서는 문제가 없지만 2차원 행렬이 그려지지 않더라.
세상에는 아직 프로그래머가 쓸모있나보다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;latex-fail.png&quot; alt=&quot;latex-fail&quot;&gt;&lt;/p&gt;

&lt;p&gt;디버거를 동원하니 렌더링이 안되는 원인을 쉽게 찾을수 있었다.
아래는 DOM을 찍어본거다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;latex-dom.png&quot; alt=&quot;latex-dom&quot;&gt;&lt;/p&gt;

&lt;p&gt;2차원 행렬을 표기한 LaTeX가 한줄로 표현되지 않는다.
&lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt;으로 잘려서 여러줄로 표현되었다. 또한 &lt;code&gt;\\&lt;/code&gt;가 없다.
그래서 KaTeX가 이를 올바른 LaTeX로 인식하지 못했다.&lt;/p&gt;

&lt;p&gt;2차원 행렬의 끝에 있는 &lt;code&gt;\\&lt;/code&gt; 와 markdown 문법이 꼬여서 &lt;code&gt;\\&lt;/code&gt;가 개행으로 처리된거같다.&lt;/p&gt;

&lt;p&gt;목표는 간단하다.
&lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt; 없이 LaTeX 코드가 이어지게 만들면된다.
&lt;code&gt;\\&lt;/code&gt;를 개행이 아니라 문자로 출력하면 될거다.&lt;/p&gt;

&lt;p&gt;하지만 목표가 간단하다고 가는 길이 간단한건 아니다.
세상에는 다양한 마크다운 구현체가 있다.
그것들은 서로 렌더링 결과가 모두 같을까?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dillinger.io/&quot;&gt;dillinger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;demo-dillinger-crop.png&quot; alt=&quot;dillinger&quot;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jbt.github.io/markdown-editor/&quot;&gt;markdown editor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;demo-jbt-markdown-editor-crop.png&quot; alt=&quot;jbt markdown editor&quot;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://stackedit.io/app&quot;&gt;StackEdit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;demo-stackedit-crop.png&quot; alt=&quot;stackedit&quot;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://marxi.co/&quot;&gt;Marxico&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;demo-marxico-crop.png&quot; alt=&quot;marxico&quot;&gt;&lt;/p&gt;

&lt;p&gt;위의 마크다운 문서의 내용은 동일하다.
하지만 스샷을 잘 보면 렌더링 결과가 다르다.&lt;/p&gt;

&lt;p&gt;다행히도 나는 크로스 플랫폼을 고려할 필요가 없다.
hugo는 &lt;a href=&quot;https://github.com/russross/blackfriday&quot;&gt;blackfriday&lt;/a&gt;를 사용한다. blackfriday에서만 잘 돌아가면 된다.
나머지 markdown 구현체에서는 어떻게 렌더링되든 내가 신경 쓸 필요가 없다.&lt;/p&gt;

&lt;p&gt;줄이 &lt;code&gt;\\&lt;/code&gt;로 끝나는 경우 &lt;code&gt;\\&lt;/code&gt;를 &lt;code&gt;\\\&lt;/code&gt;(마지막은 공백문자)로 바꾸니까 마크다운이 html로 바뀔때 &lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt; 없이 &lt;code&gt;\\&lt;/code&gt;가 렌더링되더라.&lt;/p&gt;

&lt;h2 id=&quot;build-system&quot;&gt;build system&lt;/h2&gt;

&lt;p&gt;markdown에 gist나 youtube를 집어넣는 작업은 매우 귀찮다.
gist나 youtube에서 중요한건 id뿐이지만 &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;을 그대로 집어넣어야한다.&lt;/p&gt;

&lt;p&gt;markdown에는 코드를 넣는 문법이 있다.
하지만 markdown에 넣은 코드는 보여주는 목적이다.
markdown에 포함된 코드를 실행할 수 없다.&lt;/p&gt;

&lt;p&gt;markdown에는 외부 파일을 집어넣는 기능이 없다.
에러와 그것을 설명하는 과정을 마크다운 문서로 쓰면 로그와 글이 뒤섞여서 읽기 어렵다.&lt;/p&gt;

&lt;p&gt;이런 문제를 해결하고자 예전에 &lt;a href=&quot;https://github.com/if1live/maya&quot;&gt;maya&lt;/a&gt;라는 markdown 전처리기를 만들었다.
지금 내 블로그는 maya를 이용해서 빌드된다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;유사-markdown -&amp;gt; (maya) -&amp;gt; markdown&lt;/li&gt;
&lt;li&gt;markdown -&amp;gt; (hugo) -&amp;gt; static site&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;jupyter를 도입한다고 빌드 시스템을 통쨰로 엎는건 미친짓이다.
기존 글 마이그레이션은 귀찮은 작업이기 떄문이다. 그래서 살짝 고치기만 했다.
메타데이터와 jupyter 노트북을 분리하는 것도 생각해봤는데 하나의 글을 표현하기 위해 파일 2개를 쓸 필요가 있나 싶어서 합쳤다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;jupyter -&amp;gt; (nbconvert) -&amp;gt; 유사-markdown&lt;/li&gt;
&lt;li&gt;유사-markdown -&amp;gt; (maya) -&amp;gt; markdown&lt;/li&gt;
&lt;li&gt;markdown -&amp;gt; (hugo) -&amp;gt; static site&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;sample-articles&quot;&gt;sample articles&lt;/h2&gt;

&lt;p&gt;빌드 결과가 어떻게 보이는지는 직접 보는게 확실하다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://libsora.so/posts/markdown-test/&quot;&gt;markdown sample&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;hugo는 &lt;a href=&quot;https://github.com/russross/blackfriday&quot;&gt;blackfriday&lt;/a&gt; 라는 markdown processor를 이용한다.&lt;/li&gt;
&lt;li&gt;blackfriday 에서 지원하는 기능을 볼 수 있다.&lt;/li&gt;
&lt;li&gt;LaTeX 예제 포함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://libsora.so/posts/maya-test/&quot;&gt;maya sample&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://github.com/if1live/maya&quot;&gt;maya&lt;/a&gt;를 이용해서 생성된 문서이다.&lt;/li&gt;
&lt;li&gt;gist, youtube, 파일 첨부 등의 기능을 지원&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://libsora.so/posts/jupyter-test/&quot;&gt;jupyter sample&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>Jupyter를 블로그에 적용하기</title>
    <updated>2018-03-10T09:00:00+09:00</updated>
    <dc:date>2018-03-10T09:00:00+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>유병후</name>
    </author>
    <id>https://libsora.so/posts/golang-hugo-is-down/</id>
    <link href="https://libsora.so/posts/golang-hugo-is-down/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;h2 id=&quot;go-get-u-github-com-gohugoio-hugo-fail&quot;&gt;go get -u github.com/gohugoio/hugo : FAIL&lt;/h2&gt;

&lt;p&gt;2018년 3월 9일, 블로그 빌드 스크립트 개선 작업을 했다.
별것도 고치지 않고 푸시했는데 travis-ci에서 빌드 도중 문제가 발생했다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2018년 3월 8일까지는 멀쩡하게 빌드가 됐었다.

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://travis-ci.org/if1live/libsora.so/builds/350871368&quot;&gt;travis-ci build log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2018년 3월 9일 밤에 빌드를 시도한건 실패했다.

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://travis-ci.org/if1live/libsora.so/builds/351287207&quot;&gt;travis-ci build log&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;실패 기록을 뜯어보고 이유를 찾았다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ go get -u github.com/gohugoio/hugo
# github.com/gohugoio/hugo/output
../../gohugoio/hugo/output/docshelper.go:4:2: imported and not used: &quot;fmt&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;golang은 사용하지 않는 import가 있으면 컴파일 에러로 취급한다.
사용되지 않은 import fmt가 코드에 끼어있어서 컴파일 에러가 나면서 hugo 설치에 실패한거 같더라.&lt;/p&gt;

&lt;p&gt;그래서 코드를 뜯어봤다.
내가 블로그를 빌드하기 한 시간 전에 hugo에 올라온 &lt;a href=&quot;https://github.com/gohugoio/hugo/commit/64cec07293a789e28a68885aede78cad392afbef#diff-4aecfa2c2f6afdb6a723bf5316c3d870&quot;&gt;커밋&lt;/a&gt;이 있었다.
이것이 컴파일 에러의 원인이었다. (고작 한시간 차이로 엿먹을줄이야!)
개발자가 실수로 컴파일되지 않는 코드를 master에 그대로 올렸고 이로인해서 hugo가 설치되지 않은거였다.&lt;/p&gt;

&lt;p&gt;hugo를 git master branch가 아닌 안정버전에서 받아서 설치하는게 가능하다면 문제를 해결할 수 있을것이다.&lt;/p&gt;

&lt;h2 id=&quot;dep-fail&quot;&gt;dep -&amp;gt; FAIL&lt;/h2&gt;

&lt;p&gt;원인은 찾았으니 우회하면 된다.
얼마전에 &lt;a href=&quot;https://golang.github.io/dep/&quot;&gt;dep&lt;/a&gt;라는 golang의 의존성 관리 프로그램을 배웠다.
python의 pip, node.js의 npm, rust의 cargo같은 프로그램이다.
이걸 사용해서 특정 버전의 라이브러리르 설치할수 있다.
dep를 사용해서 안정버전 hugo를 설치하면 될거같다.&lt;/p&gt;

&lt;p&gt;dep를 사용하는 방법은 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;dep ensure -add github.com/foo/bar&lt;/code&gt;를 설치한다.&lt;/li&gt;
&lt;li&gt;내가 짜는 golang 소스에서 &lt;code&gt;github.com/foo/bar&lt;/code&gt;를 사용한다&lt;/li&gt;
&lt;li&gt;새로운 환경에서는 &lt;code&gt;dep ensure&lt;/code&gt;를 이용해서 관련된 패키지를 설치한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 방식대로 했다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;dep ensure -add github.com/gohugoio/hugo&lt;/code&gt;로 hugo를 설치한다&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;dep ensure&lt;/code&gt;로 의존성 걸린 패키지를 다시 설치해본다&lt;/li&gt;
&lt;li&gt;hugo가 설치되지 않는다.&lt;/li&gt;
&lt;li&gt;????&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;문제가 발생했다.
hugo는 &lt;code&gt;dep ensure -add&lt;/code&gt;로 추가를 해도 &lt;code&gt;dep ensure&lt;/code&gt;를 하면 사라진다.
근데 &lt;code&gt;dep ensure&lt;/code&gt;를 할수 없으면 의미가 없다.
그래서 &lt;code&gt;dep ensure&lt;/code&gt;의 설명을 읽어봤다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ dep ensure -examples
dep ensure

    Solve the project's dependency graph, and place all dependencies in the
    vendor folder. If a dependency is in the lock file, use the version
    specified there. Otherwise, use the most recent version that can satisfy the
    constraints in the manifest file.
...
dep ensure -add github.com/pkg/foo github.com/pkg/foo/bar

    Introduce one or more dependencies, at their newest version, ensuring that
    specific packages are present in Gopkg.lock and vendor/. Also, append a
    corresponding constraint to Gopkg.toml.

    Note: packages introduced in this way will disappear on the next &quot;dep
    ensure&quot; if an import statement is not added first.
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dep ensure는 내 golang 소스를 읽어서 설치한 패키지가 진짜로 import 되어있는지 확인한다.
만약 import한적 없는 패키지라면 쓸모없는 패키지일테니 목록에서 지워버린다.
불필요한 패키지를 목록에서 제거하면 빌드에는 영향을 주지 않으면서 패키지를 받는 속도가 빨라지니 의도는 이해된다.&lt;/p&gt;

&lt;p&gt;하지만 hugo는 내 프로젝트에 import되는 라이브러리가 아니다.
이것을 cli툴로 쓰고 싶은거다. cli툴을 dep로 설치하고 싶을때는 어떻게 해야되는가?
&lt;a href=&quot;https://golang.github.io/dep/docs/introduction.html&quot;&gt;dep 문서&lt;/a&gt;를 읽으면 답을 찾을 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Dep is a tool intended primarily for use by developers, to support the work of actually writing and shipping code. It is not intended for end users who are installing Go software - that’s what go get does.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;dep는 그런 목적으로 만든게 아니니까 &lt;code&gt;go get&lt;/code&gt;을 그냥 쓰랜다.&lt;/p&gt;

&lt;h2 id=&quot;go-get-fail&quot;&gt;go get -&amp;gt; FAIL&lt;/h2&gt;

&lt;p&gt;go get으로 특정 버전의 패키지를 깔수 있다면 문제를 해결할수 있을것이다.
하지만 그게 안된다. go get에는 그런 기능이 없다.&lt;/p&gt;

&lt;p&gt;go get는 저장소에서 소스를 받아서 그대로 설치한다.
go 1.5까지는 master 브렌치에서 소스를 받았다. 그래서 master branch가 없는 저장소는 go get 하면 에러났다. (당해봐서 안다)
go 1.6부터는 default 브렌치에서 소스를 받는다.
오늘 사용한 버전은 go 1.10인데 동작은 바뀐게 없다.&lt;/p&gt;

&lt;p&gt;go get으로 특정 브렌치나 커밋, 태그의 소스를 받는 방법이 있지 않을까?
없다. 신기하게도 그런 기능은 아직도 추가가 되지 않았다. 나중에는 생길지 모르지만 go 1.10까지는 없다.&lt;/p&gt;

&lt;p&gt;남들 하는거 보니까 라이브러리의 특정 태그를 쓰고싶을때는 이런 방법을 쓰더라.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;go get github.com/foo/bar&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;$GOPATH/src/github/foo/bar로 이동&lt;/li&gt;
&lt;li&gt;golang 패키지 설치는 별거 아니다. 그냥 &lt;code&gt;git clone&lt;/code&gt; 받은거다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout i-need-develop-branch&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;golang 패키지는 git clone 받은 것과 동일하기 떄문에 go get을 사용하지 않는 경우도 있다.
go get으로 받아서 패키지가 설치될 위치에 맞춰서 git clone 받아도 똑같이 작동한다.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;summary&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;go get&lt;/code&gt;과 &lt;code&gt;dep&lt;/code&gt;에 엿먹어서 그냥 써본 글이다.&lt;/p&gt;

&lt;p&gt;몇가지 우회법은 알고 있지만 그거 적용해서 문제 수정후 hugo가 복구되었을때 빌드 스크립트를 되돌리는건 귀찮다.
hugo 개발자가 빌드 박살난걸 깨닫고 버그를 수정하는게 더 빠를거같다.
golang의 패키지 관리에서 엿먹은게 이번이 처음이 아니다. 그럼에도 golang만의 장점이 좋아서 쓰고있었다.
하지만 오늘 당한건 golang을 탈주할 계기가 될거같다.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>go get {command-line-tool} FAILED</title>
    <updated>2018-03-10T09:00:00+09:00</updated>
    <dc:date>2018-03-10T09:00:00+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>신현석</name>
    </author>
    <id>https://hyeonseok.com/soojung/web/2018/03/08/833.html</id>
    <link href="https://hyeonseok.com/soojung/web/2018/03/08/833.html"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;구글이 &lt;a href=&quot;https://www.blog.google/products/g-suite/bringing-power-amp-gmail/&quot;&gt;AMP를 이메일에서 사용&lt;/a&gt;할 수 있게 확장한다고 한다. 아직은 사용해 볼 수 없지만 올해 말 쯤에 지메일에서 지원하게 할 예정이다. 개발자라면 등록 후 테스트 해 볼 수 있다.&lt;/p&gt;

&lt;p&gt;기존의 이메일은 사용자 상호 작용이 필요한 경우 링크로 사이트에 연결시켜주는 정도 밖에 할 수가 없었다. 메일에서 CSS로 인터랙티브한 콘텐츠를 만들 수 있게 해주는 도구들도 몇 있었지만 호환성 높게 만드는 것은 쉽지 않았다. &lt;a href=&quot;https://www.youtube.com/watch?v=p8Eo4gAoDBA&quot;&gt;AMP 이메일 발표 영상&lt;/a&gt;의 핀터레스트 데모를 보면 화면 플로우도 있고 서버와 통신해서 메일 내용을 업데이트 하는 것까지 가능하다. 이메일 안에 AMP로 만들어진 웹앱을 넣을 수 있다고 생각하면 된다.&lt;/p&gt;

&lt;p&gt;매우 혁신적이지만 실제로 사용이 가능해지려면 넘어야 할 산도 많다. AMP 이메일은 웹문서가 아니기 때문에 기존의 HTML 이메일과 형식이 다르다. 그래서 AMP 이메일을 사용하려면 새로운 마임타입을 추가해서 콘텐츠를 한 벌 더 만들어야 한다. 텍스트, HTML, AMP 세가지로 메일을 만들어 보내야 한다. 기능이 좋아졌으니 추가 콘텐츠 만드는 것은 감수 할 수 있다고 해도 실제 얼마나 많은 사용자에게 도달할지는 또 다른 문제다. 지메일이나 구글 메일 클라이어트를 사용하는 사용자는 AMP 이메일을 사용할 수 있겠지만 아웃룩이나 애플 메일, 그 밖의 수 많은 웹메일 사이트에서 메일을 사용하는 사용자는 쓸 수 없을 가능성이 높다. 얼마나 많은 메일 클라이언트들이 AMP 이메일을 지원할지가 관건이다. AMP 이메일을 지원하는 메일 클라이언트가 많아져도 지원하지 않는 클라이언트도 역시 많을 수 밖에 없기 때문에 HTML 버전 이메일과 랜딩용 웹 URL은 필수적이다. 다만 AMP는 브라우저에서 잘 작동하기 때문에 AMP 이메일 콘텐츠를 랜동용 URL에 바로 올려도 사용이 가능하다는 점이 그 중 다행이다.&lt;/p&gt;

&lt;p&gt;AMP에 대해서 이러 저러한 말이 많다. 냉정하게 보자면 AMP는 구글의 전유물이기 때문이다. 지메일 사용자가 얼마나 많은지는 잘 모르겠지만 AMP 이메일도 혼자 독주하지 않게 경계해야 한다. 요즘의 분위기라면 구글보다는 기술을 적용하는 사람들을 더 경계해야 하지만 말이다. 물론 이런 과정을 거쳐서 혁신이 일어나기 떄문에 이런 방향을 나쁘다고 말 할 필요는 없다. AMP에 대한 많은 우려는 둘째치고 시대에 뒤떨어져 있는 기존 이메일 시장에서 계속해서 인터랙티브한 콘텐츠를 볼 수 있게 시도하는 구글은 일단 박수 받을 자격이 있다.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>AMP 이메일</title>
    <updated>2018-03-08T07:25:00+09:00</updated>
    <dc:date>2018-03-08T07:25:00+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>Andrew</name>
    </author>
    <id>http://www.andrewahn.co/silicon-valley/yc-investor-school-day-1/</id>
    <link href="http://www.andrewahn.co/silicon-valley/yc-investor-school-day-1/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;YC (Y Combinator) 에서 Investor School 이라는 온라인 공개강의(MOOC)를 열었는데 운 좋게 직접 YC 사무실에서 수업을 들을 수 있는 기회를 얻게 되었다. 4일 동안 스타트업 투자에 관심 있는 엔젤 투자자들을 대상으로 투자 철학, 기본 원칙, 주의할 점, 트렌드 등에 대해 강의를 하고 투자자들 사이에 네트워킹을 할 수 있는 자리였다. 멋 모르고 집어 넣은 몇 천 만원 상당의 투자금을 얼마전에 날려먹은 (&lt;img src=&quot;https://s.w.org/images/core/emoji/2.4/72x72/1f62d.png&quot; alt=&quot;😭&quot; class=&quot;wp-smiley&quot; style=&quot;height: 1em; max-height: 1em;&quot;&gt;) 아주 슬픈 사건도 있고, &lt;a href=&quot;http://www.andrewahn.co/industry-trends/life-of-a-vc/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;예전 글&lt;/a&gt;에서도 밝혔듯이 나의 커리어 중 언젠가는 벤처 투자자가 되고 싶은 마음이 있기에 바쁜 와중에도 무리해서 시간을 내어 열심히 수업을 들었다.&lt;/p&gt;
&lt;p&gt;MOOC 강의라 수업 모든 내용이 공개되어 있는 상태에서 내가 블로그를 통해 강의 내용을 재탕해서 옮겨 놓는 것은 의미가 없고, ‘&lt;a href=&quot;http://www.andrewahn.co/silicon-valley/masters-of-scale/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;실리콘밸리 전설들의 수다: Masters of Scale&lt;/a&gt;’ 처럼 개인적으로 주요하다고 느낀 점만 짧게 요약하고, 그 위에 내가 느꼈던 점과 비디오로 제공되지 않은 Q&amp;amp;A 및 토론 내용들을 정리해 본다.&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Day 1 강사&lt;/td&gt;
&lt;td&gt;Geoff Ralston (YC Partner)&lt;br&gt;
Sal Altman (YC President)&lt;br&gt;
Kirsty Nathoo (YC Partner)&lt;br&gt;
Carolynn Levy (YC Partner)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;&lt;strong&gt;스타트업에 투자하는 이유&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;제프와 샘 모두 청중에게 스타트업에 투자하는 이유가 혹시 돈을 많이 벌기 위한 것인지 질문을 하였다. 200명 가까이 되는 청중 중 극히 소수만 손을 들었다. 전문 투자자가 아닌 내가 이 때 든 생각: ‘아 이런 위선자들! 투자자가 투자 수익이 목표가 아니라는 것이 상식적으로 말이 안되지!’ 그러다가 샘 알트만과 (다음 날) 마이클 사이벨이 말한 내용들을 며칠 동안 곱씹어보니 ‘스타트업 투자는 물론 돈이 벌리지 않으면 하지 않겠지만, 돈을 버는 것 못지 않게 중요한 중요한 기준과 가치들이 있구나’로 개인적인 결론을 내리게 되었다. 샘 알트만에 의하면 그런 중요한 것들의 예는 다음과 같다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;interesting, energizing, fun (흥미롭고, 힘이 나고, 재밌다)&lt;/li&gt;
&lt;li&gt;help shape the future (미래를 여는데 도움이 된다)&lt;/li&gt;
&lt;li&gt;sometimes you make a big return (가끔씩 대박이 난다)&lt;/li&gt;
&lt;li&gt;really satisfying (개인적인 만족감이 높다)&lt;/li&gt;
&lt;li&gt;the people you’re around (스타트업에 있는 사람들은 대체적으로 긍적적이고 에너지가 넘치는데, 이들과 함께 할 수 있다는 것)&lt;/li&gt;
&lt;li&gt;humbling, get used to getting wrong (겸손의 미덕을 배울 수 있다. 아주 자주 내가 ‘틀렸음’을 인정하게 된다…)&lt;/li&gt;
&lt;li&gt;but you learn a lot (… 그러나 그런 실패들을 통해서 너무나 배우는 것들이 많다)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;strong&gt;Power law&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;샘 알트만은 스타트업 투자는 power law (멱함수/제곱함수의 법칙?)의 마음 가짐을 가져야 한다고 강하게 주장한다. 이는 즉 제일 좋은 투자 한 건이 나머지 모든 투자의 결과의 합 보다 훨씬 더 좋아야 한다는 것이다. 매번 삼진을 당해도 한 번 홈런을 치는 것이 계속해서 안타를 치는 것 보다 백 배 낫다는 것이 그의 주장. Moneyball의 ‘안타의 법칙’이 야구 및 프로 스포츠계에 혁명을 일으켰는데 샘은 이와 정 반대의 주장을 하는 것이다. 그 이유는 초기 스타트업 투자의 성공 기준이 ‘실패율’이 아닌 ‘가장 큰 성공의 규모’이기 때문이라고. 야구에 비유하자면 삼진/아웃 최소화 (= 출루율을 높임)가 목표가 아니라 아웃이 아닐 때의 야구공의 비거리가 목표인 것이다.&lt;/p&gt;
&lt;p&gt;샘은 이런 power law가 적용되는 게임에서는 ‘무엇이 잘못될 수 있을까?’라고 고민하며 투자를 심사하는 것 보다 ‘이게 만약 된다면 얼마나 클 수 있을까?’ 라고 묻는 것이 더 맞는 것 같다고 조언한다. 실증적인 데이터로 YC가 1,600개의 회사에 투자했는데 가장 잘 나가는 5개의 회사가 YC 투자 포트폴리오 회사 가치의 2/3 을 차지한다고. 그리고 이런 power law를 실현시키는 회사들을 찾기 위해서 YC는 open network를 지향 한다고 한다 (= 그 누구나 YC 홈페이지 가서 지원을 할 수 있고, 파트너들은 그 서류들을 차별하지 않고 심사한다).&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Don’t care about other investors 다른 투자자의 결정에 흔들리지 말것&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Power law와 더불어 또 중요한 투자 원칙은 다른 투자자들의 말에 휩쓸리지 말라는 것. 샘은 그의 경험상 가장 좋은 결과를 가져온 투자들은 다른 투자자들이 바보같은 아이디어라고 생각해서 거들떠 보지도 않았던 것들이라고 한다. 여기서 중요한 것은 무조건 남들과 반하는 결정을 하라는 것이 아니고 (= 이것은 그냥 헷지펀드) 자신이 가진 투자 원칙을 확고히 하고 그 기준에 따라 줏대 있게 행동하라는 것이다. 어느 유명한 사람이나 기관이 투자한다는 사실이 어짜피 실패율이 높은 상황에서 수십 배 더 높은 성공 확률로 바뀌는 것도 아닐 뿐더러, 이런 결정에 생각없이 따라간다는 것은 궁극적으로 자신의 돈과 의사결정을 외주해 버리는 꼴이기 때문에 투자자로써 발전할 수 없는 것이다.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;유니콘 회사를 찾아내는 법&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;샘 알트만에 의하면 많은 투자자들이 좋은 회사를 싸게 투자할 수 있는 방법을 찾는데 집중하는 모습을 종종 보는데, 이것은 바로 ‘penny smart, but a pound foolish (소탐대실)’의 전형적인 예라고. 그는 모든 노력을 좋은 회사를 찾는데 집중하고 발굴 후 어떻게던 투자자로써 같이 갈 수 있는 기회를 얻는게 가장 중요하다고 강조한다. 샘은 이런 power law를 실현시키는 유니콘 회사들을 찾기 위해 다음과 같은 기준을 사용한다고 한다. (참고 추후 포스팅을 통해 투자자마다 기준과 철학이 매우 다름을 알 수 있을 것이다):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;회사: 회사가 $10B (100억 달러)의 가치가 있을 것 같음. 만약 이렇다면 다른 기준들이 딱히 필요 없음 — 이런 갑오브갑 유니콘이 될 정도의 확신이 드는 경우는 너무나 드물기 때문에 이 기준 하나로도 충분하다는 뜻.&lt;/li&gt;
&lt;li&gt;창업자: ‘위대한’ 창업자 기질을 가진 사람들 위주로 선정. 샘의 투자 포트폴리오에서 그냥 그런 창업자들이 멋진 결과를 만들어 낸 적이 없다는 경험을 통해 이런 결론을 내었다고 한다. ‘위대한’ 창업자 기질에 여러가지를 포함할 수 있겠지만 그 중 가장 중요하다고 생각되는 세 가지는 의사소통 능력, 빠른 실행 능력, 그리고 창업자들 자신들이 발전하는 속도.&lt;/li&gt;
&lt;li&gt;시장: TAM (total addressable market)으로 표현되는 시장의 크기 보다 시장의 성장 속도를 더 중시. YC 파트너들이 TAM에 대해 질문할 때는 보통 10년 후 그 시장의 크기를 묻는 것이라고. 시장의 성장 속도와 미래에 대한 예측과 신념을 가지기 위해서 VC 들도 창업자 못지 않게 (혹은 더) 독립적인 사고 능력을 가지는 것이 중요하다고 한다. (위에 다른 투자자의 결정에 흔들리지 말라는 이유도 이 맥락)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;strong&gt;진짜와 가짜 트렌드를 구분하는 능력&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;투자자로서 가장 안좋은 투자는 유행에 휩쓸려 거품이 꺼졌을 때 투자금만 탈탈 털리고 교훈도 하나 얻지 못하는 경우이다. 이런 가짜 트렌드를 구분하는 방법으로 YC는 실제로 사용자들이 (비록 사용자가 적더라도) 제품과 서비스를 이용하고 사랑하고 회자 하는가를 평가한다고 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;좋은 아이디어는 대부분 처음엔 나쁜 아이디어 처럼 들린다. (레딧, 드랍박스, 에어비앤비 등)&lt;/li&gt;
&lt;li&gt;위대한 제품은 궁극적으로 어느 순간에 사람들의 입소문을 타게 되어 있다.&lt;/li&gt;
&lt;li&gt;선형적인 사고에 익숙한 인간들은 지수함수 같은 폭발적인 성장은 머리속에서 상상이 잘 안된다. 꼭 모델을 돌려봐라.&lt;/li&gt;
&lt;li&gt;사용자 규모가 커질수록 더 견고해지고 품질이 좋아지는 제품인지 생각해보라.&lt;/li&gt;
&lt;li&gt;지금 소비자들이 보이는 행동 보다 조금씩 이동하는 소비자 행동 패턴을 (shifting consumer behavior) 남 보다 미리 읽는 것이 중요하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여기서 다시 한번 확실히 느낀 것은 벤처 투자는 지금 어느 현상을 멋지게 분석해서 계량적, 논리적, 그리고 합리적인 의사결정을 하는 것 보다 미래에 ‘what it could be’에 대한 창업자의 비전이 투자자가 지금 현상을 통해 느껴지는 변화의 물결과 맞았을 때 이루어지는 부분이 더 크다는 것.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;샘과의 unofficial Q&amp;amp;A: 왜 VC의 삶을 사는가&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;수업이 끝나고 선생님(?)들에게 개인적으로 질문을 할 수 있는 시간이 있었는데 나는 샘 알트만에게 왜 성공적인 스타트업을 일궈낸 사람으로써 왜 다시 새로운 스타트업을 시작 하지 않고 투자자의 길을 선택 했는지를 물었다. 사족으로 내가 샘 알트만이 성공적인 스타트업을 창업 했었다는 사실을 알게된 경우는 십수 년 전 대학원 다닐 시절. 그 당시 샘 알트만은 학부생이었고 그의 스타트업 Loopt에 관련된 이메일을 학교 단체 이메일을 통해 종종 받곤 했었다. 나는 그 때 제일 ‘핫’ 했던 반도체 기업인 인텔과 AMD에 취업하고 싶어 나머지 회사는 무슨 일을 하는지 관심 조차 주지 않았던 상황. 당연 대기업도 아닌 그냥 어떤 어린 친구가 만든 Loopt라는 회사의 이메일은 스팸 처리 하듯이 읽지도 않고 이메일을 지우기 바빴는데 나중에 $43M 으로 엑싯했다는 소식을 듣고 헐~ 했다는…-_-; (난 역시 안돼 ㅠㅠ)&lt;/p&gt;
&lt;p&gt;Q (Andrew): Sam, you’ve had a successful career as an operator. What has led you to become an investor and not continue to pursue a life of a serial entrepreneur?&lt;/p&gt;
&lt;p&gt;A (Sam): Being an operator is really really really exciting. It’s really fun. But the lifestyle of a VC is much better for me. I can take vacations, and not try to kill myself to save the company. (회사를 운영하는 것은 너무 너무 너무 흥분되고 재밌어요. 그런데 투자자의 삶이 질이 저한테 더 좋게 느껴졌어요. 휴가도 갈 수 있고, 사활을 걸고 미친듯이 일하지 않아도 되거든요.)&lt;/p&gt;
&lt;p&gt;음… 너무 솔직한 샘-_-. 그럼 나도 당장 투자자가 되고 싶네??? ㅋ&lt;/p&gt;
&lt;p&gt;…to be continued with Day 2 notes&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;수업 자료&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://investor.startupschool.org/&quot;&gt;YC Investor School 2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.dropbox.com/s/0isekptywos3raq/Sam%20-%20Why%2C%20How%2C%20What%3F.pdf?dl=0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The Why and How of Angel Investing by Sam Altman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.dropbox.com/s/iy2gexlsfypxf1d/Kirsty%20Nathoo%20-%20Fundamentals%20of%20Investing.pdf?dl=0&quot;&gt;Investing fundamentals by Kirsty Nathoo and Carolynn Levy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.facebook.com/AndrewAhnCo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img data-attachment-id=&quot;2480&quot; data-permalink=&quot;http://www.andrewahn.co/marketing/growth-hacking-research/attachment/fb_link/&quot; data-orig-file=&quot;https://i1.wp.com/www.andrewahn.co/wp-content/uploads/2017/07/FB_link.png?fit=1452%2C364&quot; data-orig-size=&quot;1452,364&quot; data-comments-opened=&quot;0&quot; data-image-meta='{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}' data-image-title=&quot;FB_link&quot; data-image-description=&quot;&quot; data-medium-file=&quot;https://i1.wp.com/www.andrewahn.co/wp-content/uploads/2017/07/FB_link.png?fit=300%2C75&quot; data-large-file=&quot;https://i1.wp.com/www.andrewahn.co/wp-content/uploads/2017/07/FB_link.png?fit=1024%2C257&quot; class=&quot;aligncenter wp-image-2480 size-medium&quot; src=&quot;https://i1.wp.com/www.andrewahn.co/wp-content/uploads/2017/07/FB_link.png?resize=300%2C75&quot; alt=&quot;&quot; width=&quot;300&quot; height=&quot;75&quot; srcset=&quot;https://i1.wp.com/www.andrewahn.co/wp-content/uploads/2017/07/FB_link.png?resize=300%2C75 300w, https://i1.wp.com/www.andrewahn.co/wp-content/uploads/2017/07/FB_link.png?resize=768%2C193 768w, https://i1.wp.com/www.andrewahn.co/wp-content/uploads/2017/07/FB_link.png?resize=1024%2C257 1024w, https://i1.wp.com/www.andrewahn.co/wp-content/uploads/2017/07/FB_link.png?w=1452 1452w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot; data-recalc-dims=&quot;1&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>YC Investor School – Day 1: 벤처 투자는 왜, 그리고 어떻게 하는가</title>
    <updated>2018-03-12T14:57:12+09:00</updated>
    <dc:date>2018-03-12T14:57:12+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>Jaeyeon Baek</name>
    </author>
    <id>http://jybaek.tistory.com/721</id>
    <link href="http://jybaek.tistory.com/721"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;&lt;i&gt;pm2&lt;/i&gt; 에서 관리되는 모듈은 대부분이 데몬 형태이고 각각은 메모리에 항상 상주해야 하는 서비스일 것이다. 운영중에 죽는 모듈은 &lt;i&gt;pm2&lt;/i&gt; 에 의해서 자동으로 재시작되겠지만 시스템이 재부팅된다면 어떨까? 당연히 답은 &lt;i&gt;No&lt;/i&gt; 다. 아직 우리는 &lt;i&gt;pm2&lt;/i&gt; 에게 그런 일을 시키지 않았으니까.&lt;/p&gt;
&lt;p&gt;리눅스의 부팅 시스템 init.d 같은 곳에 스크립트를 만들어 넣는 등의 방법으로 부팅시에 우리 모듈을 시작시킬 수 있다. 하지만 이런 귀찮은 절차를 이미 &lt;i&gt;pm2&lt;/i&gt; 에서는 자동으로 제공해주고 있다. 옵션 하나만 입력하면 된다. 바로 아래서 살펴보도록 하자. &lt;/p&gt;
&lt;p&gt;시스템에는 우리의 모듈 &lt;i&gt;server&lt;/i&gt; 가 돌고 있는 상황이다.&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile28.uf.tistory.com/image/99AD8B435AAAFC740C0E0A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-03-16 오전 7.56.10.png&quot; height=&quot;258&quot; width=&quot;820&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;현재 돌고 있는 서비스에 대해서 부팅 시스템에 등록하는 방법은 매우 간단하다. &lt;i&gt;pm2&lt;/i&gt; 에 &lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;startup&lt;/span&gt;&lt;/i&gt; 옵션을 넘겨주면 된다. 뒤에 추가 옵션으로 현재 플랫폼을 선택할 수 있기는 하지만 생략하는 경우 자동으로 플랫폼을 찾아서 사용 가능한 명령어를 돌려준다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ pm2 startup&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile22.uf.tistory.com/image/993874435AAAFC7417B078&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-03-16 오전 7.56.27.png&quot; height=&quot;258&quot; width=&quot;820&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;위와 같이 &lt;i&gt;startup&lt;/i&gt; 옵션을 넘겨주면 아래 &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;&lt;i&gt;sudo env&lt;/i&gt; ... 로 시작하는 명령어&lt;/span&gt; 라인을 볼 수 있다. 이 부분을 그대로 복사해서 터미널에 붙여넣기 하고 실행해주면 된다. 정말 그게 끝이다. 단, 부팅 스크립트로 등록되는 것은 사용자별 관리가 아닌 시스템 전체에서 관리되는 대상이기 때문에 앞에 &lt;i&gt;sudo&lt;/i&gt; 를 붙였다.&lt;i&gt; root&lt;/i&gt; 권한을 사용할 수 없다면 먼저 &lt;i&gt;/etc/sudoers &lt;/i&gt;파일을 편집해서 &lt;i&gt;sudo&lt;/i&gt; 권한을 얻거나, &lt;i&gt;sudo &lt;/i&gt;권한이 있는 다른 계정에서 해당 명령어를 사용해야 한다. &lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile2.uf.tistory.com/image/9962C2435AAAFC7516DCAD&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-03-16 오전 7.57.47.png&quot; height=&quot;272&quot; width=&quot;820&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;암호를 정상적으로 입력하고나면 아래와 같은 내용을 확인할 수 있다. 정상적으로 등록되었다는 내용이고 어떤 과정으로 등록이 되었으며 어떻게 실행이 되는지에 대한 요약이라고 보면 되겠다.&lt;br&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile9.uf.tistory.com/image/991F69435AAAFC7618A0CE&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-03-16 오전 7.58.40.png&quot; height=&quot;975&quot; width=&quot;820&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;여기 예제에서 사용된 &lt;i&gt;CentOS&lt;/i&gt; 의 경우에는 아래와 같이 &lt;i&gt;systemctl&lt;/i&gt; 명령어를 사용해서 pm2 모듈이 부트 스크립트에 정상적으로 등록된 것을 확인할 수 있다. 서비스 이름은 바로 위에 캡쳐를 참고해서 넣어주면 된다.&lt;br&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile5.uf.tistory.com/image/99BCFB3D5AAAFFF518EDBD&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-03-16 오전 8.20.59.png&quot; height=&quot;286&quot; width=&quot;820&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;한편 부트 스크립트에 등록된 모듈을 제거하기 위해서는 &lt;i&gt;unstartup&lt;/i&gt; 명령을 사용해주면 된다. 이렇게 자동으로 부팅 상황까지 고려해주는 &lt;i&gt;pm2&lt;/i&gt; 의 세심한 배려에 다시 감탄하고 간다. :-)&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>pm2 모듈을 부트 스크립트로 등록하기</title>
    <updated>2018-03-16T08:23:22+09:00</updated>
    <dc:date>2018-03-16T08:23:22+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>Jaeyeon Baek</name>
    </author>
    <id>http://jybaek.tistory.com/720</id>
    <link href="http://jybaek.tistory.com/720"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;&lt;div style=&quot;text-align:left&quot;&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile4.uf.tistory.com/image/99AD7D475AA7B1192701C1&quot; filemime=&quot;image/jpeg&quot; filename=&quot;180313200123.418.jpg&quot; height=&quot;1179&quot; width=&quot;820&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;구글 틀라우드 사용자그룹에서 재미있는 이벤트를 준비했다. &lt;span style=&quot;color:#DE5214;&quot;&gt;​클라우드 해커톤&lt;/span&gt;이라니. 난 일정이 안되서 참여하지 못하지만 많은 사람들이 이번 이벤트를 통해 좋은 경험을 했으면 좋겠다. &lt;br&gt;&lt;br&gt;신청은 아래 링크를 통해 가능하니 더 늦기 전에 빠르게 신청 하시길. :-)&lt;br&gt;​&lt;strike&gt;​&lt;/strike&gt;&lt;a href=&quot;https://goo.gl/gnmVFk&quot; target=&quot;_blank&quot;&gt;https://goo.gl/gnmVFk&lt;/a&gt;​&lt;/p&gt;
&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>구글 클라우드 사용자그룹 해커톤</title>
    <updated>2018-03-13T20:08:09+09:00</updated>
    <dc:date>2018-03-13T20:08:09+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>Jaeyeon Baek</name>
    </author>
    <id>http://jybaek.tistory.com/719</id>
    <link href="http://jybaek.tistory.com/719"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;&lt;div style=&quot;text-align:left&quot;&gt;&lt;p&gt;지금 대한민국을 대표하는 키워드 중 하나. &lt;span style=&quot;color:#DE5214;&quot;&gt;​미투운동&lt;/span&gt;이 한참이다. 연예인부터 정치인, 예술계까지 온통 난리다. 그간 감춰져있던 더러운 음지가 서서히 드러나고 있는 듯한 느낌이다.&lt;br&gt;&lt;br&gt;사실 처음부터 미투가 이렇게 핫하게 진행된 것은 아니다. 피해자중 극소수의 큰 용기들이 모여서 사회를 강타했다. 커뮤니티에 성추행을 했다고 고발된 명단만 벌써 스무명 이상 되는 듯. 이중 대부분이 사실로 확인되고 있지만 사회적 분위기를 타서 거짓이나 과장되는 경우도 심심치 않게 발견된다. &lt;br&gt;&lt;br&gt;사회가 이렇게 많은 관심을 갖고 추악한 면모를 모두 청소하려는 시점에 미투운동의 본질이 훼손되서는 안되겠다. 아무튼 소수의 용기있는 작은 몸짓이 사회를 움직이는 모습에 큰 감격. 우리 아이가 살아갈 대한민국은 훨씬 더 좋은 모습이기를. 모든 미투를 지지해본다. &lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>#metoo</title>
    <updated>2018-03-10T21:54:19+09:00</updated>
    <dc:date>2018-03-10T21:54:19+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>Jaeyeon Baek</name>
    </author>
    <id>http://jybaek.tistory.com/718</id>
    <link href="http://jybaek.tistory.com/718"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;&lt;i&gt;Google Cloud Platform (GCP)&lt;/i&gt; 를 현업에서 이용하는 케이스가 아니면 대부분 퍼블릭 클라우드를 공부하는 목적으로 이용하는 경우가 많을 것이다. 이 경우에는 1년동안 사용할 수 있는 &lt;i&gt;$300 &lt;/i&gt;크레딧으로 클라우드를 충분히 즐길 수 있다.&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt; 1년이 지난다고 계정이 (유료로) 자동 전환되지 않기 때문에 필요 시에 유료 계정으로 전환&lt;/span&gt;해줘야 한다. 그대로 방치하는 경우에는 사용하던 모든 기능이 잠기기 때문에 아차하는 순간 소중한 데이터를 놓칠 수 있게 된다. 또한 1년이 지날 때 공식적으로는 유로로 자동 전환이 되지 않는다고 되어 있지만 &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;아주 간혹 청구되는 경우가 있을 수 있다&lt;/span&gt;고 한다. - 고객센터에 연결해서 이런저런 과정을 거치면 환급받을 수 있겠지만 여간 귀찮은 일이 아닐 수 없겠다.&lt;/p&gt;
&lt;p&gt;아무튼 이런 경우를 대비해서 우리는 사용하지 않는 프로젝트는 종료(&lt;i&gt;terminate&lt;/i&gt;) 시켜줄 필요가 있다. 쉽게 이야기해서 프로젝트를 삭제하는 개념이라고 생각해주면 된다. 프로젝트 만료 30일전에 우선 우리는 아래와 같은 메일을 받게된다.&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile3.uf.tistory.com/image/99F2E74C5AA39A141C08CC&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-03-10 오후 5.20.51.png&quot; height=&quot;595&quot; width=&quot;820&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;30일 후에 무료티어가 만료되니 서비스를 유료로 전환하라는 내용이다. 우리한테 필요 없는 내용이니 프로젝트 종료를 위해 &lt;i&gt;Google CLoud Platform (GCP)&lt;/i&gt; 콘솔로 접속한다. 첫 화면에서 &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;프로젝트 설정으로 이동&lt;/span&gt;을 클릭한다.&lt;br&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:860px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile30.uf.tistory.com/image/99F7413B5AA39B1A173252&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-03-10 오후 5.22.05.jpg&quot; height=&quot;490&quot; width=&quot;860&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;여기서 해당 프로젝트를 &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;종료&lt;/span&gt; 할 수 있다. 종료 버튼을 누르자. &lt;br&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:860px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile21.uf.tistory.com/image/99AEA43F5AA39B0E04BBB7&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-03-10 오후 5.22.39.jpg&quot; height=&quot;438&quot; width=&quot;860&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;아래와 같은 경고 문구가 뜨고 프로젝트 &lt;i&gt;ID&lt;/i&gt; 를 입력해줘야 종료를 시킬 수 있다. 프로젝트 &lt;i&gt;ID&lt;/i&gt; 를 입력하도록 하자.&lt;br&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:860px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile2.uf.tistory.com/image/99AD553E5AA39B022DFB2D&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-03-10 오후 5.23.19.png&quot; height=&quot;670&quot; width=&quot;860&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;프로젝트를 종료한다고 해서 클라우드의 모든 내용이 즉시 삭제가 되지는 않고 &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;한달간 삭제가 유예&lt;/span&gt;된다. 이 기간내에는 &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;언제든 삭제를 취소&lt;/span&gt;할 수 있다.&lt;br&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:860px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile4.uf.tistory.com/image/9968BF365AA39B33048FED&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-03-10 오후 5.23.51.png&quot; height=&quot;297&quot; width=&quot;860&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;b&gt;삭제 대기 중인 리소스&lt;/b&gt;에서 프로젝트를 확인할 수 있고 마음이 바뀌는 경우 한달 내에는 언제든지 &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;복원&lt;/span&gt; 버튼을 통해 프로젝트를 다시 살릴 수 있다.&lt;br&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:860px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile8.uf.tistory.com/image/9928B7505AA39BF62578AA&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-03-10 오후 5.24.55.jpg&quot; height=&quot;214&quot; width=&quot;860&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;보다 완벽하고 안전을 기하기 위해 결제 계정도 닫아버리도록 하자. &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;결제 메뉴에서 결제 계정을 닫을 수 있다.&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:860px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile9.uf.tistory.com/image/99AA5E4F5AA39C011DDF04&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-03-10 오후 5.26.58.png&quot; height=&quot;309&quot; width=&quot;860&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;아래와 같은 경고창에서 &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;'폐쇄' 를 입력하면 결제 계정은 즉시 닫히게 된다.&lt;/span&gt;&lt;br&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:860px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile1.uf.tistory.com/image/99F48E425AA39C3C192A0E&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-03-10 오후 5.27.15.png&quot; height=&quot;455&quot; width=&quot;860&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;그리고 잠시 후에 안내메일을 받게 된다.&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:860px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile23.uf.tistory.com/image/994F88395AACF3061A447E&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-03-17 오후 7.48.56.jpg&quot; height=&quot;610&quot; style=&quot;&quot; width=&quot;860&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;i&gt;GCP&lt;/i&gt; 는 다른 &lt;i&gt;gmail&lt;/i&gt; 계정을 통해 새롭게 프로젝트를 생성하는 경우 언제든 1 년 동안 사용할 수 있는 무료 크레딧( &lt;i&gt;$300 &lt;/i&gt;)을 제공하기 때문에 여러개의 계정을 통해 대부분의 기능을 맛보고 학습할 수 있다는 장점이 있다. 이제 1 년 동안 정 들었던 우리의 프로젝트를 놓아주고 새로운 계정으로 프로젝트를 생성하도록 하자. 계정 생성절차가 어렵지 않기 때문에 부담없이 무료 크레딧을 마음껏 이용할 수 있겠다. :-)&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>프로젝트 종료하기</title>
    <updated>2018-03-10T17:53:56+09:00</updated>
    <dc:date>2018-03-10T17:53:56+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>Jaeyeon Baek</name>
    </author>
    <id>http://jybaek.tistory.com/717</id>
    <link href="http://jybaek.tistory.com/717"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;노드를 더 우아하게 해주는 주변 프로그램인 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;npm&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 을 이해하도록 해보자. &lt;/span&gt;&lt;b&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;npm&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 은 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Node.js Package Manager&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 로 단어 그대로 &lt;/span&gt;&lt;span style=&quot;color: rgb(255, 0, 0); font-size: 12pt;&quot;&gt;패키지 관리&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;를 돕는다.&lt;/span&gt;&lt;/b&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 언뜻보면 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;python&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 의 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;pip&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 와 그 형상이 비슷해보이기도 한다. 하지만 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;npm&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 은 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;pip&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 처럼 패키지를 설치하는 기능을 포함하는 것으로 이해하는게 맞다. 이 장황한 이야기를 풀어내기 위해 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;API&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 서버를 노드 프로그램으로 만들어가며 이야기 하도록 하자. 우선 노드 프로젝트를 시작할 때 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;server.js&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 부터 만드는게 아니라 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;npm&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 을 이용해서 프로젝트를 생성한다.&lt;/span&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre style=&quot;margin-top: 0px; margin-bottom: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-size: 14px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;bash hljs&quot; style=&quot;margin: 0px; padding: 0.5em; outline: none; display: block; overflow-x: auto; color: rgb(51, 51, 51); background: rgb(248, 248, 248);&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;$ npm init&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;br&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;이렇게하면 몇가지 문답을 거친후 디렉터리에 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;package.json&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 파일이 생성된다. 대략 가볍게 훑어보고 적당한 값을 입력하자. 빈 값으로 엔터를 입력하게되면 default 값으로 채워진다. 후에 변경할 수 있으니 적당히 넘어가면 된다.&lt;/span&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre style=&quot;margin-top: 0px; margin-bottom: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-size: 14px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;bash hljs&quot; style=&quot;margin: 0px; padding: 0.5em; outline: none; display: block; overflow-x: auto; color: rgb(51, 51, 51); background: rgb(248, 248, 248);&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;$ npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See `npm &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot; style=&quot;color: rgb(0, 134, 179); font-size: 12pt;&quot;&gt;help&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; json` &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold; font-size: 12pt;&quot;&gt;for&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; definitive documentation on these fields
and exactly what they &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold; font-size: 12pt;&quot;&gt;do&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.

Use `npm install &lt;/span&gt;&lt;pkg&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;` afterwards to install a package and
save it as a dependency &lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold; font-size: 12pt;&quot;&gt;in&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; the package.json file.

Press ^C at any time to quit.
package name: (tmp)
version: (1.0.0)
description:
entry point: (index.js)
&lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot; style=&quot;color: rgb(0, 134, 179); font-size: 12pt;&quot;&gt;test&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot; style=&quot;color: rgb(0, 134, 179); font-size: 12pt;&quot;&gt;command&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;:
git repository:
keywords:
author:
license: (ISC)
About to write to /Users/jybaek/serve/tmp/package.json:

{
  &lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;&quot;tmp&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;,
  &lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;,
  &lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;,
  &lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;&quot;index.js&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;,
  &lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;: {
    &lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;&quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;
  },
  &lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;,
  &lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;&quot;ISC&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;
}


Is this ok? (yes) yes&lt;/span&gt;&lt;/pkg&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;i&gt;&lt;br&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;package.json&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 파일은 매우 특수하게 다뤄지는데 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;npm&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 을 이용해서 프로그램을 시작 할 수 있고 혹은 배포할 때도 사용된다. 파일의 내용은 아래에서 다시 다루도록 하고 일단 계속 진행하도록 하자. &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;server.js &lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;을 아래와 같이 코딩하도록 하자. 여기서 소스 내용을 이해할 필요는 없다. 지금 이 글은 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;npm&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 을 이해하기 위한 글이라는 것을 잊으면 안된다.&lt;/span&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre style=&quot;margin-top: 0px; margin-bottom: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-size: 14px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;javascript hljs&quot; style=&quot;margin: 0px; padding: 0.5em; outline: none; display: block; overflow-x: auto; color: rgb(51, 51, 51); background: rgb(248, 248, 248);&quot;&gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold; font-size: 12pt;&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; express = &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot; style=&quot;color: rgb(0, 134, 179); font-size: 12pt;&quot;&gt;require&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;'express'&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;);
&lt;/span&gt;&lt;span class=&quot;hljs-keyword&quot; style=&quot;font-weight: bold; font-size: 12pt;&quot;&gt;const&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; app = express();

app.get(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;'/'&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;, (req, res) =&amp;gt; {
    res.send(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;'Hello World!\n'&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;);
    &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot; style=&quot;color: rgb(0, 134, 179); font-size: 12pt;&quot;&gt;console&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.log(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;'get request'&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;);
});

app.listen(&lt;/span&gt;&lt;span class=&quot;hljs-number&quot; style=&quot;color: rgb(0, 128, 128); font-size: 12pt;&quot;&gt;6955&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;, () =&amp;gt; {
    &lt;/span&gt;&lt;span class=&quot;hljs-built_in&quot; style=&quot;color: rgb(0, 134, 179); font-size: 12pt;&quot;&gt;console&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.log(&lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;'server listening on port 6955'&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;);
});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;이 상태로 프로그램을 구동시킬텐데 실행 명령어를 지정하기 위해서는 아래와 같이 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;package.json&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 을 수정해야 한다. &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;npm&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 을 사용하지 않았더라면 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;node server.js&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 로 끝났을 것이지만 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;npm&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 을 사용한다는 것은 이를 훨씬 더 우아하게 만들어준다.&lt;/span&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre style=&quot;margin-top: 0px; margin-bottom: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-size: 14px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;json hljs&quot; style=&quot;margin: 0px; padding: 0.5em; outline: none; display: block; overflow-x: auto; color: rgb(51, 51, 51); background: rgb(248, 248, 248);&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;{
  &lt;/span&gt;&lt;span class=&quot;hljs-attr&quot; style=&quot;font-size: 12pt;&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;&quot;serve&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;,
  &lt;/span&gt;&lt;span class=&quot;hljs-attr&quot; style=&quot;font-size: 12pt;&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;,
  &lt;/span&gt;&lt;span class=&quot;hljs-attr&quot; style=&quot;font-size: 12pt;&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;,
  &lt;/span&gt;&lt;span class=&quot;hljs-attr&quot; style=&quot;font-size: 12pt;&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;server.js&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;,
  &lt;/span&gt;&lt;span class=&quot;hljs-attr&quot; style=&quot;font-size: 12pt;&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;: {
    &lt;/span&gt;&lt;span class=&quot;hljs-attr&quot; style=&quot;font-size: 12pt;&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;&quot;echo \&quot;Error: no test specified\&quot; &amp;amp;&amp;amp; exit 1&quot;&lt;/span&gt;&lt;span style=&quot;color: rgb(255, 0, 0); font-size: 12pt;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;
    &lt;/span&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;&lt;span class=&quot;hljs-attr&quot; style=&quot;font-size: 12pt;&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;&quot;node server.js&quot;&lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;
  },
  &lt;/span&gt;&lt;span class=&quot;hljs-attr&quot; style=&quot;font-size: 12pt;&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;,
  &lt;/span&gt;&lt;span class=&quot;hljs-attr&quot; style=&quot;font-size: 12pt;&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;hljs-string&quot; style=&quot;color: rgb(221, 17, 68); font-size: 12pt;&quot;&gt;&quot;ISC&quot;&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;
}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;i&gt;&lt;br&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;sciprts&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 라는 부분에 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;start&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 를 넣어주고 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;node&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 로 실행시킬 파일명을 명시해줬다. 이제 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;npm&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 명령어를 통해 노드를 실행시킬 수 있게 된 것이다.&lt;/span&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre style=&quot;margin-top: 0px; margin-bottom: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-size: 14px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;bash hljs&quot; style=&quot;margin: 0px; padding: 0.5em; outline: none; display: block; overflow-x: auto; color: rgb(51, 51, 51); background: rgb(248, 248, 248);&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;$ npm start&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;br&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;코드에는 오류가 없지만 놀랍게도(!) 친절한 에러 메시지를 만날 수 있을 것이다. 에러 메시지를 살펴보면 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;express&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 라는 모듈이 설치되지 않았다는 것을 확인할 수 있다. 이제 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;python&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 의 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;pip&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 처럼 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;npm&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 을 사용해서 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;express&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 설치해주면 되겠다.&lt;/span&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre style=&quot;margin-top: 0px; margin-bottom: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-size: 14px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;bash hljs&quot; style=&quot;margin: 0px; padding: 0.5em; outline: none; display: block; overflow-x: auto; color: rgb(51, 51, 51); background: rgb(248, 248, 248);&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;$ npm install express&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;i&gt;&lt;br&gt;&lt;/i&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;install&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 뒤에는 설치할 모듈의 이름을 쓰게된다. 이렇게하면 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;node_module&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 디렉터리가 (없다면) 생성되고 그 밑에 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;express&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 관련된 파일들이 설치된 것을 확인할 수 있다. 하지만 노드 프로그램은 기본적으로 이 디렉터리를 포함시키지 않고 배포한다. 하물며 노드를 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;Git&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 으로 형상관리 할 때 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;node_module&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 디렉터리는 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;.gitignore&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 로 처리해버린다. 그렇다면 배포 후 처리는 어떻게 될까? 이때 필요한 옵션이 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;--save&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 이다.&lt;/span&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre style=&quot;margin-top: 0px; margin-bottom: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-size: 14px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;bash hljs&quot; style=&quot;margin: 0px; padding: 0.5em; outline: none; display: block; overflow-x: auto; color: rgb(51, 51, 51); background: rgb(248, 248, 248);&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;$ npm install express --save&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;br&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;이렇게하면 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;package.json&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 파일에 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;express &lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;의 내용이 기록된다. 자, &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;package.json&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 의 또 다른 기능이 나온다. &lt;/span&gt;&lt;span style=&quot;color: rgb(255, 0, 0); font-size: 12pt;&quot;&gt;배포된 패키지에 아래 명령처럼 모듈을 생략한 상태로 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0); font-size: 12pt;&quot;&gt;npm&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;color: rgb(255, 0, 0); font-size: 12pt;&quot;&gt; 을 실행시키면 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0); font-size: 12pt;&quot;&gt;package.json&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;color: rgb(255, 0, 0); font-size: 12pt;&quot;&gt; 에 기록되어 있는 모든 모듈이 자동으로 설치&lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;된다.&lt;/span&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre style=&quot;margin-top: 0px; margin-bottom: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-size: 14px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;bash hljs&quot; style=&quot;margin: 0px; padding: 0.5em; outline: none; display: block; overflow-x: auto; color: rgb(51, 51, 51); background: rgb(248, 248, 248);&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;$ npm install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;br&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;배포는 이런식으로 된다. 모듈 삭제는 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;install&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 과 마찬가지로 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;uninstall&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 로 모듈 이름을 지정해주면 된다. 프로젝트에 모듈을 테스트하느라 이것저것 많이 설치되서 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;node_module&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 디렉터리가 지저분해졌다면 배포나 형상관리에 올릴 때는 반드시 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;uninstall&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 해주도록 하자. (&lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;package.json&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 에서도 함께 삭제 된다)&lt;/span&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre style=&quot;margin-top: 0px; margin-bottom: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-size: 14px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;bash hljs&quot; style=&quot;margin: 0px; padding: 0.5em; outline: none; display: block; overflow-x: auto; color: rgb(51, 51, 51); background: rgb(248, 248, 248);&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;$ npm uninstall express&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;br&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;추가적으로 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;npm&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 에 아래 명령어를 익혀두면 좋다. &lt;/span&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;설치된 모듈을 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;tree&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 형태로 출력한다.&lt;/span&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre style=&quot;margin-top: 0px; margin-bottom: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-size: 14px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;bash hljs&quot; style=&quot;margin: 0px; padding: 0.5em; outline: none; display: block; overflow-x: auto; color: rgb(51, 51, 51); background: rgb(248, 248, 248);&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;$ npm ls&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;br&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;a href=&quot;https://www.npmjs.com/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;https://www.npmjs.com/ &lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;에서 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;pkg_name&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 을 검색한다. &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;npm site&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 에서 조회하는 것과 유사하다&lt;/span&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre style=&quot;margin-top: 0px; margin-bottom: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-size: 14px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;bash hljs&quot; style=&quot;margin: 0px; padding: 0.5em; outline: none; display: block; overflow-x: auto; color: rgb(51, 51, 51); background: rgb(248, 248, 248);&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;$ npm search pkg_name&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;br&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;a href=&quot;https://www.npmjs.com/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;https://www.npmjs.com/&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 사이트 로그인과 동일하게 터미널에서 로그인&lt;/span&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre style=&quot;margin-top: 0px; margin-bottom: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-size: 14px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;bash hljs&quot; style=&quot;margin: 0px; padding: 0.5em; outline: none; display: block; overflow-x: auto; color: rgb(51, 51, 51); background: rgb(248, 248, 248);&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;$ npm login&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;br&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;a href=&quot;https://www.npmjs.com/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;https://www.npmjs.com/&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 사이트에서 계정 생성하는 것과 동일하게 터미널에서 계정 생성&lt;/span&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre style=&quot;margin-top: 0px; margin-bottom: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-size: 14px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;bash hljs&quot; style=&quot;margin: 0px; padding: 0.5em; outline: none; display: block; overflow-x: auto; color: rgb(51, 51, 51); background: rgb(248, 248, 248);&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;$ npm adduser&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;br&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;a href=&quot;https://www.npmjs.com/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot; style=&quot;color: rgb(51, 51, 51);&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;https://www.npmjs.com/&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 사이트에서 패키지에 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;upvote&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 개념의 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;star&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt; 를 주는 것과 동일&lt;/span&gt;&lt;/p&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;br&gt;&lt;/p&gt;
&lt;pre style=&quot;margin-top: 0px; margin-bottom: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-size: 14px; background-color: rgb(255, 255, 255);&quot;&gt;&lt;code class=&quot;bash hljs&quot; style=&quot;margin: 0px; padding: 0.5em; outline: none; display: block; overflow-x: auto; color: rgb(51, 51, 51); background: rgb(248, 248, 248);&quot;&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;$ npm star pkg_name&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style='margin: 0px; padding: 0px; outline: none; color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;/p&gt;
&lt;p&gt;&lt;br style='color: rgb(102, 102, 102); font-family: &quot;Noto Sans&quot;, sans-serif; font-size: 14px;'&gt;&lt;br&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>노드를 더 우아하게. npm 이야기</title>
    <updated>2018-03-08T08:18:04+09:00</updated>
    <dc:date>2018-03-08T08:18:04+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>Jaeyeon Baek</name>
    </author>
    <id>http://jybaek.tistory.com/716</id>
    <link href="http://jybaek.tistory.com/716"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;이번에는 노드를 더 우아하게 사용할 수 있도록 돕는 &lt;i&gt;PM2&lt;/i&gt; 에 대해 이야기를 해본다. &lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;PM2&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt; 는 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;Process Manager&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt; &lt;/span&gt;의 약자로 이미 단어에서 모든게 설명 되는데 노드 프로세스를 관리해주는 역할을 한다. 아래에서 간단한 노드 프로그램을 기반으로 &lt;i&gt;PM2 &lt;/i&gt;를 차근차근 이해하도록 하자.&lt;/p&gt;
&lt;p&gt;보통 서버에 데몬 형태의 &lt;i&gt;application&lt;/i&gt; 을 개발하게 되면 여러가지 것들을 신경써야 했다. 이를테면 &lt;i&gt;application&lt;/i&gt; 에서 남기는 로그에 대한 처리(&lt;i&gt; &lt;/i&gt;f&lt;i&gt;ilesystem &lt;/i&gt;을 이용해서 남기는 방법, 날짜 포함, &lt;i&gt;rotate, etc&lt;/i&gt; ), 프로세스가 죽었을 때에 대한 처리( &lt;i&gt;restart &lt;/i&gt;), 부팅시에 자동 실행 등 무수히 많은 것들이 있다. 이런 귀찮은 것들을 몽땅 관리해주는 프로세스가 있다면 얼마나 편할까? (노드에만 국한된 이야기지만) 그래서 &lt;i&gt;PM2 &lt;/i&gt;가 나왔다.&lt;/p&gt;
&lt;p&gt;유사한 매니저 프로그램으로는 &lt;i&gt;qmail&lt;/i&gt; 에서 사용하는 &lt;i&gt;svscan&lt;/i&gt; 이 있겠지만 얘는 그냥 프로세스가 죽으면 살리는 역할만 할 수 있다. 반면 &lt;i&gt;PM2&lt;/i&gt; 는 위에서 말한 모든 것+알파가 가능해진다. 자, 이제 그 &lt;i&gt;PM2&lt;/i&gt; 를 본격적으로 살펴보자.&lt;/p&gt;
&lt;p&gt;노드 프로젝트답게 &lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;npm&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt; 을 통해 아래와 같이 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;pm2 &lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;를 설치&lt;/span&gt;할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ npm install pm2 -g&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;뒤에 &lt;i&gt;-g&lt;/i&gt; 옵션을 붙이는 이유는 사용자가 &lt;i&gt;pm2 &lt;/i&gt;명령어를 어떤 디렉터리에서건 사용할 수 있게 하기위함이다. 글로벌 세팅이라고 보면 된다. &lt;i&gt;&lt;a href=&quot;http://jybaek.tistory.com/717&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;npm&lt;/a&gt;&lt;/i&gt;&lt;a href=&quot;http://jybaek.tistory.com/717&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt; 이야기&lt;/a&gt;에서 만들어뒀던 &lt;i&gt;API&lt;/i&gt; 서버 프로그램을 &lt;i&gt;pm2&lt;/i&gt; 로 돌려보자.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ pm2 start server.js&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile9.uf.tistory.com/image/9928123D5AA06D9C183FF1&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-03-08 오전 7.53.28.png&quot; height=&quot;307&quot; width=&quot;820&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;정말 이렇게 간단하게 pm2에 등록된다. PM2 에 등록된 &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;관리 리스트를 볼 때는 list 옵션&lt;/span&gt;이 사용된다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ pm2 list&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile3.uf.tistory.com/image/9919623C5AA06DD112A48E&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-03-08 오전 7.54.47.png&quot; height=&quot;307&quot; width=&quot;820&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;프로세스를 종료할 때는&lt;i&gt; pm2 list&lt;/i&gt; 에서 확인한 앱의 이름이나 애플리케이션의 &lt;i&gt;ID&lt;/i&gt; (list 에서 확인 가능)를 &lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;stop&lt;/span&gt;&lt;/i&gt; 의 인자로 넘겨주면 된다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ pm2 stop 0&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile22.uf.tistory.com/image/99B8DC415AA06DF9188F89&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-03-08 오전 7.55.31.png&quot; height=&quot;307&quot; width=&quot;820&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;방금 위에서 애플리케이션의 &lt;i&gt;ID&lt;/i&gt; 로 조정할 수 있다고 했는데 애초에 &lt;i&gt;start&lt;/i&gt; 를 할 때 앱의 이름을 지정할 수 있다. 이렇게 하는 이유는 다양한 프로젝트를 &lt;i&gt;pm2&lt;/i&gt; 에서 명확하게 관리하기 위해서다. 자, 그러면 기존에 등록되어 있던 &lt;i&gt;server.js&lt;/i&gt; 를 우선 &lt;i&gt;pm2 &lt;/i&gt;에서 &lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;delete&lt;/span&gt;&lt;/i&gt; 옵션을 통해 삭제하도록 하자.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ pm2 delete 0&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile23.uf.tistory.com/image/99B0A1345AA06E210E626E&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-03-08 오전 7.56.11.png&quot; height=&quot;307&quot; width=&quot;820&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;그리고 아래와 같이 &lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;ID&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt; 를 지정&lt;/span&gt;해서 다시 &lt;i&gt;PM2 &lt;/i&gt;에 등록하도록 한다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ pm2 start server.js --name &quot;API&quot;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile22.uf.tistory.com/image/99AA4B335AA06E4E1C3482&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-03-08 오전 7.56.51.png&quot; height=&quot;307&quot; width=&quot;820&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;다시&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt; &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;pm2 list&lt;/span&gt;&lt;/i&gt; 를 살펴보면 &lt;i&gt;ID&lt;/i&gt; 가 등록된 것을 볼 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ pm2 list&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile9.uf.tistory.com/image/99E013365AA06E71172D9A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-03-08 오전 7.57.30.png&quot; height=&quot;307&quot; width=&quot;820&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;여기서 방금 올린 &lt;i&gt;API&lt;/i&gt; 에 대한 상세 정보가 필요하면 &lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;show&lt;/span&gt; &lt;/i&gt;옵션을 사용하도록 한다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ pm2 show API&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile29.uf.tistory.com/image/99E53B3B5AA06EBF184DF1&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-03-08 오전 7.58.32.png&quot; height=&quot;691&quot; width=&quot;820&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;server.js&lt;/i&gt; 내용이 수정되는 경우에는 &lt;i&gt;pm2&lt;/i&gt; 에 &lt;i&gt;API&lt;/i&gt; 이름을 갖는 대상에 대해 재시작( &lt;i&gt;restart &lt;/i&gt;)만 날려주면 되지만 &lt;i&gt;pm2&lt;/i&gt; 의 인자를 변경하는 경우에는 &lt;i&gt;delete&lt;/i&gt; 하고 새로 등록해줘야한다는 점을 잊지말자. 위에 내용중에 자세히 보면 &lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;out log path&lt;/span&gt;&lt;/i&gt; (&lt;i&gt;console.log&lt;/i&gt; 가 출력되는 위치) 가 기본적으로 &lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;.pm2 &lt;/span&gt;&lt;/i&gt;밑에 저장되고 있는 것을 볼 수 있는데 이 위치를 우리가 원하는 곳으로 옮겨보자. 앞선 설명처럼 &lt;i&gt;API&lt;/i&gt; 를 &lt;i&gt;delete&lt;/i&gt; 하고 옵션을 추가하도록 한다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ pm2 delete API &amp;amp;&amp;amp; pm2 start server.js --name &quot;API&quot; -o ./api.log&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile9.uf.tistory.com/image/996B59375AA06EFC10DADD&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-03-08 오전 7.59.54.png&quot; height=&quot;406&quot; width=&quot;820&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;뒤에 &lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;-o&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt; 옵션으로 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;api.log&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt; 를 지정&lt;/span&gt;해줬다. 이제 코드 내에서 &lt;i&gt;console.log &lt;/i&gt;로 출력한 모든 표준출력( &lt;i&gt;stdout &lt;/i&gt;) 이 &lt;i&gt;api.log&lt;/i&gt; 로 기록 되게 된다. (짝짝) 노드가 아닌 다른 언어였면 로그를 남기기 위해 아래와 같은 함수를 등록해놓고 사용해야 했을 것이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;// pseudo code
void systemLog(char *log)
{
    fopen(api.log)
    fwrite(log)
    fclose(api.log)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;때때로 &lt;i&gt;open/write&lt;/i&gt; 에 대한 &lt;i&gt;atomic &lt;/i&gt;보장을 위해 함수 내부에 &lt;i&gt;lock&lt;/i&gt; 이 필요한 언어도 있다. 아무튼, 중요한건 이런 불편을 &lt;i&gt;pm2 &lt;/i&gt;가 어느정도 다 감수해준다는거다. 하물며 개발단계에서 확인하던 &lt;i&gt;console.log &lt;/i&gt;를 그대로 사용할 수 있다는 메리트가 크다. (사실 처음부터 &lt;i&gt;pm2&lt;/i&gt; 로 관리하면 여러모로 편합니다)&lt;/p&gt;
&lt;p&gt;하지만 아직 아쉬운 것이 있다. 위에서 언급한 것 처럼&lt;i&gt; -o&lt;/i&gt; 옵션은 &lt;i&gt;stdout&lt;/i&gt; 을 처리하기 때문에 프로세스에서 발생하는 표준에러( &lt;i&gt;stderr &lt;/i&gt;) 에 대해서는 처리하지 못한다. 이를 처리하기 위한 옵션도 있으니 걱정하지마시라. 우선 &lt;i&gt;API&lt;/i&gt; 를 삭제하고 &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;-e 옵션으로&lt;/span&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt; &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;stderr&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt; 에 대한 처리&lt;/span&gt;도 추가해보자.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ pm2 delete API &amp;amp;&amp;amp; pm2 start server.js --name &quot;API&quot; -o ./api.log -e ./api.log --merge-logs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이제 노드 모듈의 예외발생 같은 크래시 메시지를 &lt;i&gt;api.log&lt;/i&gt; 에서 확인할 수 있을 것이다. 자, 이렇게 잘 운영을 하고 있었는데 우리 서비스가 무척 잘 되서 트래픽이 급증하였다. 이런 일이 발생하면 단일 노드(js)에서 모든 것을 처리하기 버거워진다. 트래픽을 받아서 &lt;i&gt;async&lt;/i&gt; 하게 처리한다고 해도 내부로직이 복잡해지면 어느순간 치솟는 &lt;i&gt;CPU&lt;/i&gt; 를 어찌하지 못하는 상황이 온다. &lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;이때 필요한 것이 클러스터&lt;/span&gt;이다. &lt;i&gt;PM2 &lt;/i&gt;의 클러스터는 분산컴퓨팅의 그 용어와 비슷한 역할을 하는데 &lt;i&gt;server.js&lt;/i&gt; 한 개 노드파일을 지정한 개수만큼 &lt;i&gt;PM2&lt;/i&gt; 에 등록하고 &lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;Load Balancing (LB)&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt; 를 통해 부하를 분산&lt;/span&gt;시켜준다. &lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;PM2&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt; 의 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;LB&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt; 는 &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;round robin (RR)&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt; 방식으로 동작&lt;/span&gt;하며 모든것은 옵션 하나면 충분하다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ pm2 delete API &amp;amp;&amp;amp; pm2 start server.js --name &quot;API&quot; -i 3 -o ./test.log&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile10.uf.tistory.com/image/991E7A4E5AA06F8C1C137B&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-03-08 오전 8.02.20.png&quot; height=&quot;438&quot; width=&quot;820&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;위 예제에서는 &lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;-i&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt; 옵션을 통해 클러스터를 3 개 등록&lt;/span&gt;했다. 실제 패킷을 발생시켜보면 완벽하게 &lt;i&gt;RR&lt;/i&gt; 으로 &lt;i&gt;LB&lt;/i&gt; 되는 것을 확인할 수 있다. 아래처럼 패킷을 발생시켜보자.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ curl localhost:6955&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;로그도 확인해보면 &lt;i&gt;test.log&lt;/i&gt; 에 클러스터 번호가 붙어서 각각 &lt;i&gt;test-0.log, test-1.log, test-2.log&lt;/i&gt; 로 나뉘어서 기록되게 된다. 저장되는 모든 로그를 아래처럼 확인해보자. &lt;i&gt;RR&lt;/i&gt; 으로 &lt;i&gt;LB &lt;/i&gt;됨이 확인된다. (코드에 각 프로세스를 구분할 수 있도록 &lt;i&gt;process.pid&lt;/i&gt; 를 추가해줬다)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ tail -f test-*&lt;p&gt;&lt;/p&gt;
&lt;p&gt;==&amp;gt; test-0.log &amp;lt;==
pid: 1736 &amp;gt; get request&lt;/p&gt;
&lt;p&gt;==&amp;gt; test-1.log &amp;lt;==
pid: 1737 &amp;gt; get request&lt;/p&gt;
&lt;p&gt;==&amp;gt; test-2.log &amp;lt;==
pid: 1750 &amp;gt; get request&lt;/p&gt;
&lt;p&gt;==&amp;gt; test-0.log &amp;lt;==
pid: 1736 &amp;gt; get request&lt;/p&gt;
&lt;p&gt;==&amp;gt; test-1.log &amp;lt;==
pid: 1737 &amp;gt; get request&lt;/p&gt;&lt;/code&gt;&lt;p&gt;&lt;code class=&quot;bash&quot;&gt;==&amp;gt; test-2.log &amp;lt;==
pid: 1750 &amp;gt; get request&lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;
&lt;p&gt;운영도중에 클러스터 개수를 조정할 수도 있다. 즉 &lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;scale in/out &lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;이 가능&lt;/span&gt;하다는 이야기다. &lt;i&gt;scale in/out&lt;/i&gt; 은 아래와 같이 설정할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ pm2 scale API 5&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile26.uf.tistory.com/image/99A1134D5AA06FB812ED8E&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-03-08 오전 8.02.59.png&quot; height=&quot;438&quot; width=&quot;820&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;클러스터 3개로 돌고 있던 &lt;i&gt;API&lt;/i&gt; 를 클러스터 5로 지정했다. 이에따라 2개의 클러스터가 추가된 것을 확인할 수 있겠다. 혹시 API 를 급하게 중단해야한다? &lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;all&lt;/span&gt;&lt;/i&gt; 을 인자로 넘겨서 아래와 같이 관리되고 있는 전체를 중단하거나 재시작할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ pm2 stop all&lt;/code&gt;&lt;/pre&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile27.uf.tistory.com/image/9905D14C5AA06FDB197AAB&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-03-08 오전 8.03.34.png&quot; height=&quot;438&quot; width=&quot;820&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;monit&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt; 옵션으로&lt;/span&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt; 프로세스를 모니터링&lt;/span&gt;하는 것도 지원하는데 이것도 참 물건이다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ pm2 monit&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;아래와 같이 &lt;i&gt;PM2&lt;/i&gt; 로 관리되는 프로세스별 상태를 볼 수 있고 실시간 로그까지 확인 가능하다. 빠져나올때는 키보드의 &lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;q&lt;/span&gt;&lt;/i&gt; 를 눌러주면 되겠다.&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:820px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile7.uf.tistory.com/image/99FC62375A9F5A612C5AA2&quot; filemime=&quot;image/jpeg&quot; filename=&quot;스크린샷 2018-03-07 오후 12.18.16.png&quot; height=&quot;496&quot; width=&quot;820&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;i&gt;Node.js&lt;/i&gt; 로 작성된 프로그램을 서버에서 운영하기 위해 필요한 기초적인 몇 가지를 살펴봤다. 사실 이외에도 살펴보면 엄청나게 많은 옵션이 제공되고 있는데 &lt;a href=&quot;http://pm2.keymetrics.io&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;공식홈페이지&lt;/a&gt;를 참고하면 되겠다. 여러가지 옵션을 잘 살펴보고 적절한 상황에서 활용해주면 된다.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>노드를 더 우아하게. pm2 이야기</title>
    <updated>2018-03-07T08:11:38+09:00</updated>
    <dc:date>2018-03-07T08:11:38+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>Jaeyeon Baek</name>
    </author>
    <id>http://jybaek.tistory.com/712</id>
    <link href="http://jybaek.tistory.com/712"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;&lt;i&gt;crontab&lt;/i&gt; 은 어떤 주기적인 처리를 꽤 영리하게 도와주는 &lt;i&gt;Linux&lt;/i&gt; 시스템에 없어서는 안될 스케줄러이다. 특정시간에  파일시스템을 정리한다던가 주기적으로 알람을 발송한다던가 또는 시스템 자원을 모니터링한다던가 등등 많은 활용분야가 있겠다.&lt;/p&gt;
&lt;p&gt;이렇게 편한 크론탭을 사용할 때 잊어서는 안되는 중요한 사실이 있다. 바로 스케줄러에 의해 실행되는 &lt;i&gt;job&lt;/i&gt; 은 &lt;i&gt;[cron] &lt;/i&gt;권한으로 실행된다는 점인데 그렇기 때문에 우리는 아래 두가지 사항을 항상 체크해야 한다.&lt;/p&gt;
&lt;ul style=&quot;list-style-type: square;&quot;&gt;
&lt;li&gt;스케줄링 하려는 명령어의 &lt;i&gt;PATH &lt;/i&gt;(환경변수)가 &lt;i&gt;cron &lt;/i&gt;에게 있는지.&lt;/li&gt;
&lt;li&gt;스케줄링 하려는 명령어를 &lt;i&gt;cron&lt;/i&gt; 이 실행시킬 수 있는지 ( = 권한이 있는지 )&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;첫번째 내용의 경우에는 그냥 습관처럼 명령어의 절대경로를 써주면 해결된다. 극단적인 예를들어 리눅스의 &lt;i&gt;date&lt;/i&gt; 명령어를 &lt;i&gt;crontab&lt;/i&gt; 에서 실행시킨다면 &lt;i&gt;/usr/bin/date&lt;/i&gt; 와 같이 절대경로를 포함시키면 된다는 의미다.&lt;/p&gt;
&lt;p&gt;두번째 내용의 경우에는 특정 사용자의 디렉터리에 존재하는 명령어를 실행시키는 경우가 되겠다. &lt;i&gt;crontab&lt;/i&gt; 은 사용자별로 관리되기 때문에 사실 흔한 케이스는 아니다. 아무튼 이때는 &lt;i&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;su&lt;/span&gt;&lt;/i&gt; 의 힘을 빌려서 아래와 같이 실행시켜주면 된다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ su - caley -c command&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;i&gt;caley&lt;/i&gt; 라는 계정으로 셸을 로그인해서 &lt;i&gt;command&lt;/i&gt; 명령어를 실행시키라는 의미로 생각하면 되겠다. 상당히 간단한 내용이지만 모르면 고생하는 경우가 있겠다. 이제 두가지 문제를 잘 피해서 &lt;i&gt;crontab&lt;/i&gt; 에 스케줄을 등록하고 모니터링 하시면 되겠다. 일반적으로는 아래 경로를 통해서 실행되는 것을 확인하면 된다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ ls -al /var/log/cron /var/log/syslog&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;crontab 에 뭔가 등록해야 하는데 사용법을 잘 모르겠다면 아래 사이트를 참고해보도록 하자. 개인적으로는 인터넷에 널린 여러 사이트중에 &lt;i&gt;crontab&lt;/i&gt; 을 제일 직관적으로 표현해주고 있다고 생각한다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://crontab-generator.org/&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;https://crontab-generator.org/&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>crontab 사용시 권한 주의</title>
    <updated>2018-03-04T16:28:30+09:00</updated>
    <dc:date>2018-03-04T16:28:30+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>So Eun Lee</name>
    </author>
    <id>https://medium.com/@soeunlee/%EC%B0%BE%EC%95%84%EB%B3%B4%EB%8B%88-%EC%9D%BC%EA%B8%89-%EA%B0%9D%EC%B2%B4%EC%9A%94%EA%B1%B4%EC%9D%B4-%EA%BC%AD-3%EA%B0%9C%EB%A7%8C-%EC%9E%88%EB%8A%94-%EA%B2%83%EC%9D%B4-%EC%95%84%EB%8B%88%EB%9D%BC-%EB%8B%A4%EC%9D%8C%EA%B3%BC-%EA%B0%99%EC%9D%80-%EC%9D%98%EB%AF%B8%EB%93%A4%EC%9D%B4-%EC%9E%88%EC%9D%84-%EC%88%98-%EC%9E%88%EB%8D%94%EB%9D%BC%EA%B5%AC%EC%9A%94-%EC%96%B8%EC%96%B4%EC%97%90-%EB%94%B0%EB%9D%BC-%EB%8B%A4%EB%A5%B4%EC%A7%80%EB%A7%8C-ad2ab6937eb3?source=rss-2a9af50b4ecc------2</id>
    <link href="https://medium.com/@soeunlee/%EC%B0%BE%EC%95%84%EB%B3%B4%EB%8B%88-%EC%9D%BC%EA%B8%89-%EA%B0%9D%EC%B2%B4%EC%9A%94%EA%B1%B4%EC%9D%B4-%EA%BC%AD-3%EA%B0%9C%EB%A7%8C-%EC%9E%88%EB%8A%94-%EA%B2%83%EC%9D%B4-%EC%95%84%EB%8B%88%EB%9D%BC-%EB%8B%A4%EC%9D%8C%EA%B3%BC-%EA%B0%99%EC%9D%80-%EC%9D%98%EB%AF%B8%EB%93%A4%EC%9D%B4-%EC%9E%88%EC%9D%84-%EC%88%98-%EC%9E%88%EB%8D%94%EB%9D%BC%EA%B5%AC%EC%9A%94-%EC%96%B8%EC%96%B4%EC%97%90-%EB%94%B0%EB%9D%BC-%EB%8B%A4%EB%A5%B4%EC%A7%80%EB%A7%8C-ad2ab6937eb3?source=rss-2a9af50b4ecc------2"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;찾아보니 일급 객체요건이 꼭 3개만 있는 것이 아니라 다음과 같은 의미들이 있을 수 있더라구요 :)&lt;/p&gt;
&lt;p&gt;언어에 따라 다르지만 ..&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;being expressible as an anonymous literal value&lt;/li&gt;
&lt;li&gt;being storable in variables&lt;/li&gt;
&lt;li&gt;being storable in data structures&lt;/li&gt;
&lt;li&gt;having an intrinsic identity (independent of any given name)&lt;/li&gt;
&lt;li&gt;being comparable for equality with other entities&lt;/li&gt;
&lt;li&gt;being passable as a parameter to a procedure/function&lt;/li&gt;
&lt;li&gt;being returnable as the result of a procedure/function&lt;/li&gt;
&lt;li&gt;being constructible at runtime&lt;/li&gt;
&lt;li&gt;being printable&lt;/li&gt;
&lt;li&gt;being readable&lt;/li&gt;
&lt;li&gt;being transmissible among distributed processes&lt;/li&gt;
&lt;li&gt;being storable outside running processes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그리고 Structure and Interpretation of Computer Programs이라는 책에도 언급이 되었더라구요:) 링크(&lt;a href=&quot;https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#call_footnote_Temp_121&quot;&gt;https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#call_footnote_Temp_121&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;In general, programming languages impose restrictions on the ways in which computational elements can be manipulated. Elements with the fewest restrictions are said to have &lt;em&gt;first-class&lt;/em&gt; status. Some of the ``rights and privileges’’ of first-class elements are:&lt;a href=&quot;https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#footnote_Temp_121&quot;&gt;64&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They may be named by variables.&lt;/li&gt;
&lt;li&gt;They may be passed as arguments to procedures.&lt;/li&gt;
&lt;li&gt;They may be returned as the results of procedures.&lt;/li&gt;
&lt;li&gt;They may be included in data structures.&lt;a href=&quot;https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#footnote_Temp_122&quot;&gt;65&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=ad2ab6937eb3&quot; width=&quot;1&quot; height=&quot;1&quot;&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>찾아보니 일급 객체요건이 꼭 3개만 있는 것이 아니라 다음과 같은 의미들이 있을 수 있더라구요 :)</title>
    <updated>2018-03-03T12:27:12+09:00</updated>
    <dc:date>2018-03-03T12:27:12+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>조대협</name>
    </author>
    <id>http://bcho.tistory.com/1239</id>
    <link href="http://bcho.tistory.com/1239"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;Apt.ly를 이용한 데비안 리포지토리 생성 조대협 (http://bcho.tistory.com)  앞의 글에서 Jenkins + Maven 조합을 통해서 애플리케이션 설치 파일을 데비안 패키지로 패키징하는 방법에 대해서 알아보았다. 이제 이 패키지를 서버에 설치하는 방법을 살펴본다. 패키지를 설치하는 방법은 간단하게 데비안 패키지 파일을 설치하고자 하는 서버에 복사해놓은 다음에, sudo apt-get install을 이용해서 설치하는 방법도 있지..&lt;/p&gt;
&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;
&lt;script async src=&quot;http://bcho.tistory.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:468px;height:60px&quot; data-ad-client=&quot;ca-pub-9839391690674707&quot; data-ad-slot=&quot;4153002673&quot;&gt;
&lt;/ins&gt;
&lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>Apt.ly를 이용한 데비안 리포지토리 생성</title>
    <updated>2018-03-07T18:09:22+09:00</updated>
    <dc:date>2018-03-07T18:09:22+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>조대협</name>
    </author>
    <id>http://bcho.tistory.com/1238</id>
    <link href="http://bcho.tistory.com/1238"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;Maven으로 데비안 패키지를 만들어보자 (http://bcho.tistory.com) 조대협 애플리케이션 배포 CI/CD 빌드 배포 프로세스에서, 컴파일된 애플리케이션을 배포하는 방법은 여러가지가 있다. 빌드된 바이너리를 Ansible과 같은 Configuration management 도구를 이용해서 배포하는 방법이 일반적이지만, 작업이 복잡한 경우에는 많은 스크립트 작업이 필요한 경우가 있다. 보통 애플리케이션 배포는 단순하게 바이너리만을 복사..&lt;/p&gt;
&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;
&lt;script async src=&quot;http://bcho.tistory.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:468px;height:60px&quot; data-ad-client=&quot;ca-pub-9839391690674707&quot; data-ad-slot=&quot;4153002673&quot;&gt;
&lt;/ins&gt;
&lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>Maven을 이용한 데비안(*.deb) 패키지 빌드</title>
    <updated>2018-03-05T17:21:50+09:00</updated>
    <dc:date>2018-03-05T17:21:50+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>창천향로 창천향로</name>
    </author>
    <id>http://jojoldu.tistory.com/277</id>
    <link href="http://jojoldu.tistory.com/277"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;
&lt;script async src=&quot;http://jojoldu.tistory.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-5349709105365293&quot; data-ad-slot=&quot;5488859360&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt; 
&lt;p&gt;개발자의 취업/후기 경험을 이야기하겠다고 하면 굉장히 거창하다는 느낌이 듭니다.  &lt;br&gt;
좋은 주제는 맞는데 직접 쓰려니 부담스럽다는 생각이 있었습니다.  &lt;br&gt;
그러다 한달 전쯤에 메일 한통을 받았습니다.  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile9.uf.tistory.com/image/994C54355AA90D830C6108&quot; alt=&quot;메일&quot;&gt;&lt;/p&gt;
&lt;p&gt;메일 답장으로는 성의가 없어보여 블로그를 통해서 정리해서 공유드리겠다는 답변을 드렸습니다만, 막상 쓸려니 &lt;strong&gt;실력에 비해 너무 건방떠는 내용이 될것 같아서&lt;/strong&gt; 계속 미루게 되었습니다.  &lt;br&gt;
그러다가 최근에 진행된 &lt;a href=&quot;http://jojoldu.tistory.com/274&quot;&gt;OKKY 세미나&lt;/a&gt;가 끝나고 돌아가는 길에 비슷한 질문을 받고, 며칠 뒤에는 페이스북 메신저로 비슷한 질문을 받았습니다.  &lt;/p&gt;
&lt;p&gt;&quot;아! 이게 생각보다 많은 분들이 궁금해 하시는구나.&quot;  &lt;br&gt;
&quot;나 혼자서 &lt;a href=&quot;https://namu.wiki/w/%EC%89%90%EB%8F%84%EC%9A%B0%20%EB%B3%B5%EC%8B%B1#toc&quot;&gt;쉐도우 복싱&lt;/a&gt; 안해도 되겠구나&quot; 싶었습니다.  &lt;/p&gt;
&lt;p&gt;저는 이제 &lt;strong&gt;4년 1개월 된 개발자&lt;/strong&gt;입니다.  &lt;br&gt;
SI에서 1년, 포털 서비스에서 2년, 현재는 O2O 스타트업에서 1년째 개발중입니다.  &lt;br&gt;
이미 2번의 한 해 회고 (&lt;a href=&quot;https://brunch.co.kr/@jojoldu/2&quot;&gt;2016년 회고&lt;/a&gt;, &lt;a href=&quot;https://brunch.co.kr/@jojoldu/19&quot;&gt;2017년 회고&lt;/a&gt;)를 썼기 때문에 이번 글은 &lt;strong&gt;3번째 직장에 오기까지 취업/이직 준비를 어떻게 했었는지&lt;/strong&gt;에 대해서만 다룰까 합니다.  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile6.uf.tistory.com/image/99B14C405AA90D832EDDF6&quot; alt=&quot;쟤&quot;&gt;&lt;/p&gt;
&lt;p&gt;영웅담은 아니며, &lt;strong&gt;대충 저정도만 해도 개발자로 먹고 사는구나&lt;/strong&gt; 정도로 보시면 됩니다.  &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;순서는 국비교육기간 -&amp;gt; 취업준비기간 (4학년 2학기 ~ 5학년 2학기) -&amp;gt; 첫번째 직장 -&amp;gt; 두번째 직장 순으로 진행될 예정입니다.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-1-국비교육---교육기간&quot;&gt;1-1. 국비교육 - 교육기간&lt;/h2&gt;
&lt;p&gt;대학 생활중 SW전공 수업을 몇번 듣게 되었습니다.  &lt;br&gt;
전자회로, 통신공학 같은 과목보다 SW 전공 과목들이 더 재밌어서 개발쪽으로 취업을 해야겠다고 막연하게 생각하고 있었습니다.  &lt;br&gt;
어영부영 시간이 지나서 4학년 1학기가 끝날때쯤 기숙사 침대에 누워서 생각해보니 제 상황이 정말 안좋다는걸 깨달았습니다.  &lt;br&gt;
&lt;strong&gt;비전공(전기과), 3.3의 낮은 학점, 지방대, SW 관련 활동 전무&lt;/strong&gt; 등 전혀 개발자로 취업할수 있을것 같지 않았습니다.  &lt;br&gt;
이대로 졸업하면 큰일나겠다 싶은것도 있었고, &lt;strong&gt;SW 개발만 집중적으로 공부해보고 싶은 마음&lt;/strong&gt;도 있어서 4학년 2학기부터 1년간 휴학을 했습니다.  &lt;/p&gt;
&lt;p&gt;휴학 후 어떻게 공부해야할까 고민한 결과, 4학년 1학기에 다시 대학교를 가기엔 너무 늦었다는 생각에 국비교육센터를 선택했습니다.  &lt;br&gt;
(정석루트로 가기엔 너무 늦었으니 다른 방법을 선택한것이지만, 돌이켜 생각해보면 잘한 결정 같습니다.)  &lt;br&gt;
제가 살던 대구/구미에는 마땅히 SW 교육센터가 없어 인터넷 커뮤니티에서 추천하는 XX교육센터를 가기로 결심하고 생애 처음으로 서울 땅을 밟게 됩니다.  &lt;/p&gt;
&lt;p&gt;지금도 그런지는 모르겠지만, 그때는 &lt;strong&gt;국비 교육 지원이 재학생에겐 해당사항이 없어 350만원이라는 교육비용을 자비로 지불&lt;/strong&gt;했습니다.  &lt;br&gt;
(취업 안되면 영어 공부라도 해야겠다는 생각에 모아둔 돈이 있어 그걸로 해결했지만.. 돈이 너무 아까워서 진짜 열심히 들었습니다.)  &lt;/p&gt;
&lt;p&gt;XX교육센터의 여러 과정 중에 제가 들었던 &lt;strong&gt;4.5개월 과정을 들으려면 일종의 자바 시험을 통과&lt;/strong&gt;해야했습니다.  &lt;br&gt;
시험 통과가 안되면 자바 기초 수업을 듣고 다시 시험을 봐야한다는 얘기에 부랴부랴 남궁성님의 &lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;amp;barcode=9788994492032&quot;&gt;자바의 정석&lt;/a&gt;을 사서 8장 Exception까지 읽었습니다.  &lt;br&gt;
&lt;strong&gt;클래스와 인스턴스 차이가 이해는 안되고, 시험일자는 다가오니 책의 설명을 달달 외워&lt;/strong&gt; 시험 보러 갔던 기억이 납니다.  &lt;br&gt;
남들은 쉽게 이해했는걸 보면 제가 그렇게 재능있는 편은 아니였던것 같습니다.  &lt;/p&gt;
&lt;p&gt;어찌됐든 시험을 통과하고 본격적으로 국비교육을 시작하게 되었습니다.  &lt;br&gt;
지금도 비슷할것 같은데 4.5개월 중, &lt;strong&gt;2개월간 교육을 하고, 나머지 2.5개월은 팀 프로젝트를 진행&lt;/strong&gt;했습니다.  &lt;/p&gt;
&lt;p&gt;하루 일과는 단순했습니다.  &lt;br&gt;
오전 9시 ~ 오후 4시까지는 위의 과목들을 배우고, 오후 4 ~ 9시까지는 &lt;strong&gt;의무 자습&lt;/strong&gt;, 이후엔 자율 시간이였습니다.  &lt;br&gt;
의무 자습이란 단어가 생소하실텐데요.  &lt;br&gt;
자습인데, 의무였습니다.  &lt;br&gt;
&lt;strong&gt;오후 9시에 출석체크&lt;/strong&gt;를 했었거든요.  &lt;br&gt;
그때까진 무조건 학원에 남아있어야 했습니다.  &lt;/p&gt;
&lt;p&gt;여튼 2012년 기준으로 교육 과목은 아래와 같습니다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java: 2주&lt;/li&gt;
&lt;li&gt;Servlet / JSP: 2주&lt;/li&gt;
&lt;li&gt;Struts: 3일&lt;/li&gt;
&lt;li&gt;Spring / iBatis / Tomcat: 2주&lt;/li&gt;
&lt;li&gt;HTML: 2일&lt;/li&gt;
&lt;li&gt;데이터베이스: 2일&lt;/li&gt;
&lt;li&gt;안드로이드: 3일&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(다시 생각해봐도 안드로이드는 도대체 왜 넣었는지 모르겠네요.)  &lt;/p&gt;
&lt;p&gt;과목과 일정을 보시면 아시겠지만, &lt;strong&gt;시간이 너무 촉박&lt;/strong&gt;합니다.  &lt;br&gt;
수업 진도 나가기 바빠서 강사님께서 스크린에 코드 출력 -&amp;gt; 따라치기 -&amp;gt; 간략 설명 이 과정이 반복됐습니다.  &lt;br&gt;
그러다보니 첫 2주 이후부터는 전체 25명중 2~3명을 제외하고는 전부 강사님의 화면을 따라치기만 했습니다.  &lt;br&gt;
(똑똑하신 분들은 그렇게 해도 다 이해하시는것보고 감탄했었습니다.)  &lt;/p&gt;
&lt;p&gt;한달 지나서 남은거라곤 &lt;strong&gt;따라치다 오타난 코드&lt;/strong&gt;밖에 없었습니다.  &lt;br&gt;
스크린 속 코드만 따라치려고 서울까지 왔는건가 하는 자괴감과 이대로 가면 큰일나겠다는 다급함이 몰려와 학습방법에 변화를 주게 됩니다.  &lt;br&gt;
남에게 설명해야한다는 압박감이 있으면 더 집중해서 듣고, 정리할 것이란 계산으로 &quot;&lt;strong&gt;오늘 배운 내용을 같은 교육생 분들에게 요약 정리해주자&lt;/strong&gt;&quot; 란 계획을 세웠습니다.  &lt;/p&gt;
&lt;p&gt;방법은 간단합니다.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;강사님이 하시는 이야기를 모두 공책에 기록 &lt;ul&gt;
&lt;li&gt;지금 생각해보니 이때부터 기록하는 습관이 있었네요.  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;쉬는 시간, 점심시간에 기록한 내용을 다시 정리 &amp;amp; 애매한건 강사님께 질문&lt;/li&gt;
&lt;li&gt;교육이 끝나는 오후 4시부터 저녁 시간 전까지 다시 정리&lt;/li&gt;
&lt;li&gt;7시부터 반 동료들에게 정리한 내용 발표&lt;/li&gt;
&lt;li&gt;강사님 코드는 별도로 받아서 자습시간에 다시 학습&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이게 그나마 효과가 있었는지 &lt;strong&gt;그날 강사님이 보여주신 코드가 뭘 의미하는지&lt;/strong&gt; 정도는 이해하게 됐습니다.  &lt;br&gt;
7시까지 무조건 정리해야한다라는 압박감이 있었지만 그래도 시간과 돈을 날리는것 보다는 훨씬 낫다고 생각해서 &lt;strong&gt;교육 기간 내내 발표&lt;/strong&gt;를 진행했습니다.  &lt;/p&gt;
&lt;p&gt;서울에 혼자 살았기 때문에 할것도 없었고, 매주 금요일이면 강사님께서 숙제를 내주셨기 때문에 주말에도 항상 학원에 갔습니다.  &lt;br&gt;
주말은 그래도 시간적 여유가 있어서 다른 분들 숙제를 도와주기도 했습니다.  &lt;br&gt;
지금 생각해보니 일종의 코드리뷰 비슷했던것 같습니다.  &lt;/p&gt;
&lt;p&gt;그렇게 2달간의 교육이 끝나고, 대망의 팀 프로젝트가 시작됩니다.&lt;/p&gt;
&lt;h2 id=&quot;1-2-국비교육---팀-프로젝트-기간&quot;&gt;1-2. 국비교육 - 팀 프로젝트 기간&lt;/h2&gt;
&lt;p&gt;국비교육에서 팀 프로젝트 멤버 구성은 보통 2가지 방법 중 하나로 결정됩니다.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;교육생들끼리 알아서 팀 구성&lt;/li&gt;
&lt;li&gt;강사님이 직접 팀원 구성.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;1번, 2번 모두 명확한 단점이 있습니다.  &lt;/p&gt;
&lt;p&gt;1번은 &lt;strong&gt;부익부 빈익빈&lt;/strong&gt;이 발생하게 됩니다.  &lt;br&gt;
잘하는 사람끼리 먼저 팀 구성을 하다보니, 어디에도 끼지 못하는 사람이 생겨 서로 감정 상하는 일이 생깁니다.  &lt;br&gt;
(진짜 민망한 상황이 연출됩니다.)  &lt;/p&gt;
&lt;p&gt;2번은 &lt;strong&gt;무임승차가 대거 발생&lt;/strong&gt;합니다.  &lt;br&gt;
강사님 입장에선 어떻게든 팀별로 프로젝트가 완성되야하니, 각 팀마다 잘하는 사람을 1명씩은 포함시키게 되는데요.  &lt;br&gt;
결국 2~3개월동안 그 친구 &lt;strong&gt;혼자서 날밤새며 프로젝트 진행&lt;/strong&gt;하는 경우가 허다했습니다.  &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;요즘은 다를 수 있습니다&lt;/strong&gt;. 제 주변 지인들과 몇년전 기준으로 한 얘기입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이것때문에 개인적으로 &lt;strong&gt;국비교육에서 팀 프로젝트 과정은 빠지는게 어떨까&lt;/strong&gt; 생각하게 됐습니다.  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://okky.kr/article/407034&quot;&gt;fender님의 채용 면접 후기&lt;/a&gt;에서도 나온 이야기지만, 최근 취업되신 분들과 얘기해봐도 &lt;strong&gt;포트폴리오를 신뢰하지 않는다&lt;/strong&gt;는게 체감됩니다.  &lt;br&gt;
포트폴리오는 누가 만들었는지 확인할 방법이 없습니다.  &lt;br&gt;
오히려 Github과 개인 기술 블로그를 훨씬 더 신뢰하고 요구합니다.  &lt;/p&gt;
&lt;p&gt;팀 프로젝트 대신에 차라리 각자에게 과제를 주고, 이를 Github을 통해서 강사님이 코드리뷰를 진행하고 Github 계정을 이력서에 올리는게 훨씬 더 효과적일것 같습니다.  &lt;br&gt;
(이렇게 말한다고 될리는 없겠지만요..)  &lt;/p&gt;
&lt;p&gt;어찌됐든 저의 경우 1번 방식으로 팀 구성이 진행됐습니다.  &lt;br&gt;
다행히 잘 하시는 분들과 팀이 되서 많은 도움을 받으면서 프로젝트를 진행할 수 있었습니다.  &lt;/p&gt;
&lt;p&gt;프로젝트 초반에는 &lt;strong&gt;VCS(버전 관리 시스템)과 Javascript&lt;/strong&gt;를 배워야했기 때문에 개발을 거의 못했습니다. &lt;/p&gt;
&lt;p&gt;이 둘이 없으면 사실상 제대로된 프로젝트를 시작할수 없습니다.  &lt;/p&gt;
&lt;p&gt;하지만, 교육 과정에서 이 2가지를 못배웠기 때문에 팀 구성원들끼리 이를 공부하고나서야 본격적으로 프로젝트를 시작할 수 있게 되었습니다.  &lt;br&gt;
당시(2012년)에는 Git이 굉장히 생소해서 SVN을 버전 관리 시스템으로 선택하고, Javascript는 jQuery와 한몸처럼 움직이던때라 jQuery를 공부하였습니다.  &lt;/p&gt;
&lt;p&gt;팀 프로젝트 기간 동안은 시간이 너무 부족해서 &lt;strong&gt;기간내내 학원에서 먹고 자는 생활&lt;/strong&gt;을 했습니다.  &lt;br&gt;
학원에 마땅히 수면 공간이 없어서 책상에 엎드려서 자는데 아침마다 배에 가스가 가득차서 매일 컨디션이 안좋았습니다.(안 믿기시겠지만..)  &lt;/p&gt;
&lt;p&gt;지금 생각해보면 오히려 효율만 떨어졌음에도 계속 학원에서 잤던 이유는 &lt;strong&gt;&quot;개발자라면 이래야지&quot;와 같은 낭만&lt;/strong&gt;을 갖고 있었기 때문인것 같습니다.  &lt;br&gt;
이걸 보시는 분들은 이러지마세요.  &lt;br&gt;
진짜 효율이 안좋습니다.  &lt;/p&gt;
&lt;p&gt;이렇게 보면 되게 프로젝트 기간내내 열심히 코딩했다고 생각하시겠지만, 실상은 전혀 그렇지 않았습니다.  &lt;br&gt;
2.5개월이란 시간 동안 가장 많이 한 일은 &lt;strong&gt;인터넷에서 돌아가는 코드를 찾아서 붙여넣기&lt;/strong&gt;였습니다.&lt;br&gt;
Java를 비롯해서 Spring, jQuery, HTML, SQL 등을 전혀 이해하지 못한 상태에서 마감 일정만 정해져있으니 뭐 어떻게 돌아가는지도 모른채 복사 &amp;amp; 붙여넣기만 계속 할 수밖에 없었습니다.  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://whiteship.tistory.com/&quot;&gt;백기선님의 블로그&lt;/a&gt;와 &lt;a href=&quot;http://www.yes24.com/24/goods/3945627?scode=032&amp;amp;OzSrank=1&quot;&gt;최범균님의 스프링&lt;/a&gt;을 참고해서 어떻게든 만들긴 했지만 마지막 최종 시연 발표를 하고 너무 아쉬웠습니다.   &lt;br&gt;
고생은 고생대로 다했지만, 서울까지 올라와서 몇 백만원(생활비 포함)을 쓰면서 얻은거라곤 &lt;strong&gt;압축 파일로된 팀 프로젝트와 PPT가 전부&lt;/strong&gt;였습니다.  &lt;/p&gt;
&lt;p&gt;물론 이 과정을 듣지 못했다면 개발자로서 시작 조차 못했겠죠.  &lt;br&gt;
하지만 굉장히 아쉬웠습니다.  &lt;br&gt;
이렇게 6개월을 보내면 진짜 &lt;strong&gt;좋은 개발자가 될 수 있나요?&lt;/strong&gt;  &lt;br&gt;
지금 다시 생각해도 너무나 아쉬움이 많았던 6개월이였습니다.  &lt;/p&gt;
&lt;p&gt;여기까지는 제 경험담이며, 아래는 국비교육 수강 예정이신 분들을 위한 이야기입니다.&lt;/p&gt;
&lt;h2 id=&quot;1-3-국비교육-진행시-팁&quot;&gt;1-3. 국비교육 진행시 팁&lt;/h2&gt;
&lt;p&gt;첫번째는 &lt;strong&gt;주제 선정에 절대 정성을 쏟지마세요&lt;/strong&gt;.&lt;br&gt;
어차피 &lt;strong&gt;그 주제와 아이디어로 사업 하지 않습니다&lt;/strong&gt;.  &lt;br&gt;
서류와 면접을 진행하는 시니어 개발자분들이 여러분의 포트폴리오가 얼마나 기획이 참신하고 UI가 화려한지를 보지 않습니다.  &lt;br&gt;
한 줄이라도 직접 짠 코드를 보고 싶어하세요.  &lt;br&gt;
주제 선정에 2주 이상 사용하게 되면 이후 프로젝트 기간이 너무 힘듭니다.  &lt;br&gt;
2~3일안에 주제선정을 끝내신 후, 최대한 빠르게 개발을 시작 하시는것을 추천드립니다.&lt;/p&gt;
&lt;p&gt;두번째는 &lt;strong&gt;되도록이면 팀 프로젝트를 하지 마세요&lt;/strong&gt;  &lt;br&gt;
강사님이나 교육센터에 요청해서 가능하다면 개인 프로젝트를 진행하세요.  &lt;br&gt;
외로울수는 있겠지만, 교육 수료후 본인에게 도움 되는건 &lt;strong&gt;직접 고민하고 개발했던 내용&lt;/strong&gt;들입니다.  &lt;br&gt;
간단한 CRUD 게시판을 만드세요.  &lt;br&gt;
게시판을 만들면서 Github과 테스트 코드 작성을 연습하세요.  &lt;br&gt;
시간이 된다면 이 과정을 블로그에 남겨보세요.  &lt;br&gt;
취업준비할때 가장 강력한 무기가 됩니다.&lt;/p&gt;
&lt;h2 id=&quot;1-4-국비교육-들을까-말까&quot;&gt;1-4. 국비교육 들을까 말까?&lt;/h2&gt;
&lt;p&gt;개인적으로 주변 동생들에게 항상 하는 얘기인데, 국비교육보다는 &lt;strong&gt;알바로 돈을 모아서라도 &lt;a href=&quot;http://codesquad.kr/&quot;&gt;코드스쿼드&lt;/a&gt; 교육&lt;/strong&gt;을 추천합니다.  &lt;br&gt;
(코드스쿼드에서 몰래 뭘 받았다거나 하는건 전혀 없습니다.)  &lt;/p&gt;
&lt;p&gt;재작년, 작년에 코드스쿼드의 박재성 교수님 교육을 받으면서 &lt;strong&gt;처음에 이 교육을 받았으면 훨씬 수월하게 커리어를 쌓을수 있었겠다&lt;/strong&gt;는 생각을 계속 했습니다.  &lt;br&gt;
(&lt;strong&gt;쓴 돈만큼 얻어가는건 불변의 진리&lt;/strong&gt;인것 같습니다.)  &lt;/p&gt;
&lt;p&gt;비전공자분들은 이쪽 계통의 선배나 동료가 없습니다.  &lt;br&gt;
그렇다보니&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;좋은 멘토&lt;/li&gt;
&lt;li&gt;좋은 동료&lt;/li&gt;
&lt;li&gt;올바른 학습방법&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 3가지를 어떻게든 찾아야 합니다.  &lt;/p&gt;
&lt;p&gt;하지만 &lt;strong&gt;국비교육에서 이를 얻기는 쉽지 않습니다&lt;/strong&gt;.  &lt;br&gt;
특히 수강생들 사이에서 좋은 학습 문화 구성하기가 정말 어렵습니다.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;공짜는 절박함의 허들을 낮춥니다&lt;/strong&gt;.  &lt;br&gt;
개발자가 되고 싶다는 절박함을 가지신 분들도 계시겠지만, 그냥 오시는 분들도 정말 많이 봤습니다.  &lt;br&gt;
유료 교육을 계속 지지하는 이유가 이 때문입니다.  &lt;br&gt;
어차피 교육센터는 인원만 채우면 &lt;strong&gt;국가에서 돈을 주기 때문에&lt;/strong&gt; 교육 시작 이후로는 관리에 굉장히 소홀합니다. (주변의 친한 동생들이 &lt;strong&gt;팀프로젝트를 혼자서 다 진행&lt;/strong&gt;하는걸 보고 확신했습니다.)  &lt;br&gt;
100~300만원이란 금액은 절박함을 가지신 분들과 그냥 오시는 분들을 거를 수 있는 약간의 허들이 됩니다.  &lt;/p&gt;
&lt;p&gt;절박함과 목표가 뚜렷하신 분들끼리 모여 좋은 멘토를 만나게 되면 큰 시너지가 발휘됩니다.  &lt;br&gt;
제일 큰 장점은 본인의 목표치가 달라집니다.  &lt;br&gt;
일단 취업하자에서 &quot;&lt;strong&gt;나도 네이버/카카오/라인에 입사할 수 있다&lt;/strong&gt;&quot; 로 변합니다.  &lt;br&gt;
같이 공부한 동료가 좋은 회사로 취업하면 자연스레 변화가 시작됩니다.  &lt;br&gt;
그래서 6개월간 공짜로 국비교육 받기 보다는 3개월 알바를 한뒤, 3개월간 유료 교육 기관 수강하시는 것을 훨씬 더 추천합니다.  &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;코드스쿼드에서 TDD, 클린코드, 코드리뷰 등의 좋은 학습방법과 네이버/AWS등에서 활동하신뒤, NHN Next에서 교수로 계셨던 좋은 멘토님들 등은 너무나 잘 알려진 내용이기 때문에 굳이 언급하지 않고 좋은 동료에 대해서만 얘기했습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;여담이지만, 지금 돌이켜 생각해보면 진짜 &lt;strong&gt;제대로된 자바 백엔드 개발자 커리큘럼&lt;/strong&gt;이라면 아래 내용들이 무조건 포함되있어야 한다고 생각합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git &amp;amp; Github&lt;/li&gt;
&lt;li&gt;Unit Test&lt;/li&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;Shell Script&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Java &amp;amp; Spring &amp;amp; 데이터베이스는 당연히 포함되어있다고 가정합니다.)  &lt;/p&gt;
&lt;p&gt;이 외에 나머지 과목이 포함되어있으면 진짜 커리큘럼에 신경안쓰는 교육기관입니다.  &lt;br&gt;
예를 들어 &lt;strong&gt;자바 백엔드 개발자 과정인데 안드로이드가 포함&lt;/strong&gt;되어있으면 커리큘럼을 전혀 신경 안쓰는 교육 기관입니다.  &lt;br&gt;
마찬가지로 교육 과정 타이틀과 내용에 NCS, 머신러닝, 빅데이터, IOT, 가상화폐 등의 단어가 포함되있으면 믿고 거르셔도 됩니다.  &lt;br&gt;
유행하는 단어를 무작정 추가한것 뿐입니다.  &lt;/p&gt;
&lt;p&gt;국비교육센터를 선택하셔야 한다면 위에서 언급한 내용을 꼭 확인해보세요.&lt;/p&gt;
&lt;h2 id=&quot;1-5-마무리&quot;&gt;1-5. 마무리&lt;/h2&gt;
&lt;p&gt;어떻게 하다보니 국비교육을 굉장히 비판하게 됐네요.  &lt;br&gt;
이건 어디까지나 &lt;strong&gt;몇년 전에 저와 제 주변 지인들의 경험&lt;/strong&gt;을 토대로 한 이야기라 요즘과는 많이 차이날수 있습니다.  &lt;br&gt;
지금은 많이 다를거라 조심스레 추측합니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;패스트캠퍼스에서 &lt;a href=&quot;http://www.fastcampus.co.kr/dev_school_jwp/&quot;&gt;Java 웹 프로그래밍 마스터&lt;/a&gt; 과정이 신설됐습니다.  &lt;br&gt;
  담당 강사이신 김성박님이 워낙 개발자로서/강사로서 유명하시기 때문에 이 강좌도 한번 고려해보셔도 좋을것 같습니다.  &lt;br&gt;
  참고: &lt;a href=&quot;https://www.youtube.com/watch?v=DEZrPpPtjkY&amp;amp;index=6&amp;amp;list=PLHpaQi-LiUCx-vcbcnpU5Tzv2X99WCowN&quot;&gt;즐거운 자바&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
  &lt;p&gt;최근에 &lt;a href=&quot;http://cafe.naver.com/javachobostudy/150080&quot;&gt;남궁성님&lt;/a&gt;이 진행하시는 국비 교육은 기존 국비교육과 달리 커리큘럼과 학습 문화 둘다 잘되어있다고 들었으니 참고하세요!  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;다음편에선 본격 취준생활에 대한 이야기를 전달드리겠습니다.  &lt;br&gt;
감사합니다^^&lt;/p&gt; &lt;/article&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;
&lt;div style=&quot;font-size:18px;text-align:justify;word-wrap:break-word;color:#2d6594;font-weight:normal;text-decoration:none&quot;&gt; 
&lt;p&gt;블로그가 도움이 되셨다면 아래 광고 클릭을 부탁드립니다!&lt;/p&gt;
&lt;p&gt;좋은 리뷰와 광고클릭은 앞으로 계속 글을 쓰는데 큰 힘이 됩니다!&lt;/p&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;script async src=&quot;http://jojoldu.tistory.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-5349709105365293&quot; data-ad-slot=&quot;5488859360&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;
&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=http://jojoldu.tistory.com/277&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowtransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>3번째 직장에 오기까지 - 1. 국비교육기간</title>
    <updated>2018-03-14T20:54:44+09:00</updated>
    <dc:date>2018-03-14T20:54:44+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>창천향로 창천향로</name>
    </author>
    <id>http://jojoldu.tistory.com/276</id>
    <link href="http://jojoldu.tistory.com/276"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;
&lt;script async src=&quot;http://jojoldu.tistory.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-5349709105365293&quot; data-ad-slot=&quot;5488859360&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt; 
&lt;p&gt;&lt;img src=&quot;http://cfile25.uf.tistory.com/image/99B4B4465AA5ECF30EDA3B&quot; alt=&quot;로고&quot;&gt;&lt;/p&gt;
&lt;p&gt;기존의 &lt;a href=&quot;http://jojoldu.tistory.com/275&quot;&gt;Gradle + SpringBoot + Travis CI + Coveralls + 텔레그램 연동하기&lt;/a&gt;가 &lt;br&gt;
일반 Gradle 프로젝트를 다루기 때문에 &lt;a href=&quot;http://jojoldu.tistory.com/123&quot;&gt;Gradle Multi Module&lt;/a&gt; 프로젝트에서는 Coveralls를 그대로 적용할수가 없었습니다.  &lt;br&gt;
그래서 이번 시간에는 &lt;strong&gt;Gradle Multi Module에서 Coveralls를 연동&lt;/strong&gt;하는 방법을 소개 드립니다.   &lt;br&gt;
모든 코드는 &lt;a href=&quot;https://github.com/jojoldu/gradle-multi-module-coveralls&quot;&gt;Github&lt;/a&gt;에 있으니 참고하시면 됩니다.  &lt;/p&gt;
&lt;h2 id=&quot;적용&quot;&gt;적용&lt;/h2&gt;
&lt;p&gt;앞서 소개드린 &lt;a href=&quot;http://jojoldu.tistory.com/275&quot;&gt;일반 Gradle 프로젝트에서 Travis CI &amp;amp; Coveralls 연동하기&lt;/a&gt;를 이미 해보셨다는 가정하에 시작합니다.  &lt;br&gt;
만약 아직 진행하지 않으셨다면, &lt;strong&gt;본인의 멀티모듈 프로젝트에 해당 과정을 먼저 진행&lt;/strong&gt;해보세요!  &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;여기서는 멀티모듈 구조를 만드는 방법은 소개하지 않습니다.  &lt;br&gt;
  이미 멀티모듈 구조인 프로젝트에 coveralls를 적용하는 포스팅이라고 보시면 됩니다.  &lt;br&gt;
  Gradle 멀티 모듈이 처음이시라면 &lt;a href=&quot;http://jojoldu.tistory.com/123&quot;&gt;이전 포스팅&lt;/a&gt;을 참고해보세요!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;샘플 프로젝트의 구조는 다음과 같이 core/external/web 이라는 3개의 모듈로 구성되어있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile6.uf.tistory.com/image/996F734F5AA5ECF303A182&quot; alt=&quot;구조&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;일반적인 멀티모듈 구조라고 보시면 됩니다.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;컨셉은 간단합니다.  &lt;br&gt;
&quot;&lt;strong&gt;서브 모듈들을 각각 JacocoReport 수행후, 이를 취합해서 Coveralls에 전송한다&lt;/strong&gt;&quot;입니다.  &lt;br&gt;
기존과 비교해서 변경하는 점은 &lt;code&gt;build.grade&lt;/code&gt;과 &lt;code&gt;.coveralls.yml&lt;/code&gt;두개 뿐입니다.  &lt;/p&gt;
&lt;p&gt;build.gradle을 아래와 같이 변경합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;yal language-yal&quot;&gt;buildscript {
    ...
    dependencies {
        ...
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
    }
}

// 전체 프로젝트 일괄 적용
allprojects {
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'jacoco'

    repositories {
        jcenter()
    }
}

// 서브모듈들 설정
subprojects {
    ...

    jacocoTestReport {
        reports {
            html.enabled = true // 개발자 확인용
            xml.enabled = true // coveralls 전송용
        }
    }
}

// 각 서브모듈들의 JacocoReport 취합
task jacocoRootReport(type: JacocoReport) {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn = subprojects.test
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true // 개발자 확인용
        xml.enabled = true // coveralls 전송용
    }
}

// coveralls Task로 jacocoRootReport 로 취합된 결과만 전송 
coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = &quot;${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;코드별 설명은 주석으로 대체하겠습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;그리고 &lt;code&gt;.travis.yml&lt;/code&gt;에는 &lt;code&gt;after_success:&lt;/code&gt;를 다음과 같이 수정합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;yal language-yal&quot;&gt;after_success:
- ./gradlew jacocoRootReport coveralls&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;jacocoRootReport 수행후 coveralls을 실행합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이렇게 변경후 Github에 Push 해보시면!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile1.uf.tistory.com/image/999C96335AA5ECF33121AD&quot; alt=&quot;결과&quot;&gt;&lt;/p&gt;
&lt;p&gt;전체 커버리지와 &lt;strong&gt;각 모듈별 커버리지&lt;/strong&gt;가 모두 출력됩니다!  &lt;br&gt;
어느 모듈의 커버리지가 낮은지, 떨어졌는지 쉽게 확인할수 있겠죠?  &lt;/p&gt; &lt;/article&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;
&lt;div style=&quot;font-size:18px;text-align:justify;word-wrap:break-word;color:#2d6594;font-weight:normal;text-decoration:none&quot;&gt; 
&lt;p&gt;블로그가 도움이 되셨다면 아래 광고 클릭을 부탁드립니다!&lt;/p&gt;
&lt;p&gt;좋은 리뷰와 광고클릭은 앞으로 계속 글을 쓰는데 큰 힘이 됩니다!&lt;/p&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;script async src=&quot;http://jojoldu.tistory.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-5349709105365293&quot; data-ad-slot=&quot;5488859360&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;
&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=http://jojoldu.tistory.com/276&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowtransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>Gradle 멀티 모듈에서 TravisCI &amp; Coveralls 연동</title>
    <updated>2018-03-12T11:58:59+09:00</updated>
    <dc:date>2018-03-12T11:58:59+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>창천향로 창천향로</name>
    </author>
    <id>http://jojoldu.tistory.com/275</id>
    <link href="http://jojoldu.tistory.com/275"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;div class=&quot;tt_adsense_top&quot; style=&quot;margin-bottom:30px&quot;&gt;
&lt;script async src=&quot;http://jojoldu.tistory.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-5349709105365293&quot; data-ad-slot=&quot;5488859360&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;
&lt;article class=&quot;markdown-body entry-content&quot; itemprop=&quot;text&quot;&gt; 
&lt;p&gt;&lt;img src=&quot;http://cfile21.uf.tistory.com/image/997D98385AA35CEF3672C3&quot; alt=&quot;travis&quot;&gt;&lt;/p&gt;
&lt;p&gt;최근에 개인프로젝트를 진행하면 무조건 진행하는 것이 바로 CI 연동입니다.  &lt;br&gt;
지속적으로 통합 빌드/테스트가 된다는게 개인 프로젝트에서는 정말 큰 도움이 됩니다.  &lt;br&gt;
개인프로젝트에서 CI연동을 하면 다음과 같은 작업이 자동화됩니다.  &lt;/p&gt;
&lt;p&gt;하나의 기능을 수정 혹은 추가 후 Git Push  &lt;br&gt;
-&amp;gt; Travis CI에서 통합 빌드 및 테스트  &lt;br&gt;
-&amp;gt; Coverall에서 테스트 커버리지 관리  &lt;br&gt;
-&amp;gt; 텔레그램으로 CI 결과 알람  &lt;/p&gt;
&lt;p&gt;물론 여기서 AWS CodeDeploy나 다른 CD 툴을 사용한면 배포까지 자동화 시킬수 있습니다.  &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;관련된 내용은 &lt;a href=&quot;http://jojoldu.tistory.com/265&quot;&gt;스프링부트로 웹 서비스 출시하기 - 6. TravisCI &amp;amp; AWS CodeDeploy로 배포 자동화 구축하기&lt;/a&gt;를 참고해보세요!  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;앞서 &lt;a href=&quot;http://jojoldu.tistory.com/250?category=635883&quot;&gt;스프링부트로 웹 서비스 출시하기 시리즈&lt;/a&gt;에서 CI/CD 환경을 소개 드렸는데요.  &lt;br&gt;
여기서 &lt;strong&gt;Coverall로 테스트커버리지 관리, 텔레그램 봇과의 연동&lt;/strong&gt; 등이 누락되기도 했었고, 시리즈 전체 없이 단순 Java/Gradle 환경에서 CI연동 방법만 보고 싶으신 분들이 계셔서 정리하게 되었습니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;이번편 다음으로는 &lt;strong&gt;Gradle 멀티 모듈환경에서의 Coverall 연동 방법&lt;/strong&gt;을 소개드릴 예정입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;자 그럼 본격적으로 시작하겠습니다!&lt;/p&gt;
&lt;h2 id=&quot;1-프로젝트-생성-및-github-연동&quot;&gt;1. 프로젝트 생성 및 Github 연동&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;모든 프로젝트 코드는 &lt;a href=&quot;https://github.com/jojoldu/gradle-travisci-coverall&quot;&gt;Github&lt;/a&gt;에 있습니다.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;간단한 스프링부트 프로젝트를 생성하겠습니다.  &lt;br&gt;
꼭 스프링부트일 필요는 없으며, Java/Gradle 환경이면 무관합니다.  &lt;br&gt;
프로젝트 생성후, 간단한 코드를 추가하겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;public class Calculator {
    public static long sum(long num1, long num2){
        return num1+num2;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고 이를 테스트하는 코드를 하나 추가하겠습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java language-java&quot;&gt;import org.junit.Test;

import static org.assertj.core.api.Assertions.assertThat;

public class CalculatorTest {

    @Test
    public void 숫자2개를_더한값이_반환된다(){
        //given
        long num1 = 1;
        long num2 = 2;

        //when
        long sum = Calculator.sum(num1, num2);

        //thwn
        assertThat(sum).isEqualTo(3);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;자 그리고 이 프로젝트를 &lt;a href=&quot;https://github.com/jojoldu/gradle-travisci-coverall&quot;&gt;Github&lt;/a&gt;과 연동합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile22.uf.tistory.com/image/99BE33385AA35CF433C663&quot; alt=&quot;github&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Github 연동이 처음이라면 진유리님께서 만드신 &lt;a href=&quot;https://milooy.wordpress.com/2017/06/21/working-together-with-github-tutorial/&quot;&gt;초심자를 위한 Github 협업 튜토리얼&lt;/a&gt;를 참고해보세요!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;자 그럼 이제 &lt;strong&gt;테스트 코드가 포함된 Gradle 프로젝트가 Github&lt;/strong&gt;에 올라갔습니다!  &lt;br&gt;
본격적으로 연동 작업을 시작해보겠습니다.&lt;/p&gt;
&lt;h2 id=&quot;2-travis-ci-연동&quot;&gt;2. Travis CI 연동&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis CI&lt;/a&gt;로 접속합니다.  &lt;br&gt;
로그인 하신뒤, 본인의 프로필 페이지로 이동합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile26.uf.tistory.com/image/993616495AA35CEE1CB354&quot; alt=&quot;travis1&quot;&gt;&lt;/p&gt;
&lt;p&gt;방금 올린 저장소를 검색해서 찾아 아래와 같이 활성화시킵니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile9.uf.tistory.com/image/994C64505AA35CF1269E60&quot; alt=&quot;travis2&quot;&gt;&lt;/p&gt;
&lt;p&gt;그리고 프로젝트에 &lt;code&gt;.travis.yml&lt;/code&gt; 파일을 생성해서 아래 내용을 추가합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;yml language-yml&quot;&gt;language: java
jdk:
  - openjdk8

branches:
  only:
    - master

# Travis CI 서버의 Cache 활성화
cache:
  directories:
    - '$HOME/.m2/repository'
    - '$HOME/.gradle'

# clean 후 Build (Build시 자동으로 test 수행)
script: &quot;./gradlew clean build&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile3.uf.tistory.com/image/99945C345AA35CF41A81AA&quot; alt=&quot;travis3&quot;&gt;&lt;/p&gt;
&lt;p&gt;여기까지 하셨다면 바로 Git Commit &amp;amp; Push 합니다.  &lt;br&gt;
그리고 다시 Travis CI로 가보시면!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile5.uf.tistory.com/image/99F60B435AA35CF025BA31&quot; alt=&quot;travis4&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;빌드가 성공적으로 수행&lt;/strong&gt;됐음을 알 수 있습니다.  &lt;br&gt;
이제는 Master 브랜치로 Push 할때마다 Travis CI에서 빌드가 계속 수행될 것입니다.  &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;develop 브랜치로 변경하길 원하시면 .travis.yml에서 &lt;strong&gt;branches에서 master 부분을 develop으로 변경&lt;/strong&gt;하시면 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;그리고 빌드 상태 라벨을 복사해서 Github 프로젝트에 추가합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile6.uf.tistory.com/image/99893B3E5AA35CF01A7F56&quot; alt=&quot;travis5&quot;&gt;&lt;/p&gt;
&lt;p&gt;여기서 복사한 코드를 프로젝트 안의 README.md에 붙여넣습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile23.uf.tistory.com/image/99DFCF4E5AA35CF220E629&quot; alt=&quot;travis6&quot;&gt;&lt;/p&gt;
&lt;p&gt;이것도 마찬가지로 push를 하시면!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile28.uf.tistory.com/image/99547D3B5AA35CF0273425&quot; alt=&quot;travis7&quot;&gt;&lt;/p&gt;
&lt;p&gt;Github에 성공적으로 반영 되었습니다.&lt;/p&gt;
&lt;h2 id=&quot;3-coverall-연동&quot;&gt;3. Coverall 연동&lt;/h2&gt;
&lt;p&gt;Travis CI와 연동된 프로젝트를 바로 &lt;a href=&quot;https://coveralls.io/&quot;&gt;Coveralls&lt;/a&gt;와 연동해보겠습니다.  &lt;br&gt;
Coveralls는 Travis CI와 연동해서 &lt;strong&gt;테스트 커버리지를 관리해주는 웹 서비스&lt;/strong&gt;입니다.  &lt;br&gt;
즉, Travis CI에서 테스트 커버리지 측정 도구 (ex: jacoco)를 실행해서 coveralls로 결과를 전송하면 이 결과를 통계로 남기고 보여주는 서비스 입니다.  &lt;br&gt;
이 측정치가 높으면 높을수록 견고한 프로젝트임을 알 수 있겠죠?  &lt;br&gt;
(물론 테스트 커버리지가 전부일순 없습니다^^;)  &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://coveralls.io&quot;&gt;사이트&lt;/a&gt;로 접속해서 메인화면의 좌측에 있는 &lt;strong&gt;GET STARTED FOR FREE&lt;/strong&gt;을 클릭합니다.  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile3.uf.tistory.com/image/99FE04445AA35CF421078E&quot; alt=&quot;coveralls1&quot;&gt;&lt;/p&gt;
&lt;p&gt;Github 으로 로그인합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile25.uf.tistory.com/image/99F7BB415AA35CF42E25C5&quot; alt=&quot;coveralls2&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile3.uf.tistory.com/image/997BC83A5AA35CF519EAAB&quot; alt=&quot;coveralls3&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile22.uf.tistory.com/image/99185D3C5AA35CF22B1D88&quot; alt=&quot;coveralls4&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Details&lt;/strong&gt; 버튼을 클릭하면 아래와 같이 기본 가이드가 보입니다.  &lt;br&gt;
여기서 &lt;code&gt;repo_token: 토큰값&lt;/code&gt; 이 있는 부분을 복사합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile2.uf.tistory.com/image/99E8FD4B5AA35CF40B8AEA&quot; alt=&quot;coveralls5&quot;&gt;&lt;/p&gt;
&lt;p&gt;그리고 프로젝트에 &lt;code&gt;.coveralls.yml&lt;/code&gt;을 생성해서 복사한 내용을 그대로 추가합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile7.uf.tistory.com/image/99B977385AA35CF43276D3&quot; alt=&quot;coveralls6&quot;&gt;&lt;/p&gt;
&lt;p&gt;자 연동은 완료되었으니 이제 테스트 커버리지를 측정할 도구를 Gradle에 추가하겠습니다.  &lt;br&gt;
우리가 사용할 도구는 바로 &lt;a href=&quot;http://www.eclemma.org/jacoco/&quot;&gt;jacoco&lt;/a&gt; 입니다.  &lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;coveralls는 결국 직접 테스트 커버리지를 측정하진 않습니다.  &lt;br&gt;
  프로젝트에 내장된 측정도구를 Travis CI에서 사용해서 coveralls 사이트로 전송해야만 합니다.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;jacoco를 사용해 coveralls로 전송해야하기 때문에 Gradle의 플러그인을 하나 추가하겠습니다.  &lt;br&gt;
추가할 플러그인은 &lt;a href=&quot;https://github.com/kt3k/coveralls-gradle-plugin&quot;&gt;coveralls-gradle-plugin&lt;/a&gt; 입니다.  &lt;/p&gt;
&lt;p&gt;프로젝트의 build.gradle에 다음과 같은 코드를 추가합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile6.uf.tistory.com/image/9985D03B5AA35CF4249A0E&quot; alt=&quot;coveralls7&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;yml language-yml&quot;&gt;buildscript {
    ...
    dependencies {
        ...
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
    }
}

apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'

...

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고 &lt;span style=&quot;font-family: monospace;&quot;&gt;.travis.yml&lt;/span&gt;에도 한줄의 코드를 추가합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;yml language-yml&quot;&gt;language: java
jdk:
  - openjdk8

branches:
  only:
    - master

# Travis CI 서버의 Cache 활성화
cache:
  directories:
    - '$HOME/.m2/repository'
    - '$HOME/.gradle'

# clean 후 Build (Build시 자동으로 test 수행)
script: &quot;./gradlew clean build&quot;

after_success:
- ./gradlew jacocoTestReport coveralls&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;자 이렇게까지 하시면 완료 됩니다.  &lt;br&gt;
바로 Github으로 Push 해봅니다.  &lt;br&gt;
Travis CI의 빌드가 끝난뒤 coveralls 사이트를 방문해보시면!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile21.uf.tistory.com/image/9958DE4F5AA35CF4124957&quot; alt=&quot;coveralls8&quot;&gt;&lt;/p&gt;
&lt;p&gt;테스트커버리지가 출력 되는걸 알 수 있습니다.  &lt;br&gt;
프로젝트를 클릭해서 들어가보시면 자세한 상세 통계가 나옵니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile2.uf.tistory.com/image/99D2BA4C5AA35CF327539D&quot; alt=&quot;coveralls9&quot;&gt;&lt;/p&gt;
&lt;p&gt;Coveralls까지 연동했으니 라벨을 추가하겠습니다.  &lt;br&gt;
BADGE의 &lt;strong&gt;EMBED&lt;/strong&gt;를 클릭합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile23.uf.tistory.com/image/993C2B475AA35CF42A946D&quot; alt=&quot;coveralls10&quot;&gt;&lt;/p&gt;
&lt;p&gt;마크다운 코드를 복사해서 README.md에 추가합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile27.uf.tistory.com/image/99C7ED445AA35CF123D4BB&quot; alt=&quot;coveralls11&quot;&gt;&lt;/p&gt;
&lt;p&gt;최종 수정후 Github으로 Push 해보시면!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile30.uf.tistory.com/image/99DC2B485AA35CF12C3C22&quot; alt=&quot;coveralls12&quot;&gt;&lt;/p&gt;
&lt;p&gt;Coveralls 라벨도 추가되었습니다!&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;좀 더 자세한 내용은 &lt;a href=&quot;https://blog.outsider.ne.kr/954&quot;&gt;outsider님의 포스팅&lt;/a&gt;을 참고해보세요!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;4-텔레그램-봇-연동&quot;&gt;4. 텔레그램 봇 연동&lt;/h2&gt;
&lt;p&gt;Travis CI를 통해서 빌드를 하기 때문에 성공/실패 알람을 받아야하는데요.  &lt;br&gt;
기본적인 방법은 메일을 통해 받는것이지만, 메일은 아무래도 잘 확인을 안하게 되어서 다른 메신저를 통해서 알람을 받습니다.  &lt;br&gt;
대중적인 방법은 슬랙인데, 슬랙이 아무래도 네이티브 앱이 아닌지라 속도가 많이 느려 개인적으로 선호하진 않습니다.  &lt;br&gt;
그래서 최근에는 &lt;a href=&quot;http://www.telegram.pe.kr/&quot;&gt;텔레그램&lt;/a&gt;을 사용하고 있습니다.  &lt;br&gt;
텔레그램 설치와 가입은 여기서는 생략하겠습니다.  &lt;/p&gt;
&lt;p&gt;텔레그램 봇 스토어에서 Travis CI 봇을 찾습니다. &lt;a href=&quot;https://storebot.me/bot/travisci_build_bot&quot;&gt;링크&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;좌측의 &lt;strong&gt;Add To&lt;/strong&gt;를 클릭합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile2.uf.tistory.com/image/995F153A5AA35CF11CD84B&quot; alt=&quot;telegram1&quot;&gt;&lt;/p&gt;
&lt;p&gt;앱이 열리면서 Travis CI 봇의 안내에 따라 진행하시면 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile24.uf.tistory.com/image/996729485AA35CF20EF2BB&quot; alt=&quot;telegram2&quot;&gt;&lt;/p&gt;
&lt;p&gt;여기서 깃헙 주소는 전체가 아닌 &lt;strong&gt;username/repository이름&lt;/strong&gt; 으로 하시면 됩니다.  &lt;br&gt;
가이드대로 다 하셨으면 다시 프로젝트의 &lt;code&gt;.travis.yml&lt;/code&gt; 에 코드를 추가합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;yml language-yml&quot;&gt;notifications:
    webhooks: https://fathomless-fjord-24024.herokuapp.com/notify&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile29.uf.tistory.com/image/9993DF415AA35CF22629DE&quot; alt=&quot;telegram3&quot;&gt;&lt;/p&gt;
&lt;p&gt;자 여기까지 다하셨으면 바로 Github으로 Push 해봅니다.  &lt;br&gt;
그러면!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cfile24.uf.tistory.com/image/99A2CB375AA35CF12EC9BA&quot; alt=&quot;telegram4&quot;&gt;&lt;/p&gt;
&lt;p&gt;텔레그램으로 빌드 성공 메세지가 전달됩니다.  &lt;/p&gt;
&lt;h2 id=&quot;마무리&quot;&gt;마무리&lt;/h2&gt;
&lt;p&gt;이제는 개인프로젝트를 진행하면서도 &lt;strong&gt;빌드 &amp;amp; 테스트 &amp;amp; 테스트커버리지 통계 &amp;amp; 빌드 성공/실패 알람&lt;/strong&gt; 이 모든것이 자동화되서 진행됩니다!  &lt;br&gt;
조금더 완성도 높은 개인 프로젝트를 진행하시는데 도움이 되지 않을까 생각합니다.  &lt;br&gt;
별거 아닌 내용이지만 실제로 적용하면 개인에겐 크게 도움이 되니 꼭꼭 적용해보시길 추천드립니다.  &lt;br&gt;
다음에도 유용한 정보 공유드리겠습니다.  &lt;br&gt;
끝까지 봐주셔서 감사합니다!!&lt;/p&gt; &lt;/article&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class=&quot;tt_adsense_bottom&quot; style=&quot;margin-top:30px&quot;&gt;
&lt;div style=&quot;font-size:18px;text-align:justify;word-wrap:break-word;color:#2d6594;font-weight:normal;text-decoration:none&quot;&gt; 
&lt;p&gt;블로그가 도움이 되셨다면 아래 광고 클릭을 부탁드립니다!&lt;/p&gt;
&lt;p&gt;좋은 리뷰와 광고클릭은 앞으로 계속 글을 쓰는데 큰 힘이 됩니다!&lt;/p&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;script async src=&quot;http://jojoldu.tistory.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- 반응형 --&gt;
&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-5349709105365293&quot; data-ad-slot=&quot;5488859360&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;
&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=http://jojoldu.tistory.com/275&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowtransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>Gradle + SpringBoot + Travis CI + Coveralls + 텔레그램 연동하기</title>
    <updated>2018-03-10T13:20:05+09:00</updated>
    <dc:date>2018-03-10T13:20:05+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>이준범</name>
    </author>
    <id>https://beomi.github.io/2018/03/09/Truncated_or_oversized_response_headers_received_from_daemon_process_django_wsgi/</id>
    <link href="https://beomi.github.io/2018/03/09/Truncated_or_oversized_response_headers_received_from_daemon_process_django_wsgi/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;h2 id=&quot;문제-발생-환경&quot;&gt;문제 발생 환경&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;OS: Ubuntu 16.04 LTS&lt;/li&gt;
  &lt;li&gt;Python 3.5.2&lt;/li&gt;
  &lt;li&gt;Django 2.0.2&lt;/li&gt;
  &lt;li&gt;Apache HTTPd 2.4&lt;/li&gt;
  &lt;li&gt;numpy / Pandas / pymssql 등 사용중&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;문제의-발생&quot;&gt;문제의 발생&lt;/h2&gt;

&lt;p&gt;장고 배포를 마친 뒤 배포 서버에 접속시 화면이 뜨지 않고 &lt;code class=&quot;highlighter-rouge&quot;&gt;500&lt;/code&gt;에러가 났던 상황.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Timeout when reading response headers from daemon process &lt;span class=&quot;s1&quot;&gt;'djangoproject'&lt;/span&gt;: /home/ubuntu/djangoproject/djangoproject/wsgi.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;에러 로그로 살펴보면 위와 같이 “Timeout when reading response headers from daemon process”이라는 문제가 발생했다.&lt;/p&gt;

&lt;h2 id=&quot;문제-원인&quot;&gt;문제 원인&lt;/h2&gt;

&lt;p&gt;Numpy나 Pandas와 같은 C 의존 라이브러리들은 파이썬 인터프리터 중 메인 인터프리터에서 사용해야 한다. 만약 &lt;code class=&quot;highlighter-rouge&quot;&gt;mod_wsgi&lt;/code&gt;등을 통해 생성된 서브 인터프리터를 사용할 경우 GIL로 인한 Deadlock이 발생하거나 정확하지 않은 결과, 혹은 파이썬 인터프리터의 예기치 못한 종료를 유발할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;해결법&quot;&gt;해결법&lt;/h2&gt;

&lt;p&gt;따라서 WSGI Application에서 사용할 파이썬 인터프리터에다 시스템의 메인 인터프리퍼를 지정해주면 된다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/apache2/apache2.conf&lt;/code&gt; 경로의 파일 제일 아래에 아래 코드를 추가해준다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WSGIApplicationGroup %{GLOBAL}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드를 추가해 준 뒤 Apache2를 재시작(&lt;code class=&quot;highlighter-rouge&quot;&gt;service apache2 restart&lt;/code&gt;)한다.&lt;/p&gt;

&lt;h2 id=&quot;refs&quot;&gt;Refs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://serverfault.com/questions/844761/wsgi-truncated-or-oversized-response-headers-received-from-daemon-process&quot;&gt;(Serverfault) WSGI : Truncated or oversized response headers received from daemon process&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/40413171/django-webfaction-timeout-when-reading-response-headers-from-daemon-process/40414207#40414207&quot;&gt;(Stackoverflow) Django Webfaction ‘Timeout when reading response headers from daemon process’&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://serverfault.com/questions/514242/non-responsive-apache-mod-wsgi-after-installing-scipy/514251#514251&quot;&gt;(Serverfault) Non-responsive apache + mod_wsgi after installing scipy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.google.com/archive/p/modwsgi/wikis/ApplicationIssues.wiki#Python_Simplified_GIL_State_API&quot;&gt;(Google Code) summary Common problems with WSGI applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>Django: Truncated or oversized response headers received from daemon process 에러 해결법</title>
    <updated>2018-03-09T00:00:00+09:00</updated>
    <dc:date>2018-03-09T00:00:00+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>고감자</name>
    </author>
    <id>http://freesearch.pe.kr/archives/4754</id>
    <link href="http://freesearch.pe.kr/archives/4754"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;2월 초에 마이크로소프트웨어에 기고한 원고를 공개한다. 소스코드는 이곳에 공개되어 있다.  Gluon을 공부하면서 코드를 구성하고 모델이 동작 가능하게 하는데 주말 퇴근 후 여가시간을 활용해 약 1.5개월이 소요되었다. 그래도 1.5개월만에 이정도 동작 가능하게 한건  딥러닝 덕분이다. 원고를 청탁 받으면 항상 주제를 상향시켜서 … &lt;a href=&quot;http://freesearch.pe.kr/archives/4754&quot;&gt;계속 읽기 &lt;span class=&quot;meta-nav&quot;&gt;→&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The post &lt;a rel=&quot;nofollow&quot; href=&quot;http://freesearch.pe.kr/archives/4754&quot;&gt;Gluon으로구현해보는 한영기계번역 모형 – 마이크로소프트웨어 기고문&lt;/a&gt; appeared first on &lt;a rel=&quot;nofollow&quot; href=&quot;http://freesearch.pe.kr&quot;&gt;from __future__ import dream&lt;/a&gt;.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>Gluon으로구현해보는 한영기계번역 모형 – 마이크로소프트웨어 기고문</title>
    <updated>2018-03-07T00:26:06+09:00</updated>
    <dc:date>2018-03-07T00:26:06+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>이종립</name>
    </author>
    <id>https://johngrib.github.io/wiki/review-2018/</id>
    <link href="https://johngrib.github.io/wiki/review-2018/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;

</summary>
    <title>2018년 리뷰 모음</title>
    <updated>2018-03-15T20:41:39+09:00</updated>
    <dc:date>2018-03-15T20:41:39+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>이종립</name>
    </author>
    <id>https://johngrib.github.io/wiki/%ED%95%9C%EA%B5%AD%EA%B3%BC%ED%95%99%EB%AC%B8%ED%95%99%EC%83%81-%EC%88%98%EC%83%81%EC%9E%91%ED%92%88%EC%A7%91-%EC%A0%9C2%ED%9A%8C/</id>
    <link href="https://johngrib.github.io/wiki/%ED%95%9C%EA%B5%AD%EA%B3%BC%ED%95%99%EB%AC%B8%ED%95%99%EC%83%81-%EC%88%98%EC%83%81%EC%9E%91%ED%92%88%EC%A7%91-%EC%A0%9C2%ED%9A%8C/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;

</summary>
    <title>(책) 제2회 한국과학문학상 수상작품집</title>
    <updated>2018-03-15T20:41:22+09:00</updated>
    <dc:date>2018-03-15T20:41:22+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>나리 짱!!! naleejang</name>
    </author>
    <id>http://naleejang.tistory.com/203</id>
    <link href="http://naleejang.tistory.com/203"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;오픈스택 Heat 템플릿으로 테넌트 네트워크, 라우터, 그리고 인스턴스 만들기&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;1. 아래 yaml 파일 다운로드 받기&lt;/p&gt;
&lt;p&gt;&lt;a style=&quot;&quot; class=&quot;txc-file&quot;&gt;&lt;br&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;;height:auto;max-width:100%&quot;&gt;&lt;a href=&quot;http://naleejang.tistory.com/attachment/cfile6.uf@996E1F495AA7D307089FFB.yaml&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/tistory_admin/blogs/image/extension/unknown.gif?_version_=2f016834e9d8cad3ffdf7b72c6ad5b3a2c3da2dc&quot; alt=&quot;&quot; style=&quot;vertical-align: middle;&quot;&gt; params.yaml&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;;height:auto;max-width:100%&quot;&gt;&lt;a href=&quot;http://naleejang.tistory.com/attachment/cfile4.uf@993B2A425AA7D3072CBA63.yaml&quot;&gt;&lt;img src=&quot;https://t1.daumcdn.net/tistory_admin/blogs/image/extension/unknown.gif?_version_=2f016834e9d8cad3ffdf7b72c6ad5b3a2c3da2dc&quot; alt=&quot;&quot; style=&quot;vertical-align: middle;&quot;&gt; openstack_heat_create_network_server.yaml&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;2. 오픈스택 데쉬보드 접속 후 오케스트레이션 메뉴로 가기&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:683px;text-align: center;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile30.uf.tistory.com/image/999986335AA7D77707762A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;stack-list.png&quot; height=&quot;346&quot; style=&quot;text-align: center;&quot; width=&quot;683&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;3. 스택 시작 버튼 클릭해 다운로드 받은 템플릿 파일 선택하기&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:683px;text-align: center;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile5.uf.tistory.com/image/995F79335AA7D777240DF4&quot; filemime=&quot;image/jpeg&quot; filename=&quot;create_stack.png&quot; height=&quot;346&quot; style=&quot;text-align: center;&quot; width=&quot;683&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;4. 다음 클릭해 스택이름 입력 후 admin 계정 비밀번호 입력하기. 그리고, 파라메터들이 제대로 들어왔는지 확인하기&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:683px;text-align: center;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile23.uf.tistory.com/image/99A41A335AA7D77606ACBF&quot; filemime=&quot;image/jpeg&quot; filename=&quot;stack_start.png&quot; height=&quot;472&quot; style=&quot;text-align: center;&quot; width=&quot;683&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;5. 파라메터 확인 후 하단의 실행 버튼 클릭하기&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:683px;text-align: center;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile2.uf.tistory.com/image/99DDC7335AA7D7762E844C&quot; filemime=&quot;image/jpeg&quot; filename=&quot;stack_start2.png&quot; height=&quot;472&quot; style=&quot;text-align: center;&quot; width=&quot;683&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;6. 스택 목록에 생성된 스택 확인하기&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:683px;text-align: center;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile7.uf.tistory.com/image/997273335AA7D7750AB86D&quot; filemime=&quot;image/jpeg&quot; filename=&quot;stack_list_result.png&quot; height=&quot;472&quot; style=&quot;text-align: center;&quot; width=&quot;683&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;7. 생성된 스택 클릭을 하면 아래와 같은 토폴로지를 확인할 수 있음.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:683px;text-align: center;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile23.uf.tistory.com/image/997DC7335AA7D774217E3A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;stack_detail_view.png&quot; height=&quot;472&quot; style=&quot;text-align: center;&quot; width=&quot;683&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;8. 개요 탭을 클릭하면 스택의 상세 정보를 확인할 수 있음.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:683px;text-align: center;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile8.uf.tistory.com/image/9927CF3E5AA7D7740E820C&quot; filemime=&quot;image/jpeg&quot; filename=&quot;stack_detail_overview.png&quot; height=&quot;472&quot; style=&quot;text-align: center;&quot; width=&quot;683&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;9. 리소스 탭에서는 생성된 자원 정보를 확인할 수 있음.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:683px;text-align: center;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile23.uf.tistory.com/image/99BEA53E5AA7D7722BFE2A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;stack_detail_resource.png&quot; height=&quot;472&quot; style=&quot;text-align: center;&quot; width=&quot;683&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;10. 이벤트 탭에서는 어떤 순서로 작업이 이루어졌는지 확인할 수 있음.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:683px;text-align: center;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile10.uf.tistory.com/image/99B62A3E5AA7D77218B87A&quot; filemime=&quot;image/jpeg&quot; filename=&quot;stack_detail_event.png&quot; height=&quot;472&quot; style=&quot;text-align: center;&quot; width=&quot;683&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;11. 템플릿 탭에서는 사용된 템플릿을 확인할 수 있음.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:683px;text-align: center;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile1.uf.tistory.com/image/9908313E5AA7D773265EF4&quot; filemime=&quot;image/jpeg&quot; filename=&quot;stack_detail_template.png&quot; height=&quot;472&quot; style=&quot;text-align: center;&quot; width=&quot;683&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;12. 네트워크 토폴로지에서 생성된 네트워크를 확인할 수 있음.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:683px;text-align: center;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile4.uf.tistory.com/image/9937513E5AA7D7710C9E3F&quot; filemime=&quot;image/jpeg&quot; filename=&quot;network_topology.png&quot; height=&quot;553&quot; style=&quot;text-align: center;&quot; width=&quot;683&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;13. 인스턴스 목록에서 생성된 인스턴스를 확인할 수 있음.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:683px;text-align: center;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile28.uf.tistory.com/image/99C13B3E5AA7D77017DED7&quot; filemime=&quot;image/jpeg&quot; filename=&quot;instance_list.png&quot; height=&quot;553&quot; style=&quot;text-align: center;&quot; width=&quot;683&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;14. 인스턴스 상세정보의 콘솔 탭에서 인스턴스에 접속할 수 있음.&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:683px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile25.uf.tistory.com/image/99460A3E5AA7D7702025AB&quot; filemime=&quot;image/jpeg&quot; filename=&quot;instance_console.png&quot; height=&quot;553&quot; style=&quot;&quot; width=&quot;683&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center; clear: none; float: none;&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=http://naleejang.tistory.com/203&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowtransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>openstack heat template for create network and server</title>
    <updated>2018-03-13T22:33:37+09:00</updated>
    <dc:date>2018-03-13T22:33:37+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>아낙시만더</name>
    </author>
    <id>http://dkdlel072.tistory.com/entry/Unity-Multiple-Camera-One-RenderTexture-Capture-%EC%97%AC%EB%9F%AC%EB%8C%80-%EC%B9%B4%EB%A9%94%EB%9D%BC-%ED%95%9C%EC%9E%A5%EC%9C%BC%EB%A1%9C-%EC%BA%A1%EC%B3%90%ED%95%98%EA%B8%B0</id>
    <link href="http://dkdlel072.tistory.com/entry/Unity-Multiple-Camera-One-RenderTexture-Capture-%EC%97%AC%EB%9F%AC%EB%8C%80-%EC%B9%B4%EB%A9%94%EB%9D%BC-%ED%95%9C%EC%9E%A5%EC%9C%BC%EB%A1%9C-%EC%BA%A1%EC%B3%90%ED%95%98%EA%B8%B0"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;여러대 카메라의 Depth가 셋팅이 미리 되어야 한다.
&lt;/p&gt;
&lt;pre class=&quot;brush:c#&quot;&gt;
 void Capture(Camera[] camera_)
        {
            RenderTexture renderTexture = RenderTexture.GetTemporary((int)csMyNGUIResolutionController.Instance.Width,
                (int)csMyNGUIResolutionController.Instance.Height, 16);
            RenderTexture.active = renderTexture;

            foreach (Camera camera in camera_)
            {
                if (camera.enabled)
                {
                    //float fov = camera.fov;
                    camera.targetTexture = renderTexture;
                    camera.Render();
                    camera.targetTexture = null;
                    //camera.fov = fov;
                }
            }

            _snapshotTexture = new Texture2D(renderTexture.width, renderTexture.height, TextureFormat.RGB24, true);
            _snapshotTexture.ReadPixels(new Rect(0, 0, renderTexture.width, renderTexture.height), 0, 0, true);
            _snapshotTexture.Apply();

            _snapshotUITexture.mainTexture = _snapshotTexture;
            _snapshotUITexture.width = _snapshotTexture.width;
            _snapshotUITexture.height = _snapshotTexture.height;

            RenderTexture.active = null;
            RenderTexture.ReleaseTemporary(renderTexture);

            SetAfterSnapshot();

            _originTimeScale = Time.timeScale;
            Time.timeScale = 0f;

            _shotEffectTweener.ResetToBeginning();
            _shotEffectTweener.PlayForward();
        }
&lt;/pre&gt;
&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=http://dkdlel072.tistory.com/444&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowtransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>[Unity] Multiple Camera One RenderTexture Capture (여러대 카메라 한장으로 캡쳐하기)</title>
    <updated>2018-03-08T11:08:35+09:00</updated>
    <dc:date>2018-03-08T11:08:35+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>joone</name>
    </author>
    <id>https://joone.net/2018/03/11/19-%eb%a6%ac%ec%b0%a8%eb%93%9c-%ec%8a%a4%ed%86%a8%eb%a7%8c%ea%b3%bc-%ec%9e%90%ec%9c%a0%ec%86%8c%ed%94%84%ed%8a%b8%ec%9b%a8%ec%96%b4-%ec%9d%b4%ec%95%bc%ea%b8%b0/</id>
    <link href="https://joone.net/2018/03/11/19-%eb%a6%ac%ec%b0%a8%eb%93%9c-%ec%8a%a4%ed%86%a8%eb%a7%8c%ea%b3%bc-%ec%9e%90%ec%9c%a0%ec%86%8c%ed%94%84%ed%8a%b8%ec%9b%a8%ec%96%b4-%ec%9d%b4%ec%95%bc%ea%b8%b0/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;&lt;b&gt;두 해커 집단: 유닉스 공동체와 ITS 공동체&lt;br&gt;
&lt;/b&gt;해커 집단은 태생적으로 두 부류로 나눌 수 있다. AT&amp;amp;T와 UC 버클리 대학을 근거지로 한 유닉스 공동체와 MIT AI Lab이 중심이된 &lt;a href=&quot;https://en.wikipedia.org/wiki/Incompatible_Timesharing_System&quot;&gt;ITS&lt;/a&gt; 공동체가 있다. 두 공동체는 같은점을 많이 가지고 있는데, 우선 초기 구성원들이 멀틱스 개발에 참여한 경험이 있었다는 것, 모두 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%A9%80%ED%8B%B1%EC%8A%A4&quot;&gt;멀틱스 &lt;/a&gt;개발에 회의를 느끼고 독자적 OS를 PDP-10에서 구현했다는 부분이다. 차이라고 하면, 유닉스 공동체는 기술적 진보에 영향을 주었고, ITS 공동체는 해커, 자유소프트웨어, 위키 등 해커 문화, 철학 등에 영향을 주었다. 리눅스는 기술적으로는 유닉스를 따라 커널을 만들었고 ITS 해커의 진정한 계승자인 RMS 지도 아래 개발한 GNU 툴을 사용했다. 또한 ITS 공동체으로부터 비롯된 자유 소프트웨어 철학이 반영된 GPL 라이선스가  리눅스 커널에 적용되었으므로, 어찌보면 이들 두 진영이 결합한 산물이 리눅스라고 볼 수 있다. 이번 이야기에서는 ITS 공동체의 실질적인 계승자인 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%A6%AC%EC%B2%98%EB%93%9C_%EC%8A%A4%ED%86%A8%EB%A8%BC&quot;&gt;리차드 스톨만&lt;/a&gt;(이하 RMS)을 소개하려 한다.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;리차드 스톨만&lt;br&gt;
&lt;/b&gt;RMS는 이미 고등학교 때 부터 여름 캠프를 통해 컴퓨터를 접했다. 하바드대학에서 물리학을 전공하고 있었으나, 1학년이 끝날 무렵인 1971년 부터 MIT 인공지능연구소에서 프로그래머로 일하기 시작한다. 학부를 마친 그는 MIT에서 물리학 석사를 한 후, 박사학위 1년차에 결국, MIT AI Lab. 연구원으로 전향한다.&lt;br&gt;
&lt;img src=&quot;http://joone.net/wp-content/uploads/2018/03/null-18.png&quot; width=&quot;298&quot; height=&quot;352&quot; alt=&quot;&quot; title=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;그 당시 MIT 인공지능 연구소는 DEC에서 만든 PDP-10이라는 컴퓨터를 사용하고 있었다. 이들은 DEC에서 제공하는 OS 대신 자체 개발한 &lt;a href=&quot;https://en.wikipedia.org/wiki/Incompatible_Timesharing_System&quot;&gt;ITS(Incompatible Timesharing System)&lt;/a&gt;라는 시분할 운영체제를 어셈블리어로 개발해서 사용하고 있었다. ITS는 현대 OS와 철학적으로 상당히 다른데, 우선 초기에 개발될 당시, 로그인 암호가 없었고, 사용자는 도움말과 소스코드를 포함해서 모든 파일 수정할 수 있었다. 이러한 ITS 공동체의 철학과 개발 문화가 나중에 자유/오픈소스 소프트웨어, &lt;a href=&quot;https://en.wikipedia.org/wiki/Open_design&quot;&gt;오픈 디자인&lt;/a&gt;, &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%9C%84%ED%82%A4&quot;&gt;위키 운동&lt;/a&gt;에 영향을 주었다[3]. 그리고, 모든 ITS 컴퓨터가 초기 인터넷의 형태인 아파넷(ARPAnet)에 연결되어 있어서 자연스럽게 해커 문화가 탄생한다.&lt;/p&gt;

&lt;p&gt;당시 RMS도 ITS개발에 참여하고 있었다. 그러던, 어느날 제록스 레이저 프린터가 연구소에 들어왔다.&lt;br&gt;
&lt;img src=&quot;http://joone.net/wp-content/uploads/2018/03/null-19.png&quot; width=&quot;298&quot; height=&quot;372&quot; alt=&quot;&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;레이저 프린터의 성능은 감동적이었다. 하지만 그런 감동도 잠시뿐, 가끔 종이가 프린터에 걸리면 터미널에서는 알 수가 없었고, 걸린 종이를 빼기 전까지 모든 사람이 프린터를 사용할 수 없었다.&lt;br&gt;
&lt;img src=&quot;http://joone.net/wp-content/uploads/2018/03/null-20.png&quot; width=&quot;293&quot; height=&quot;362&quot; alt=&quot;&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;결국, 인쇄 명령을 내린 후에 직접 프린터 앞에 가서 출력이 완료되기까지 기다려야했다.&lt;br&gt;
&lt;img src=&quot;http://joone.net/wp-content/uploads/2018/03/null-21.png&quot; width=&quot;298&quot; height=&quot;434&quot; alt=&quot;&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;이 문제를 해결하기 위해 RMS은 작은 프로그램 작성하여 프린터 잼이 발생하면 모든 터미널에게 알림 메시지가 가도록 하였다.&lt;br&gt;
 &lt;img src=&quot;http://joone.net/wp-content/uploads/2018/03/null-22.png&quot; width=&quot;301&quot; height=&quot;333&quot; alt=&quot;&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;프린터 제어 프로그램 소스 코드를 구할 수 없었기 때문에 따로 프로그램을 만들었지만, 학교내에서 상당히 유용하게 사용되었다.&lt;br&gt;
&lt;img src=&quot;http://joone.net/wp-content/uploads/2018/03/null-23.png&quot; width=&quot;300&quot; height=&quot;333&quot; alt=&quot;&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;이와 같은 일종의 해킹이 AI Lab의 상징이 되었고, 그들 스스로를 프로그래머 보다 해커라고 부르기를 좋아했다.&lt;br&gt;
&lt;img src=&quot;http://joone.net/wp-content/uploads/2018/03/null-24.png&quot; width=&quot;353&quot; height=&quot;329&quot; alt=&quot;&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;RMS는 나중에 누군가 제록스 프린터 제어 프로그램의 소스코드를 갖고 있는 사실을 알게되었다.&lt;br&gt;
&lt;img src=&quot;http://joone.net/wp-content/uploads/2018/03/null-25.png&quot; width=&quot;345&quot; height=&quot;349&quot; alt=&quot;&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;그리고, 직접 개발자를 찾아서 소스코드를 복사해달라고 요청했다.&lt;br&gt;
&lt;img src=&quot;http://joone.net/wp-content/uploads/2018/03/null-48.png&quot; width=&quot;320&quot; height=&quot;376&quot; alt=&quot;&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;그는 NDA에 사인하고 프로그램을 개발한 것이라 마음대로 소스코드를 줄 수 없었다.&lt;br&gt;
&lt;img src=&quot;http://joone.net/wp-content/uploads/2018/03/null-27.png&quot; width=&quot;302&quot; height=&quot;361&quot; alt=&quot;&quot; title=&quot;&quot;&gt; &lt;/p&gt;

&lt;p&gt;RMS는 그가 개인적인 이유가 아닌 NDA로 인해 거부한 것이라서 더욱 심각하게 이 사실을 받아들였다. 이 사건은 훗날 자유소프트웨어 운동을 시작하게 되는 계기가 된다.&lt;br&gt;
&lt;img src=&quot;http://joone.net/wp-content/uploads/2018/03/null-28.png&quot; width=&quot;301&quot; height=&quot;330&quot; alt=&quot;&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;물론, 좋은 일도 있었다. MIT AI Lab.에 PDP-11에 도입되었을 때, PDP-10과 PDP-11과 네트워킹을 할 필요가 생겼다.&lt;br&gt;
&lt;img src=&quot;http://joone.net/wp-content/uploads/2018/03/null-29.png&quot; width=&quot;313&quot; height=&quot;242&quot; alt=&quot;&quot; title=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;RMS는 이미 하버드대 Computer Lab에서 PDP-10용으로 네트웍 프로그램을 개발한 사실을 알고 있었다.&lt;br&gt;
&lt;img src=&quot;http://joone.net/wp-content/uploads/2018/03/null-30.png&quot; width=&quot;310&quot; height=&quot;350&quot; alt=&quot;&quot; title=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;해커들 사이에 소스코드를 공유하는 것이 당연하던 시절이여서 쉽게 소스코드를 구한다.&lt;br&gt;
&lt;img src=&quot;http://joone.net/wp-content/uploads/2018/03/null-31.png&quot; width=&quot;304&quot; height=&quot;338&quot; alt=&quot;&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;그리고 새로운 기능까지 추가한다.&lt;br&gt;
 &lt;img src=&quot;http://joone.net/wp-content/uploads/2018/03/null-32.png&quot; width=&quot;316&quot; height=&quot;334&quot; alt=&quot;&quot; title=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://joone.net/wp-content/uploads/2018/03/null-33.png&quot; width=&quot;325&quot; height=&quot;416&quot; alt=&quot;&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;이처럼 1970년대 프로그래머 사이에 소스코드를 빌리는 것은 마치 이웃으로 부터 망치나 설탕을 빌리는 것과 크게 다르지 않았다.&lt;br&gt;
&lt;img src=&quot;http://joone.net/wp-content/uploads/2018/03/null-42.png&quot; width=&quot;332&quot; height=&quot;365&quot; alt=&quot;&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;하지만, 좋은 시절은 오래가지 않았다. 1980년대 초 PDP-10이 단종되고 해커들이 다른 회사로 옮기면서 ITS 공동체는 자연스럽게 해체되었다.&lt;br&gt;
&lt;img src=&quot;http://joone.net/wp-content/uploads/2018/03/null-43.png&quot; width=&quot;324&quot; height=&quot;346&quot; alt=&quot;&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;MIT AI lab.도 새롭게 DEC에서 개발한 VAX를 도입하면서 어셈블리어로 개발된 ITS를 더 이상 사용할 수 없게 되었다.&lt;br&gt;
&lt;img src=&quot;http://joone.net/wp-content/uploads/2018/03/null-44.png&quot; width=&quot;321&quot; height=&quot;376&quot; alt=&quot;&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;결국, ITS를 운영할 인력이 부족해지자 PDP-10에도 DEC가 개발한 OS를 설치하기로 결정한다.&lt;br&gt;
&lt;img src=&quot;http://joone.net/wp-content/uploads/2018/03/null-37.png&quot; width=&quot;310&quot; height=&quot;372&quot; alt=&quot;&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;하지만, DEC가 개발한 OS를 사용하려면 복사는 커녕 자료를 유출하지 않겠다는 계약 조건에 동의해야 했다.&lt;br&gt;
&lt;img src=&quot;http://joone.net/wp-content/uploads/2018/03/null-45.png&quot; width=&quot;309&quot; height=&quot;340&quot; alt=&quot;&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;RMS는 제록스 프린터 프로그램 소스 코드 공개 문제로 인해 이러한 비공개 협약이 어떤 결과를 가져올지 예상하고 있었다.&lt;br&gt;
&lt;img src=&quot;http://joone.net/wp-content/uploads/2018/03/null-46.png&quot; width=&quot;309&quot; height=&quot;354&quot; alt=&quot;&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;그는 독점 소프트웨어 체제에 합류하느냐 마느냐하는 도덕적 선택의 기로에 서게 된다.&lt;br&gt;
&lt;img src=&quot;http://joone.net/wp-content/uploads/2018/03/null-47.png&quot; width=&quot;306&quot; height=&quot;269&quot; alt=&quot;&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;결국, 그는 그가 오랫동안 경험한 자유 소프트웨어 대한 신념을 지키고 이를 유지할 수 있는 해커 공동체를 다시 부활시키기 위해 GNU 프로젝트를 시작하게 된다.&lt;br&gt;
&lt;img src=&quot;http://joone.net/wp-content/uploads/2018/03/null-41.png&quot; width=&quot;298&quot; height=&quot;382&quot; alt=&quot;&quot; title=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;참고&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;리차드 스톨만, &lt;a href=&quot;http://www.hanbit.co.kr/store/books/look.php?p_code=E5329835060&quot;&gt;GNU 운영체제와 자유소프트웨어 운동, 오픈소스 혁명의 목소리, 한빛출판사&lt;/a&gt;, 2013&lt;/li&gt;
&lt;li&gt;Sam Williams, &lt;a href=&quot;http://www.oreilly.com/openbook/freedom/&quot;&gt;Free as in Freedom&lt;/a&gt;. 2002&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Incompatible_Timesharing_System&quot;&gt;Incompatible Timesharing System&lt;/a&gt;, Wikipedia&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;참고로, 등장 인물 간 대화는 자료를 바탕으로 재구성되었습니다.&lt;/p&gt;

&lt;p&gt;만화 중 잘못된 부분이나 추가할 내용이 있으면 &lt;a href=&quot;https://docs.google.com/document/d/1pEl47im25CwVXWJ-HR2jOxSLoHWd7aCopk7BovI1sTI/edit?usp=sharing&quot;&gt;만화 원고&lt;/a&gt;에 직접 의견을 남겨주시면 고맙겠습니다. 그 외 전반적인 만화 후기는 블로그에 바로 답글로 남겨주세요. 다음 이야기는 GNU Project를 소개합니다.&lt;/p&gt;

&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>19. 리차드 스톨만과 자유소프트웨어 이야기</title>
    <updated>2018-03-12T09:54:41+09:00</updated>
    <dc:date>2018-03-12T09:54:41+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>joone</name>
    </author>
    <id>https://joone.net/2018/03/06/18-386bsd%ec%9d%98-%ed%83%84%ec%83%9d/</id>
    <link href="https://joone.net/2018/03/06/18-386bsd%ec%9d%98-%ed%83%84%ec%83%9d/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;1989년 윌리암 졸리츠(William Jolitiz), 린 졸리츠(Lynne Jolitz) 커플은 인텔 386PC에 BSD유닉스를 포팅하기 시작한다.&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img title=&quot;&quot; src=&quot;http://joone.net/wp-content/uploads/2018/03/null.png&quot; alt=&quot;&quot; width=&quot;445&quot; height=&quot;457&quot;&gt;&lt;/p&gt;
&lt;p&gt;“그 비싼 인텔386로 게임이나 하는거야?”&lt;br&gt;
“응, 게임이 너무 빨라서 터보 스위치는 끄고 있어..”&lt;/p&gt;
&lt;p&gt;참고로 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%9D%B8%ED%85%94_80386&quot;&gt;인텔 80386 CPU&lt;/a&gt;를 채용한 &lt;a href=&quot;http://www.computerhistory.org/timeline/1986/#169ebbe2ad45559efbc6eb35720789b1&quot;&gt;컴퓨터는 컴팩에서 1986년에 처음 출시했다&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img title=&quot;&quot; src=&quot;http://joone.net/wp-content/uploads/2018/03/null-1.png&quot; alt=&quot;&quot; width=&quot;377&quot; height=&quot;297&quot;&gt;&lt;/p&gt;
&lt;p&gt;“게임은 그만하고 우리 인텔386 PC에 BSD유닉스를 포팅하면 어떨까?”&lt;br&gt;
“도스나 돌리는 인텔칩에 유닉스를 돌릴 성능이 나올까?”&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img title=&quot;&quot; src=&quot;http://joone.net/wp-content/uploads/2018/03/null-2.png&quot; alt=&quot;&quot; width=&quot;477&quot; height=&quot;306&quot;&gt;&lt;/p&gt;
&lt;p&gt;“인텔 80386는 32-bit CPU야, 그리고 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%A9%94%EB%AA%A8%EB%A6%AC_%EA%B4%80%EB%A6%AC_%EC%9E%A5%EC%B9%98&quot;&gt;MMU&lt;/a&gt;를 지원해서 가상 메모리 구현도 가능해. 그런데, 아직 포팅된 유닉스가 없어.”&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img title=&quot;&quot; src=&quot;http://joone.net/wp-content/uploads/2018/03/null-3.png&quot; alt=&quot;&quot; width=&quot;624&quot; height=&quot;246&quot;&gt;&lt;/p&gt;
&lt;p&gt;80년대 말은 썬마이크로시스템스, IBM, 휴렛팩커드(HP), 실리콘 그래픽스, 넥스트 컴퓨터에서 워크스테이션이라는 고성능 컴퓨터를 만들고 있었다. 이는 개인용이 아니라 연구 개발용으로 사용되는 컴퓨터로 일반인이 구입하기에는 가격이 비쌌다. 대부분 RISC계열 32 비트 CPU와 주변기기 연결을 위해 SCSI 인터페이스를 사용했다. 이들 워크스테이션은 AT&amp;amp;T 유닉스 또는 BSD유닉스를 기반으로한 유닉스 계열 운영체제를 사용했다.&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img title=&quot;&quot; src=&quot;http://joone.net/wp-content/uploads/2018/03/null-4.png&quot; alt=&quot;&quot; width=&quot;448&quot; height=&quot;301&quot;&gt;&lt;/p&gt;
&lt;p&gt;“BSD를 인텔 386 CPU에 포팅한다고 들었어. 그런데, 왜 &lt;a href=&quot;https://ko.wikipedia.org/wiki/DEC_%EC%95%8C%ED%8C%8C&quot;&gt;DEC가 만든 알파칩&lt;/a&gt;에 안해?”&lt;br&gt;
“내 생각 인텔의 X86 아키텍처가 앞으로 CPU 시장을 이끌 것 같아.”&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img title=&quot;&quot; src=&quot;http://joone.net/wp-content/uploads/2018/03/null-5.png&quot; alt=&quot;&quot; width=&quot;434&quot; height=&quot;310&quot;&gt;&lt;/p&gt;
&lt;p&gt;“하하, X86은 그냥 DOS칩이잖아?”&lt;br&gt;
“인텔80386이 DEC 메인 프레임보다 빠른거 알어?&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img title=&quot;&quot; src=&quot;http://joone.net/wp-content/uploads/2018/03/null-6.png&quot; alt=&quot;&quot; width=&quot;518&quot; height=&quot;233&quot;&gt;&lt;/p&gt;
&lt;p&gt;“내가 인텔 엔지니어들과 이야기를 나눈적이 있는데, 앞으로 10년동안 18개월마다 성능을 두배로 올릴 수 있다는군[1].”&lt;/p&gt;
&lt;p&gt;80년말에 인텔 CPU는 개인용 컴퓨터를 위한 CPU였고, 누구도 유닉스를 실행할 것이라고 생각하지 못했다. 하지만, 결론적으로 이들의 선택은 옳았다.&lt;/p&gt;
&lt;p&gt;이들은 코드를 공개하기전에 포팅에 대한 기술적인 내용을 미리 &lt;a href=&quot;https://en.wikipedia.org/wiki/Dr._Dobb%27s_Journal&quot;&gt;Dr. Dobb’s Journal&lt;/a&gt;를 통해 1991년 1월 부터 18개의 기사를 연재했다.&lt;/p&gt;
&lt;p&gt;&lt;img title=&quot;&quot; src=&quot;http://joone.net/wp-content/uploads/2018/03/null-7.png&quot; alt=&quot;&quot; width=&quot;624&quot; height=&quot;392&quot;&gt;&lt;/p&gt;
&lt;p&gt;“우리가 하는 포팅 작업을 먼저로 글을 써보자. Dr. Dobb에 연재해보는거야.”&lt;br&gt;
“글쎄, 아직 릴리스도 안했는데, 먼저 쓸 필요가 있을까?”&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img title=&quot;&quot; src=&quot;http://joone.net/wp-content/uploads/2018/03/null-8.png&quot; alt=&quot;&quot; width=&quot;461&quot; height=&quot;297&quot;&gt;&lt;/p&gt;
&lt;p&gt;“난 빨리 우리가 한 일을 널리 알리고 싶어”&lt;br&gt;
“그래, 하지만.. 왠지 내키지가 않네..”&lt;/p&gt;
&lt;p&gt;참고로, 기사 내용은 아래와 같이 윌리암 졸리츠가 운영하는 &lt;a href=&quot;https://386bsd.org/&quot;&gt;386bsd.org&lt;/a&gt;에 공개되어 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&quot;https://386bsd.org/releases/porting-unix-to-the-386-a-practical-approach-designing-the-software-specification-article&quot;&gt;Designing the Software Specification&lt;/a&gt; In this first installment of a multipart series, the design specification for 386BSD, Berkeley UNIX for the 80386, is discussed.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://386bsd.org/releases/porting-unix-to-the-386-three-initial-pc-utilities-getting-to-the-hardware-article&quot;&gt;Three Initial PC Utilities&lt;/a&gt; Utilities to let you execute GCC- compiled programs in protected mode from MS-DOS and copy files to a shared portion of disk so MS-DOS and UNIX can exchange information.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://386bsd.org/releases/porting-unix-to-the-386-the-standalone-system-creating-a-protectedmode-standalone-c-programming-environment-article&quot;&gt;The Standalone System&lt;/a&gt; Using the protected mode program loader, a minimal 80386 protected mode standalone C programming environment for operating systems kernel development is created.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://386bsd.org/releases/porting-unix-to-the-386-language-tools-cross-support-developing-the-initial-utilities-article&quot;&gt;Language Tools Cross Support&lt;/a&gt; Developing the initial cross-tool utilities to bootstrap 386BSD.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://386bsd.org/releases/porting-unix-to-the-386-the-initial-root-filesystem-completing-the-toolset-article&quot;&gt;The Initial Root Filesystem&lt;/a&gt; The development of the initial root filesystem required for the 386BSD operating system kernel.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://386bsd.org/releases/porting-unix-to-the-386-research-the-commercial-sector-where-does-bsd-fit-in-article&quot;&gt;Research &amp;amp; The Commercial Sector&lt;/a&gt; A discussion of the various demands placed on research and commercial operating systems, and how they differ.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://386bsd.org/releases/porting-unix-to-the-386-a-strippeddown-kernel-onto-the-initial-utilities-article&quot;&gt;A Stripped-Down Kernel&lt;/a&gt; The 386BSD basic kernel, incorporating a unique ‘recursive’ paging feature that leverages resources and reduces complexity.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://386bsd.org/releases/porting-unix-to-the-386-the-basic-kernel-overview-and-initialization-article&quot;&gt;The Basic Kernel&lt;/a&gt; Initialization of the 386BSD kernel services and data structures&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://386bsd.org/releases/porting-unix-to-the-386-the-basic-kernel-multiprogramming-and-multiprogramming-and-multitasking-part-one-article&quot;&gt;Multiprogramming and Multitasking I&lt;/a&gt; An overview of the multiprogramming paradigm in 386BSD. Conventions, definitions, and organization of multiprogramming.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://386bsd.org/releases/porting-unix-to-the-386-the-basic-kernel-multiprogramming-and-multiprogramming-and-multitasking-part-ii-article&quot;&gt;Multiprogramming and Multitasking II&lt;/a&gt; How multiprogramming is achieved via multitasking. A discussion of the process. Alternative implementations and trade-offs. A reflection on why it has been so difficult to add multiprogramming to non-UNIX operating systems such as MS- DOS.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://386bsd.org/releases/porting-unix-to-the-386-the-basic-kernel-device-autoconfiguration-device-autoconfiguration-article&quot;&gt;Device Autoconfiguration&lt;/a&gt; How 386BSD discovers hardware devices that are present and configures itself for operation with those devices.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://386bsd.org/releases/porting-unix-to-the-386-device-drivers-drivers-for-the-basic-kernel-article&quot;&gt;Unix Device Drivers I&lt;/a&gt; The structure of 386BSD device drivers, interfaces to the operating system, and minimal device drivers for the console, disk drive and scheduling clock of the PC.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://386bsd.org/releases/porting-unix-to-the-386-device-drivers-entering-exiting-and-entering-exiting-and-masking-processor-interrupts-article&quot;&gt;Unix Device Drivers II&lt;/a&gt; Interfaces to the operating system. Entering, exiting and masking processor interrupts.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://386bsd.org/releases/porting-unix-to-the-386-device-drivers-getting-into-and-getting-into-and-out-of-interrupt-routines-article&quot;&gt;Unix Device Drivers III&lt;/a&gt; Completion of basic 386BSD device drivers.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://386bsd.org/releases/porting-unix-to-the-386-missing-pieces-part-1-completing-the-386bsd-kernel-article&quot;&gt;Missing Pieces I&lt;/a&gt; Finishing the NET/2 release of Berkeley UNIX to obtain a complete, unencumbered system for the 386 PC. Describes the methodology and implementation of the remaining facilities necessary to generate a working operating system for the PC.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://386bsd.org/releases/porting-unix-to-the-386-missing-pieces-part-ii-completing-the-386bsd-kernel-article&quot;&gt;Missing Pieces II&lt;/a&gt; Finishing the NET/2 release of Berkeley UNIX to obtain a complete, unencumbered system for the 386 PC. Describes the methodology and implementation of the remaining facilities necessary to generate a working operating system for the PC.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&quot;https://386bsd.org/releases/porting-unix-to-the-386-the-final-step-running-light-with-386bsd-article&quot;&gt;The Final Step&lt;/a&gt; Overview of the impact of Release 0.0 on the BSD community. Installation procedures for and highlights of Release 0.1. Final installment of series.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;리누스 토발즈도 이 기사를 읽은 사람 중 하나였다.&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img title=&quot;&quot; src=&quot;http://joone.net/wp-content/uploads/2018/03/null-9.png&quot; alt=&quot;&quot; width=&quot;208&quot; height=&quot;310&quot;&gt;&lt;/p&gt;
&lt;p&gt;“오.. 엄청난 기사네, 하지만 당장 코드를 구할 수 없으니 나도 386PC에 유닉스를 구현해야겠어.”&lt;/p&gt;
&lt;p&gt;아이러니하게도 리누스 토발즈가 먼저 1991년 9월 리눅스 커널 0.01 버전을 공개한다[2].&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img title=&quot;&quot; src=&quot;http://joone.net/wp-content/uploads/2018/03/null-10.png&quot; alt=&quot;&quot; width=&quot;429&quot; height=&quot;372&quot;&gt;&lt;/p&gt;
&lt;p&gt;두 커플도 오랜 작업 끝에 1992년 성 패트릭 날 386BSD 0.0버전을 공개한 후, 좀 더 보완해서 7월 14일 0.1버전을 공개한다. 30개의 플로피 디스크만 있으면 복사가 가능했다. &lt;img src=&quot;https://s.w.org/images/core/emoji/2.4/72x72/1f642.png&quot; alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; style=&quot;height: 1em; max-height: 1em;&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img title=&quot;&quot; src=&quot;http://joone.net/wp-content/uploads/2018/03/null-11.png&quot; alt=&quot;&quot; width=&quot;553&quot; height=&quot;406&quot;&gt;&lt;/p&gt;
&lt;p&gt;“지금까지 무려 250,000이나 다운로드 받았어.”&lt;br&gt;
“수백명 정도 다운로드 받을 줄 알았는데..”&lt;/p&gt;
&lt;p&gt;당연히 BSD 라이선스를 따랐기 때문에 저작권 속성이 그대로 유지되는 한 자유롭게 배포 및 수정할 수 있었다. 하지만, 두 사람은 너무 완벽을 추구한 나머지, 다음 릴리스가 길어지고 말았다.&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img title=&quot;&quot; src=&quot;http://joone.net/wp-content/uploads/2018/03/null-12.png&quot; alt=&quot;&quot; width=&quot;448&quot; height=&quot;336&quot;&gt;&lt;/p&gt;
&lt;p&gt;“드디어 버그 잡았다. 코드 좀 봐줘.”&lt;br&gt;
“음.. 이 방법 말고 더 좋은 방법이 있을 것 같아..”&lt;br&gt;
“알았서. 다른 방법을 생각해 볼게”&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img title=&quot;&quot; src=&quot;http://joone.net/wp-content/uploads/2018/03/null-13.png&quot; alt=&quot;&quot; width=&quot;344&quot; height=&quot;312&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;“386BSD는 0.1릴리스 이후 1년이 넘었는데, 소식이 없네. 안되겠다 내가 프로젝트를 만들어야지.”&lt;/p&gt;
&lt;p&gt;이렇게 386BSD 사용자는 분열했고, 이후, FreeBSD, NetBSD가 탄생했으며, 일부는 리눅스로 넘어갔다.&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img title=&quot;&quot; src=&quot;http://joone.net/wp-content/uploads/2018/03/null-15.png&quot; alt=&quot;&quot; width=&quot;478&quot; height=&quot;389&quot;&gt;&lt;/p&gt;
&lt;p&gt;이후 1993년 12월에 386BSD 1.0이 공개되었는데, 안타깝게도 0.1 이후 18개월만에 릴리스된 것이라 그만 모멘텀을 잃고 말았다.&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img title=&quot;&quot; src=&quot;http://joone.net/wp-content/uploads/2018/03/null-16.png&quot; alt=&quot;&quot; width=&quot;353&quot; height=&quot;282&quot;&gt;&lt;/p&gt;
&lt;p&gt;386BSD는 1994년 버전 1.0으로 끝으로 사실상 개발이 중지되었고, 다른 X86 BSD공동체는 FreeBSD와 NetBSD 등으로 분열된 상태였다. 반면, 리누스 토발즈는 외부 패치를 적극 받아들이고 다소 문제가 있어도 자주 릴리스했는데, 이런 개발 방식으로 많은 외부 기여를 이끌어내 X86용 오픈소스 운영체제 개발을 주도한다. 비록, 386BSD가 주류 OS진입에 실패했지만, 이들 부부는 FreeBSD, NetBSD, Linux 탄생에 기여한 공로를 인정받고 있다. 그리고, 얼마전 386BSD의 최근 코드를 GitHub에 올리기도 했다[3].&lt;/p&gt;
&lt;p&gt;&lt;b&gt;참고&lt;/b&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.salon.com/2000/05/17/386bsd/&quot;&gt;https://www.salon.com/2000/05/17/386bsd/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Linux_kernel&quot;&gt;https://en.wikipedia.org/wiki/Linux_kernel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://bsd.slashdot.org/story/16/10/09/0230203/after-22-years-386bsd-gets-an-update&quot;&gt;https://bsd.slashdot.org/story/16/10/09/0230203/after-22-years-386bsd-gets-an-update&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;참고로, 등장 인물 간 대화는 자료를 바탕으로 재구성되었습니다.&lt;/p&gt;
&lt;p&gt;만화 중 잘못된 부분이나 추가할 내용이 있으면 &lt;a href=&quot;https://docs.google.com/document/d/1RkiWPRl_GNu7cdZrTpur8Vbgds6yy-Ekua_C5d62RJQ/edit?usp=sharing&quot;&gt;만화 원고&lt;/a&gt;에 직접 의견을 남겨주시면 고맙겠습니다. 그 외 전반적인 만화 후기는 블로그에 바로 답글로 남겨주세요.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>18. 386BSD의 탄생</title>
    <updated>2018-03-07T15:40:27+09:00</updated>
    <dc:date>2018-03-07T15:40:27+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>이종립</name>
    </author>
    <id>https://johngrib.github.io/wiki/Shunsho-juwa/</id>
    <link href="https://johngrib.github.io/wiki/Shunsho-juwa/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;&lt;p&gt;수학자 오카 기요시의 일본 교육 비판&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>(책) 수학자의 공부</title>
    <updated>2018-03-14T09:03:34+09:00</updated>
    <dc:date>2018-03-14T09:03:34+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>이종립</name>
    </author>
    <id>https://johngrib.github.io/wiki/fish-shell/</id>
    <link href="https://johngrib.github.io/wiki/fish-shell/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;&lt;p&gt;자동 완성이 편리하고 눈이 즐거운 셸&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>fish shell</title>
    <updated>2018-03-12T23:07:23+09:00</updated>
    <dc:date>2018-03-12T23:07:23+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>이종립</name>
    </author>
    <id>https://johngrib.github.io/wiki/Object-toString/</id>
    <link href="https://johngrib.github.io/wiki/Object-toString/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;

</summary>
    <title>java.lang.Object.toString 메소드</title>
    <updated>2018-03-11T15:12:10+09:00</updated>
    <dc:date>2018-03-11T15:12:10+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>이종립</name>
    </author>
    <id>https://johngrib.github.io/wiki/Effective-Java/</id>
    <link href="https://johngrib.github.io/wiki/Effective-Java/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;&lt;p&gt;Effective Java 2/E by Joshua Bloch&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>(책) 이펙티브 자바 2판</title>
    <updated>2018-03-11T14:10:23+09:00</updated>
    <dc:date>2018-03-11T14:10:23+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>이종립</name>
    </author>
    <id>https://johngrib.github.io/wiki/geacron/</id>
    <link href="https://johngrib.github.io/wiki/geacron/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;&lt;p&gt;연도별 세계 지도를 볼 수 있는 사이트&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>GeaCron, 옐로우의 세계</title>
    <updated>2018-03-10T21:09:27+09:00</updated>
    <dc:date>2018-03-10T21:09:27+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>지국환</name>
    </author>
    <id>http://wlhermit.blog.me/221227863007</id>
    <link href="http://wlhermit.blog.me/221227863007"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;&lt;p&gt;드디어!!ㅠ,.ㅠ 던전을 찾아서가 드디어 iOS에도 출시되었습니다!!! 앱스토어 링크 : https://itunes.apple.com/kr/app/id1176011246 사실 구글플레이에는 꽤 전에출시했지만 앱스토어의 승인은 참으로 어려웠...ㅠ,.ㅠ 여하튼 오랜 시간을 기다린 만큼 아이폰유저분들의 많은 다운로드 다시금 부탁드려보도록 하겠습니다. 던전을 찾아서는 동료들과 함께 필드나 던전을 탐험하며 다양한 이벤트,아이템 등을 발견하며 즐기는 고전게임 방식의 RPG입니다! 유저들의 선택에 따라 엔딩이 바뀌기도 하는 등등 개발자로써 하고 싶은 말은 주구장창 끝이 없지만... 자세한 내용들은 항상 팬이었던 원사운드님께서 그려주신 홍보만화를 봐주시면 어떤 게.......&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>[던전을 찾아서]드디어 앱스토어에도 출시!! + 원사운드님의 홍보만화</title>
    <updated>2018-03-13T13:03:50+09:00</updated>
    <dc:date>2018-03-13T13:03:50+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>이현주</name>
    </author>
    <id>https://wayhome25.github.io/cs/2018/03/11/ssl-https/</id>
    <link href="https://wayhome25.github.io/cs/2018/03/11/ssl-https/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;blockquote&gt;
  &lt;p&gt;생활코딩의 ‘https와 ssl 인증서’ 수업과 HTTP 완벽가이드 14장 ‘보안 HTTP’을 읽고 정리한 내용입니다.
개인공부 후 자료를 남기기 위한 목적임으로 내용 상에 오류가 있을 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;http--https&quot;&gt;HTTP &amp;amp; HTTPS&lt;/h3&gt;

&lt;center&gt;
&lt;figure&gt;
&lt;img src=&quot;https://i.imgur.com/tq9mmGg.png&quot; alt=&quot;views&quot;&gt;
&lt;figcaption&gt;HTTPS는 HTTP를 안전하게 만드는 방식이다&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/center&gt;

&lt;ul&gt;
  &lt;li&gt;
&lt;a href=&quot;https://ko.wikipedia.org/wiki/HTTP&quot;&gt;HTTP&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;인터넷 상에서 정보를 주고 받기위한 프로토콜(양식과 규칙의 체계)&lt;/li&gt;
      &lt;li&gt;클라이언트와 서버 사이에 이루어지는 요청/응답 프로토콜&lt;/li&gt;
      &lt;li&gt;암호화되지 않은 방법으로 데이터를 전송한다. (악의적인 감청, 데이터 변조의 가능성)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
&lt;a href=&quot;https://ko.wikipedia.org/wiki/HTTPS&quot;&gt;HTTPS&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;보안이 강화된 HTTP&lt;/li&gt;
      &lt;li&gt;Hypertext Transfer Protocol Over Secure Socket Layer의 약자&lt;/li&gt;
      &lt;li&gt;모든 HTTP 요청과 응답 데이터는 네트워크로 보내지기 전에 암호화된다.&lt;/li&gt;
      &lt;li&gt;HTTPS는 HTTP의 하부에 SSL과 같은 보안계층을 제공함으로써 동작한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;center&gt;
&lt;figure&gt;
&lt;img src=&quot;https://i.imgur.com/4GHgl0T.png&quot; alt=&quot;views&quot;&gt;
&lt;figcaption&gt;HTTPS는 TCP위에 놓인 보안계층(SSL)위의 HTTP이다&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/center&gt;

&lt;h2 id=&quot;ssl-디지털-인증서&quot;&gt;SSL 디지털 인증서&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;클라이언트와 서버간의 통신을 공인된 제3자(CA) 업체가 보증해주는 전자화된 문서&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ssl-인증서의-장점-및-역할&quot;&gt;SSL 인증서의 장점 및 역할&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;통신 내용이 노출, 변경되는 것을 방지&lt;/li&gt;
  &lt;li&gt;클라이언트가 접속하려는 서버가 신뢰 할 수 있는 서버인지 확인가능&lt;/li&gt;
  &lt;li&gt;SSL 통신에 사용할 공개키를 클라이언트에게 제공한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ssl에서-사용하는-암호화의-종류&quot;&gt;SSL에서 사용하는 암호화의 종류&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;암호 : 텍스트를 아무나 읽지 못하도록 인코딩하는 알고리즘&lt;/li&gt;
  &lt;li&gt;키 : 암호의 동작을 변경하는 매개변수, 키에 따라서 암호화 결과가 달라지기 떄문에 키를 모르면 복호화가 불가능하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;대칭키-암호화-방식&quot;&gt;대칭키 암호화 방식&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;인코딩과 디코딩에 같은 키를 사용하는 알고리즘&lt;/li&gt;
  &lt;li&gt;단점 : 단점은 발송자와 수신자가 서로 대화하려면 둘 다 공유키를 가져야 한다는 것이다.&lt;/li&gt;
  &lt;li&gt;대칭키를 전달하는 과정에서 키가 유출이 되면 암호의 내용을 복호화할 수 있기 때문에 위험하다&lt;/li&gt;
  &lt;li&gt;이를 보완하기 위해서 나온 방법이 공개키 암호화 방식이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;공개키-암호화-방식&quot;&gt;공개키 암호화 방식&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;인코딩과 디코딩에 다른 키를 사용하는 알고리즘&lt;/li&gt;
  &lt;li&gt;A키로 암호화를 하면 B키로 복호화를 할 수 있고, B키로 암호화 하면 A키로 복호화 할 수 있는 방식&lt;/li&gt;
  &lt;li&gt;인코딩 키 (public key)는 공개되어 있으며 (그래서 공개키 암호방식이라는 이름이 붙었다.) 보통 디지털 인증서안에 포함되어 있다.&lt;/li&gt;
  &lt;li&gt;디코딩 키는 (secret key)는 호스트만이 개인 디코딩 키를 알고있다.&lt;/li&gt;
  &lt;li&gt;공개키와 비공개키의 분리는 메시지의 인코딩은 누구나 할 수 있도록 해주는 동시에, 메시지의 디코딩은 비밀키 소유자에게만 부여한다.&lt;/li&gt;
  &lt;li&gt;이는 클라이언트가 서버로 안전하게 메시지를 발송하는 것을 쉽게 해준다.&lt;/li&gt;
  &lt;li&gt;단점 : 공개키 암호화 방식의 알고리즘은 계산이 느린 경향이 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;디지털-서명&quot;&gt;디지털 서명&lt;/h3&gt;
&lt;center&gt;
&lt;figure&gt;
&lt;img src=&quot;https://i.imgur.com/NWmUEzb.png&quot; alt=&quot;views&quot;&gt;
&lt;figcaption&gt;디지털 서명의 동작방식&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/center&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;전자 서명을 통해서 누가 메시지를 썼는지 알려주고, 메시지가 위조되지 않았음을 증명할 수 있다. 전자서명은 &lt;strong&gt;SSL 인증서&lt;/strong&gt; 에서 서비스를 보증하는 방법으로 활용된다.&lt;/li&gt;
  &lt;li&gt;공개키와 비공개키는 안전한 데이터 전달 이외에도, &lt;strong&gt;데이터 제공자의 신원을 보장&lt;/strong&gt; 하는데 사용할 수 있다.&lt;/li&gt;
  &lt;li&gt;비공개키의 소유자가 비공개 키를 이용해서 정보를 암호화 =&amp;gt; 공개키와 함께 암호화된 정보를 전송 =&amp;gt; 수신자는 공개키로 암호화된 정보를 복호화&lt;/li&gt;
  &lt;li&gt;암호화된 데이터를 공개키를 가지고 복호화 할 수 있다는 것은 그 데이터가 공개키와 쌍을 이루는 비공개키에 의해서 암호화 되었다는 것을 의미한다.&lt;/li&gt;
  &lt;li&gt;즉 공개키가 데이터를 제공한 사람의 신원을 보장해주게 되는 것이다. 이러한 것을 전자 서명이라고 부른다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ca-certificate-authority&quot;&gt;CA (Certificate Authority)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;디지털 인증서를 제공하는 공인된 기업 (Certificate Authority 혹은 Root Certificate)&lt;/li&gt;
  &lt;li&gt;대표적인 CA 서비스 제공 기업과 시장점유율
    &lt;ul&gt;
      &lt;li&gt;Symantec (VeriSign, Thawte, Geotrust) with 42.9% market share&lt;/li&gt;
      &lt;li&gt;Comodo with 26%&lt;/li&gt;
      &lt;li&gt;GoDaddy with 14%&lt;/li&gt;
      &lt;li&gt;GlobalSign with 7.7%&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ssl-인증서의-서비스-보증방법-및-동작방법&quot;&gt;SSL 인증서의 서비스 보증방법 및 동작방법&lt;/h2&gt;

&lt;h3 id=&quot;인증서-내용&quot;&gt;인증서 내용&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;인증서의 내용은 CA의 비공개 키를 이용해서 암호화 되어 웹브라우저에게 제공된다.
    &lt;ul&gt;
      &lt;li&gt;서비스 정보 (인증서 발급자, CA의 디지털 서명,서비스 도메인)&lt;/li&gt;
      &lt;li&gt;서버측 공개키&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ssl-인증서의-서비스-보증방법&quot;&gt;SSL 인증서의 서비스 보증방법&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;웹브라우저가 서버에 접속하면 서버는 제일 먼저 인증서를 제공한다.&lt;/li&gt;
  &lt;li&gt;브라우저는 인증서를 발급한 CA가 자신이 갖고있는 CA 리스트에 있는지 확인한다.&lt;/li&gt;
  &lt;li&gt;리스트에 있다면 해당 CA의 공개키를 이용해서 인증서를 복호화 한다.&lt;/li&gt;
  &lt;li&gt;인증서를 복호화 할 수 있다는 것은 이 인증서가 CA의 비공개키에 의해서 암호화 된 것을 의미한다.
즉 데이터를 제공한 사람의 신원을 보장해주게 되는 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ssl-동작방법&quot;&gt;SSL 동작방법&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;공개키 암호 방식은 알고리즘 계산방식이 느린 경향이 있다.&lt;/li&gt;
  &lt;li&gt;따라서 SSL은 암호화된 데이터를 전송하기 위해서 공개키와 대칭키 암호화 방식을 혼합하여 사용한다.&lt;/li&gt;
  &lt;li&gt;안전한 의사소통 채널을 수립할 때는 공개키 암호를 사용하고, 이렇게 만들어진 안전한 채널을 통해서 임시의 무작위 대칭키를 생성 및 교환한다. 해당 대칭키는 나머지 데이터 암호화에 활용한다.
    &lt;ul&gt;
      &lt;li&gt;실제 데이터 암호화 방식 : 대칭키&lt;/li&gt;
      &lt;li&gt;상기 대칭키를 서로 공유하기 위한 암호화 방식 : 공개키&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ssl-통신과정&quot;&gt;SSL 통신과정&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;컴퓨터와 컴퓨터가 네트워크를 통해서 통신을 할때 &lt;code class=&quot;highlighter-rouge&quot;&gt;핸드쉐이크 -&amp;gt; 세션 -&amp;gt; 세션종료&lt;/code&gt; 의 과정을 거친다.&lt;/li&gt;
  &lt;li&gt;암호화된 HTTP 메시지를 교환하기 전에 클라이언트와 서버는 &lt;code class=&quot;highlighter-rouge&quot;&gt;SSL 핸드쉐이크를&lt;/code&gt; 진행한다.&lt;/li&gt;
  &lt;li&gt;핸드쉐이크의 목적은 아래와 같다.
    &lt;ul&gt;
      &lt;li&gt;프로토콜 버전번호 교환&lt;/li&gt;
      &lt;li&gt;양쪽이 알고 있는 pre master secret 키 생성 및 교환&lt;/li&gt;
      &lt;li&gt;양쪽의 신원 인증&lt;/li&gt;
      &lt;li&gt;채널을 암호화 하기 위한 임시 세션 키 생성&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SSL 통신과정을 간단하게 도식화 하면 아래와 같다.&lt;/li&gt;
  &lt;li&gt;
&lt;a href=&quot;https://opentutorials.org/course/228/4894&quot;&gt;생활코딩 SSL의 동작방법&lt;/a&gt;에 아주 쉽게 설명되어 있어서 함께 참고하면 좋다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;center&gt;
&lt;figure&gt;
&lt;img src=&quot;https://i.imgur.com/YIfy1wK.png&quot; alt=&quot;views&quot;&gt;
&lt;figcaption&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/center&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://opentutorials.org/course/228/4894&quot;&gt;생활코딩 - https와 ssl 인증서&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?mallGb=KOR&amp;amp;ejkGb=KOR&amp;amp;barcode=9788966261208&amp;amp;orderClick=JAj&quot;&gt;HTTP 완벽가이드 14장 ‘보안 HTTP’&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>HTTPS와 SSL 인증서, SSL 동작방법</title>
    <updated>2018-03-11T09:00:00+09:00</updated>
    <dc:date>2018-03-11T09:00:00+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>이현주</name>
    </author>
    <id>https://wayhome25.github.io/django/2018/03/04/django-deploy-04-uwsgi/</id>
    <link href="https://wayhome25.github.io/django/2018/03/04/django-deploy-04-uwsgi/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;blockquote&gt;
  &lt;p&gt;nginx, uwsgi, docker를 활용한 배포 연습 과정을 기록한 글입니다. &lt;br&gt;
개인 공부 후 자료를 남기기 위한 목점임으로 내용상에 오류가 있을 수 있습니다.&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;nginx, uwsgi를 통해서 아마존 EC2에서 장고 앱 어플리케이션을 실행시켜 보는 것을 목표로 한다.&lt;/li&gt;
    &lt;li&gt;최소한의 설정만을 포함한다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;uwsgi-실행-옵션&quot;&gt;uWSGI 실행 옵션&lt;/h1&gt;

&lt;h3 id=&quot;웹-서버-관리용-유저-생성&quot;&gt;웹 서버 관리용 유저 생성&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; sudo adduser deploy-user
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;uwsgi-설치&quot;&gt;uWSGI 설치&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(virtualenv 환경 내부에서)
&amp;gt; pip install uwsgi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;uwsgi-실행-옵션에-대한-설명&quot;&gt;uwsgi 실행 옵션에 대한 설명&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;uwsgi 1)--http 2):8000 3)--home (virtualenv경로) 4)--chdir (django프로젝트 경로) 5)-w (프로젝트명).wsgi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;1-uwsgi를-실행하는데-http로-오는-요청을-받겠다&quot;&gt;1) uwsgi를 실행하는데 http로 오는 요청을 받겠다.&lt;/h5&gt;
&lt;p&gt;nginx &amp;lt;-&amp;gt; wsgi 통신은 기본적으로 socket 방식을 사용한다.
HTTP 방식을 사용할 수 있지만 통신에서 로스가 많이 발생하는 단점이 있다.
그에 비해서 wsgi app은 서버 안쪽에서 서버의 요청을 django 어플리케이션에 중계하는 역할을 하기 때문에
무거운 HTTP 요청을 보다는 socket이라는 전송방식을 사용한다. (HTTP에 비해서 훨씬 가볍게 설정이 가능)&lt;/p&gt;

&lt;h5 id=&quot;2-8000-포트번호로-오는-요청을-받겠다&quot;&gt;2) 8000 포트번호로 오는 요청을 받겠다.&lt;/h5&gt;

&lt;h5 id=&quot;3-uwsgi가-돌아갈-파이썬-환경-홈&quot;&gt;3) uwsgi가 돌아갈 파이썬 환경 홈&lt;/h5&gt;
&lt;p&gt;uwsgi 자체가 파이썬 인터페이스이기 때문에 어떤 파이썬 환경에서 사용할지에 대한 경로가 필요함&lt;/p&gt;

&lt;h5 id=&quot;4-uwsgi가-요청을-받고-실행할-파이썬-어플리케이션의-경로로-이동-change-directory&quot;&gt;4) uwsgi가 요청을 받고 실행할 파이썬 어플리케이션의 경로로 이동 (change directory)&lt;/h5&gt;
&lt;p&gt;manage.py가 있는 source root 폴더를 지정해야함&lt;/p&gt;

&lt;h5 id=&quot;5-실행시-어떤-wsgi-설정-파일을-갖고-실행할지를-지정&quot;&gt;5) 실행시 어떤 wsgi 설정 파일을 갖고 실행할지를 지정&lt;/h5&gt;
&lt;p&gt;chdir 옵션을 통해서 이동한 장고 프로젝트 경로안에서 package 모듈 이름으로 찾는다 &lt;br&gt;
(config/wsgi가 아닌 config.wsgi)&lt;/p&gt;

&lt;h3 id=&quot;uwsgi-실행-예시-ubuntu-서버에서&quot;&gt;uwsgi 실행 예시 (ubuntu 서버에서)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;ex) pyenv virtualenv이름이 mysite-env, django프로젝트가 /srv/mysite/django_app, 프로젝트명이 mysite일 경우&lt;/li&gt;
  &lt;li&gt;실행 후 &lt;ec2&gt;:8000으로 접속하여 요청을 잘 받는지 확인&lt;/ec2&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;uwsgi --http :8000 --home ~/.pyenv/versions/mysite-env --chdir /srv/mysite/django_app -w mysite.wsgi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;uwsgi-실행-예시-로컬에서&quot;&gt;uwsgi 실행 예시 (로컬에서)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;uwsgi는 로컬에서도 동일하게 실행 가능&lt;/li&gt;
  &lt;li&gt;단 wsgi.py 파일에서 settings가 debug를 바라보도록 수정 필요 (ALLOWED_HOSTS에 localhost포함)&lt;/li&gt;
  &lt;li&gt;로컬에서는 debug, 서버에서는 deploy settings를 바라보도록 하려면 wsgi.py 파일을 settings 처럼 분리하는것이 좋음&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;uwsgi --http :8000 --home /usr/local/var/pyenv/versions/deploy_ec2 --chdir /Users/Dev/deploy_ec2/django_app -w config.wsgi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr&gt;

&lt;h1 id=&quot;uwsgi-설정분리-및-실행&quot;&gt;uWSGI 설정분리 및 실행&lt;/h1&gt;

&lt;h3 id=&quot;wsgi-파일-분리하기&quot;&gt;wsgi 파일 분리하기&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;wsgi 파일을 debug/deploy로 분리하여 uwsgi 실행시에 실행환경에 맞는 settings를 바라보도록 조절한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├── django_app
│   ├── config
│   │   ├── __init__.py
│   │   ├── settings
│   │   │   ├── __init__.py
│   │   │   ├── base.py
│   │   │   ├── debug.py
│   │   │   └── deploy.py
│   │   ├── urls.py
│   │   ├── wsgi.py  &lt;span class=&quot;c&quot;&gt;# runserver용 wsgi 파일&lt;/span&gt;
│   │   └── wsgi  &lt;span class=&quot;c&quot;&gt;# uwsgi용 wsgi 파일&lt;/span&gt;
│   │       ├── __init__.py
│   │       ├── debug.py
│   │       └── deploy.py
│   ├── db.sqlite3
│   └── manage.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;wsgi.py 예시 (runserver시에 사용)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.core.wsgi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_wsgi_application&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setdefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DJANGO_SETTINGS_MODULE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;config.settings.debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_wsgi_application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;wsgi 분기 예시 (uwsgi 실행시 사용)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.core.wsgi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_wsgi_application&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# wsgi/debug.py&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setdefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DJANGO_SETTINGS_MODULE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;config.settings.debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_wsgi_application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# wsgi/deploy.py&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setdefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DJANGO_SETTINGS_MODULE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;config.settings.deploy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_wsgi_application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;로컬에서-uwsgi-실행&quot;&gt;로컬에서 uwsgi 실행&lt;/h2&gt;

&lt;h4 id=&quot;uwsgi-debug용-설정-파일-작성-예시&quot;&gt;uWSGI debug용 설정 파일 작성 예시&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;위의 예시와 같이 uwsgi 실행시 모든 옵션을 적어야한다면 번거롭기 때문에 설정파일을 따로 생성한다.&lt;/li&gt;
  &lt;li&gt;참고로 ini 파일에서는 ~/ (home폴더) 사용이 불가능하기 떄문에 절대경로 입력이 필요하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[uwsgi]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;home&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/usr/local/var/pyenv/versions/deploy_ec2&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;chdir&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/Users/Dev/deploy_ec2/django_app&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;config.wsgi.debug&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;:8000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;uwsgi-실행&quot;&gt;uwsgi 실행&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;로컬 컴퓨터에서 실행후 localhost:8000 으로 접속 확인&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;uwsgi &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; .config_secret/uwsgi/debug.ini
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ubuntu에서-uwsgi-실행&quot;&gt;ubuntu에서 uwsgi 실행&lt;/h2&gt;

&lt;h4 id=&quot;uwsgi-deploy용-설정-파일-작성-에시&quot;&gt;uWSGI deploy용 설정 파일 작성 에시&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;linux 서버 정보를 기준으로 작성해야 한다.&lt;/li&gt;
  &lt;li&gt;파일경로 예시 : /srv/deploy_ec2/.config_secret/uwsgi/deploy.ini&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[uwsgi]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Django-related settings
# the base directory (full path)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;chdir&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/srv/deploy_ec2/django_app       &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Django's wsgi file
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;config.wsgi.deploy              &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the virtualenv (full path)
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;home&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/home/ubuntu/.pyenv/versions/deploy_ec2 ; VirtualEnv location&lt;/span&gt;

&lt;span class=&quot;py&quot;&gt;uid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deploy-user       ; adduser 명령을 통해서 추가한 웹서버 관리용 유저&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;gid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deploy-user       ; group id&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# the socket (use the full path to be safe
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/tmp/ec2.sock  ; 상기 유저가 해당 tmp 폴더에 대해서 모든 권한을 가져아함&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;chmod-socket&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;666      ; 소켓 소유 권한 (읽고, 쓰기)&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;chown-socket&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deploy-user:deploy-user ;소켓 소유자 adduser 명령을 통해서 추가한 유저 정보 (uid:gid)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# process-related settings
# master
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;enable-threads&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;pidfile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/tmp/ec2.pid&lt;/span&gt;

&lt;span class=&quot;py&quot;&gt;vacuum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true                  ;ec2.pid, ec2.sock 파일 자동삭제 (uwsgi 종료시)&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;file:/tmp/uwsgi.log   ;log 경로&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;폴더-권한-변경&quot;&gt;폴더 권한 변경&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;/tmp 폴더의 권한을 adduser를 통해서 추가한 deploy-user로 변경&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;uwsgi-실행-1&quot;&gt;uwsgi 실행&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;/tmp/mysite.pid, /tmp/mysite.sock 파일을 생성하고 요청을 받을 준비완료&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; deploy-user /home/ubuntu/.pyenv/versions/deploy_ec2/bin/uwsgi &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; /srv/deploy_ec2/.config_secret/uwsgi/deploy.ini
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;–http 옵션을 추가하면 &lt;aws dns=&quot;&quot;&gt;:8000으로 접근 가능&lt;/aws&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; deploy-user /home/ubuntu/.pyenv/versions/deploy_ec2/bin/uwsgi &lt;span class=&quot;nt&quot;&gt;--http&lt;/span&gt; :8000 &lt;span class=&quot;nt&quot;&gt;-ini&lt;/span&gt; /srv/deploy_ec2/.config_secret/uwsgi/deploy.ini
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr&gt;

&lt;h1 id=&quot;서버-접속시-uwsgi-자동-실행&quot;&gt;서버 접속시 uWSGI 자동 실행&lt;/h1&gt;

&lt;h3 id=&quot;uwsgi-서비스-설정파일-작성&quot;&gt;uWSGI 서비스 설정파일 작성&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://uwsgi-docs.readthedocs.io/en/latest/Systemd.html&quot;&gt;Systemd&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units#service-management&quot;&gt;How To Use Systemctl to Manage Systemd Services and Units&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo vi /etc/systemd/system/uwsgi.service

[Unit]
Description=uWSGI Emperor service
After=syslog.target

[Service]
ExecPre=/bin/sh -c 'mkdir -p /run/uwsgi; chown deploy-user:deploy-user /run/uwsgi'
ExecStart=/home/ubuntu/.pyenv/versions/deploy_ec2/bin/uwsgi --uid deploy_user --gid deploy_user --master --emperor /etc/uwsgi/sites

Restart=always
KillSignal=SIGQUIT
Type=notify
StandardError=syslog
NotifyAccess=all

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;리부팅-시-자동으로-실행되도록-설정&quot;&gt;리부팅 시 자동으로 실행되도록 설정&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;실행 실패시 에러로그는 /var/log/syslog에서 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 실행&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl start uwsgi.service
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;uwsgi
&lt;span class=&quot;c&quot;&gt;# 상태확인&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; systemctl status uwsgi

● uwsgi.service - uWSGI Emperor service
   Loaded: loaded &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/etc/systemd/system/uwsgi.service&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; enabled&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; vendor preset: enabled&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   Active: active &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;running&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; since Sun 2018-03-04 09:51:25 UTC&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 1min 10s ago
 Main PID: 6546 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;uwsgi&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   Status: &lt;span class=&quot;s2&quot;&gt;&quot;The Emperor is governing 0 vassals&quot;&lt;/span&gt;
   CGroup: /system.slice/uwsgi.service
           ├─6546 /home/ubuntu/.pyenv/versions/deploy_ec2/bin/uwsgi &lt;span class=&quot;nt&quot;&gt;--uid&lt;/span&gt; deploy-user &lt;span class=&quot;nt&quot;&gt;--gid&lt;/span&gt; deploy-user &lt;span class=&quot;nt&quot;&gt;--master&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--emperor&lt;/span&gt; /etc/uwsgi/sites
           └─6547 /home/ubuntu/.pyenv/versions/deploy_ec2/bin/uwsgi &lt;span class=&quot;nt&quot;&gt;--uid&lt;/span&gt; deploy-user &lt;span class=&quot;nt&quot;&gt;--gid&lt;/span&gt; deploy-user &lt;span class=&quot;nt&quot;&gt;--master&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--emperor&lt;/span&gt; /etc/uwsgi/sites

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;참고&quot;&gt;참고&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://uwsgi-docs.readthedocs.io/en/latest/tutorials/Django_and_nginx.html&quot;&gt;Setting up Django and your web server with uWSGI and nginx&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://uwsgi-docs.readthedocs.io/en/latest/Systemd.html&quot;&gt;Systemd&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-use-systemctl-to-manage-systemd-services-and-units#service-management&quot;&gt;How To Use Systemctl to Manage Systemd Services and - Units&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>Django 배포연습 4 - uwsgi 를 통한 Django 실행</title>
    <updated>2018-03-04T09:00:00+09:00</updated>
    <dc:date>2018-03-04T09:00:00+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>이현주</name>
    </author>
    <id>https://wayhome25.github.io/django/2018/03/03/django-deploy-03-ec2/</id>
    <link href="https://wayhome25.github.io/django/2018/03/03/django-deploy-03-ec2/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;blockquote&gt;
  &lt;p&gt;nginx, uwsgi, docker를 활용한 배포 연습 과정을 기록한 글입니다. &lt;br&gt;
개인 공부 후 자료를 남기기 위한 목점임으로 내용상에 오류가 있을 수 있습니다.&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;nginx, uwsgi를 통해서 아마존 EC2에서 장고 앱 어플리케이션을 실행시켜 보는 것을 목표로 한다.&lt;/li&gt;
    &lt;li&gt;최소한의 설정만을 포함한다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;용어정리&quot;&gt;용어정리&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;가상서버 : CPU와 메모리를 가진 클라우드 내 서버&lt;/li&gt;
  &lt;li&gt;인스턴스 (instance) : AWS에서 가상 서버를 부르는 용어&lt;/li&gt;
  &lt;li&gt;EC2 (Elastic Compute Cloud) : 가상 인스턴스를 운영하는 서비스&lt;/li&gt;
  &lt;li&gt;보안 그룹(security group) : 인스턴스에 대한 트래픽을 제어하는 가상 방화벽 역할&lt;/li&gt;
  &lt;li&gt;IAM (Identity and Access Management) : 사용자 엑세스 및 암호화 키 관리&lt;/li&gt;
  &lt;li&gt;관리 콘솔 : AWS 서비스를 모두 관리하는 사용자 인터페이스&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ec2-인스턴스-생성&quot;&gt;EC2 인스턴스 생성&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
&lt;a href=&quot;https://aws.amazon.com/ko/&quot;&gt;aws amazon&lt;/a&gt; 서비스에서 EC2 =&amp;gt; 인스턴스 시작 선택&lt;/li&gt;
  &lt;li&gt;프리티어에서 사용 가능한 Ubuntu Server 16.04 LTS (HVM), SSD Volume Type 선택&lt;/li&gt;
  &lt;li&gt;검토 및 시작을 선택하여 기본 조건을 사용하는 인스턴스를 생성&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;키페어-생성&quot;&gt;키페어 생성&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;EC2 인스턴스 생성시 키 페어 지정이 필요
    &lt;ul&gt;
      &lt;li&gt;퍼블릭 키 : AWS에 저장&lt;/li&gt;
      &lt;li&gt;프리이빗 키 : 사용자가 저장&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;프라이빗 키는 키 페어 생성 시점에 한번만 다운로드 가능&lt;/li&gt;
  &lt;li&gt;키페어를 사용하여 SSH를 통해 EC2 인스턴스에 접속 가능&lt;/li&gt;
  &lt;li&gt;다운받은 .pem파일을 ~/.ssh폴더에 넣기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/wjweMWs.png&quot; alt=&quot;screen 35&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;ssh를-통한-ec2-접속&quot;&gt;SSH를 통한 EC2 접속&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html&quot;&gt;SSH를 사용하여 Linux 인스턴스에 연결&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;.zshrc에 alias를 추가하면 손쉽게 EC2에 접속할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &amp;lt;인증서위치&amp;gt; &amp;lt;계정&amp;gt;@&amp;lt;인스턴스 퍼블릭 DNS&amp;gt;
ssh &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; ~/.ssh/key.pem ubuntu@ec2-1111-11-111lap-northeast-2.compute.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;아래와 같은 에러 발생시 chmod 400 &lt;pem file=&quot;&quot;&gt;로 소유주만 읽을 수 있도록 권한설정을 해준다.&lt;/pem&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Permissions 0644 for '/Users/Leehyunjoo/.ssh/key-pairs-test.pem' are too open.
It is required that your private key files are NOT accessible by others.
This private key will be ignored.
Load key &quot;/Users/Leehyunjoo/.ssh/key-pairs-test.pem&quot;: bad permissions
Permission denied (publickey).

❯ chmod 400 key-pairs-test.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;iam-유저-생성&quot;&gt;IAM 유저 생성&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;사용자 엑세스 및 암호화 키 관리 (Identity and Access Management)&lt;/li&gt;
  &lt;li&gt;AWS에서 모든 권한을 다 사용할 수 있는 ROOT 유저 대신, 특정 권한만 가진 유저 생성&lt;/li&gt;
  &lt;li&gt;
&lt;a href=&quot;https://aws.amazon.com/ko/&quot;&gt;aws amazon&lt;/a&gt; 서비스에서 IAM 선택&lt;/li&gt;
  &lt;li&gt;AmazonEC2FullAccess 권한을 가진 IAM 유저 추가&lt;/li&gt;
  &lt;li&gt;참고 : &lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/IAM/latest/UserGuide/id_users_create.html#id_users_create_console&quot;&gt;AWS 계정의 IAM 사용자 생성&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ec2-인스턴스-ubuntu-기본-설정&quot;&gt;EC2 인스턴스 ubuntu 기본 설정&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;EC2 인스턴스를 생성후 ssh로 ubuntu 서버에 접속하여 기본적인 프로그램을 설치한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;python-pip설치&quot;&gt;python-pip설치&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install python-pip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;zsh-설치&quot;&gt;zsh 설치&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;oh-my-zsh-설치&quot;&gt;oh-my-zsh 설치&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo curl -L http://install.ohmyz.sh | sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;default-shell-변경&quot;&gt;Default shell 변경&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo chsh ubuntu -s /usr/bin/zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;pyenv-requirements설치&quot;&gt;pyenv requirements설치&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yyuu/pyenv/wiki/Common-build-problems&quot;&gt;공식문서&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \
libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;pyenv-설치&quot;&gt;pyenv 설치&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;pyenv-설정을-zshrc에-기록&quot;&gt;pyenv 설정을 .zshrc에 기록&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi ~/.zshrc
export PATH=&quot;/home/ubuntu/.pyenv/bin:$PATH&quot;
eval &quot;$(pyenv init -)&quot;
eval &quot;$(pyenv virtualenv-init -)&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;django-관련-설정&quot;&gt;Django 관련 설정&lt;/h2&gt;

&lt;h3 id=&quot;장고-애플리케이션은-srv-directory-사용&quot;&gt;장고 애플리케이션은 /srv Directory 사용&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;폴더 권한 계정 변경 (root 유저 =&amp;gt; ubuntu 유저)&lt;/li&gt;
  &lt;li&gt;scp 명령 실행시 쓰기 권한을 주기 위함&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.thegeekstuff.com/2010/09/linux-file-system-structure/?utm_source=tuicool&quot;&gt;Linux Directory Structure (File System Structure) Explained with Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo chown -R ubuntu:ubuntu /srv/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;프로젝트-소스코드-추가-1---git-clone&quot;&gt;프로젝트 소스코드 추가 1 - git clone&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;github에 올라간 프로젝트 소스코드를 ubuntu 서버에 clone&lt;/li&gt;
  &lt;li&gt;secret_key 등이 포함된 폴더는 공개저장소에 올리지 않기 때문에 별도로 설정해줘야 함&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone &amp;lt;자신의 프로젝트&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;프로젝트-소스코드-추가-2---secure-copy-clone으로-대체-가능&quot;&gt;프로젝트 소스코드 추가 2 - secure copy (clone으로 대체 가능)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html&quot;&gt;SCP를 사용하여 Linux에서 Linux 인스턴스로 파일 전송&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;scp -i &amp;lt;인증서위차&amp;gt; -r &amp;lt;프로젝트폴더&amp;gt; ubuntu@&amp;lt;인스턴스 퍼블릭 DNS&amp;gt;:/srv/deploy_ec2
scp -i ~/.ssh/key.pem -r /Users/Dev/deploy_ec2/ ubuntu@ec2-111-1111-111.ap-northeast-2.compute.amazonaws.com:/srv/deploy_ec2&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;pyenv-343설치-및-virtualenv생성&quot;&gt;pyenv 3.4.3설치 및 virtualenv생성&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd &amp;lt;clone 혹은 copy한 프로젝트 폴더&amp;gt;
pyenv install 3.4.3
pyenv virtualenv deploy_ec2
pyenv local deploy_ec2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;requirements설치&quot;&gt;requirements설치&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;runserver-테스트&quot;&gt;runserver 테스트&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;0:8000 으로 지정필요&lt;/li&gt;
  &lt;li&gt;웹 브라우저에서  로 접속하기 위해서는 보안그룹(security group) 설정이 필요퍼블릭&amp;gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd deploy_ec2/django_app/
python manage.py runserver 0:8000 --settings=config.settings.debug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;보안그룹-인바운드-설정-수정&quot;&gt;보안그룹 인바운드 설정 수정&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;보안 그룹(security group)은 하나 이상의 인스턴스에 대한 트래픽을 제어하는 가상 방화벽 역할&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/using-network-security.html&quot;&gt;Linux 인스턴스에 대한 Amazon EC2 보안 그룹&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;보안그룹 기본 인바운드 설정
    &lt;ul&gt;
      &lt;li&gt;Type: SSH&lt;/li&gt;
      &lt;li&gt;Protocol: TCP&lt;/li&gt;
      &lt;li&gt;Port Range: 22&lt;/li&gt;
      &lt;li&gt;Source : 0.0.0.0/0 (전세계 어디서나)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SSH 접속은 사무실 혹은 집의 ip 에서만 가능하도록&lt;/li&gt;
  &lt;li&gt;Custom TCP Rule 8000번 포트 추가 (runserver시 8000번 포트를 통해서 접속)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/gtjIuzD.png&quot; alt=&quot;screen 36&quot;&gt;&lt;/p&gt;

&lt;h4 id=&quot;allowed_hosts-설정&quot;&gt;ALLOWED_HOSTS 설정&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;settings.py의 ALLOWED_HOSTS에 특정 서버의 IP주소나 도메인에 대해서만 장고 웹어플리케이션이 서빙을 수행할 수 있도록 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ALLOWED_HOSTS = [
	'&amp;lt;ec2 domain name'&amp;gt;,
	또는
	'.amazonaws.com',  # 구체적으로 작성하는 편이 좋음
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://awsblogskr.s3-ap-northeast-2.amazonaws.com/pdf/2015-06-djangogirls-seoul-aws.pdf&quot;&gt;Django Girs를 위한 Django on AWS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.awskr.org/2017/01/your-aws-first-days-todo-list/&quot;&gt;당신이 AWS 계정을 만들고 가장 먼저 해야 할 일 들과 하지 말아야 할 일 들&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>Django 배포연습 3 - EC2 ubuntu 서버 인스턴스 생성 및 기본 설정</title>
    <updated>2018-03-03T09:00:00+09:00</updated>
    <dc:date>2018-03-03T09:00:00+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>이현주</name>
    </author>
    <id>https://wayhome25.github.io/django/2018/03/03/django-deploy-02-nginx-wsgi/</id>
    <link href="https://wayhome25.github.io/django/2018/03/03/django-deploy-02-nginx-wsgi/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;blockquote&gt;
  &lt;p&gt;nginx, uwsgi, docker를 활용한 배포 연습 과정을 기록한 글입니다. &lt;br&gt;
개인 공부후 자료를 남기기 위한 목점임으로 내용상에 오류가 있을 수 있습니다.&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;nginx, uwsgi를 통해서 아마존 EC2에서 장고 앱 어플리케이션을 실행시켜 보는 것을 목표로 한다.&lt;/li&gt;
    &lt;li&gt;최소한의 설정만을 포함한다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/H9JNiKu.png&quot; alt=&quot;toy architecture&quot;&gt;&lt;/p&gt;

&lt;h4 id=&quot;1-클라이언트&quot;&gt;1. 클라이언트&lt;/h4&gt;
&lt;p&gt;웹서버(Nginx)로 HTTP 요청&lt;/p&gt;

&lt;h4 id=&quot;2-웹서버nginx&quot;&gt;2. 웹서버(Nginx)&lt;/h4&gt;
&lt;p&gt;웹 서버. 클라이언트로부터의 HTTP요청을 받아 정적인 페이지/파일을 돌려준다. (동적인 부분은 uWSGI가 담당)
가벼움과 높은 성능을 목표로 한다. 웹 서버, 리버스 프록시 및 메일 프록시 기능을 가진다.&lt;/p&gt;

&lt;h4 id=&quot;3-unix-socket&quot;&gt;3. Unix Socket&lt;/h4&gt;
&lt;p&gt;웹서버(Nginx) - 웹어플리케이션서버(uWSGI) 사이의 통신을 매개
HTTP 요청을 사용할 수도 있지만 서버 안쪽에서의 통신이기 때문에 socket 방식이 overhead가 적어서 더 효율이 좋음&lt;/p&gt;

&lt;h4 id=&quot;4-웹어플리케이션서버uwsgi&quot;&gt;4. 웹어플리케이션서버(uWSGI)&lt;/h4&gt;
&lt;p&gt;웹 서버(Nginx)와 웹 애플리케이션(Django)간의 연결을 중계
(Nginx에서 받은 요청을 Django에서 처리하기 위한 중계인 역할을 해준다)
Nginx는 Python을 모르기 때문에 uWSGI는 HTTP 요청을 python으로,
Django로 부터 받은 응답을 Nginx가 알 수 있도록 변환해준다.&lt;/p&gt;

&lt;h4 id=&quot;5-django&quot;&gt;5. Django&lt;/h4&gt;
&lt;p&gt;웹 애플리케이션. 웹 요청에 대해 동적데이터를 돌려준다.&lt;/p&gt;

&lt;h4 id=&quot;wsgi&quot;&gt;WSGI&lt;/h4&gt;
&lt;p&gt;Web Server Gateway Interface&lt;br&gt;
파이썬에서 웹 서버와 웹 애플리케이션간의 동작을 중계해주는 인터페이스 표준
웹클라이언트의 HTTP 프로토콜 요청을 Python Call로 변환하기 위한 매핑관계로 WSGI를 표준으로 사용
uWSGI는 WSGI 표준의 구현 (&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%9B%B9_%EC%84%9C%EB%B2%84_%EA%B2%8C%EC%9D%B4%ED%8A%B8%EC%9B%A8%EC%9D%B4_%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4&quot;&gt;Wikipedia&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://technerd.tistory.com/55&quot;&gt;AWS EC2 인스턴스에 Django+Nginx+uWSGI+PostgreSQL로 배포하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://software-engineer.gatsbylee.com/w-htm/&quot;&gt;Python WSGI server와 관련된 공부&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>Django 배포연습 2 - nginx, wsgi 개념</title>
    <updated>2018-03-03T09:00:00+09:00</updated>
    <dc:date>2018-03-03T09:00:00+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>이현주</name>
    </author>
    <id>https://wayhome25.github.io/django/2018/03/03/django-deploy-01-settings/</id>
    <link href="https://wayhome25.github.io/django/2018/03/03/django-deploy-01-settings/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;blockquote&gt;
  &lt;p&gt;nginx, uwsgi, docker를 활용한 배포 연습 과정을 기록한 글입니다. &lt;br&gt;
개인 공부후 자료를 남기기 위한 목점임으로 내용상에 오류가 있을 수 있습니다.&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;nginx, uwsgi를 통해서 아마존 EC2에서 장고 앱 어플리케이션을 실행시켜 보는 것을 목표로 한다.&lt;/li&gt;
    &lt;li&gt;최소한의 설정만을 포함한다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;settingspy-분리하기&quot;&gt;settings.py 분리하기&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;배포 전에 다양한 프로젝트 설정을 포함하는 settings.py를 실행환경별로 분리한다.&lt;br&gt;
(실행 환경별로 필요한 프로젝트 설정이 다르기 때문)
    &lt;ul&gt;
      &lt;li&gt;base.py (공통)&lt;/li&gt;
      &lt;li&gt;debug.py (개발용)&lt;/li&gt;
      &lt;li&gt;deploy.py (배포용)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;장고 어플리케이션의 기본 진입점
    &lt;ul&gt;
      &lt;li&gt;manage.py&lt;/li&gt;
      &lt;li&gt;프로젝트/wsgi.py&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;설정파일-구성&quot;&gt;설정파일 구성&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;각각의 설정파일에서 사용할 데이터 담은 파일을 .config_secret 폴더 안에 만든다.&lt;/li&gt;
  &lt;li&gt;.gitignore 파일에 해당 폴더를 추가하여 저장소에서 관리되지 않도록 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;project_folder/
    .config_secret/
        settings_common.json
        settings_debug.json
        settings_deploy.json
    django_app/
        config/
            settings/
              __init__.py
              base.py
              debug.py
              deploy.py
            wsgi
              __init__.py
              debug.py
              deploy.py
            __init__py
            urls.py
        manage.py  
    ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;settings_commonjson-예시&quot;&gt;settings_common.json 예시&lt;/h3&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;django&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;secret_key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Django project secret key&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;settings_debugjson-예시&quot;&gt;settings_debug.json 예시&lt;/h3&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;django&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;allowed_hosts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.compute.amazonaws.com&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;settings_deployjson-예시&quot;&gt;settings_deploy.json 예시&lt;/h3&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;django&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;allowed_hosts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.compute.amazonaws.com&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;settingspy에서-json-데이터-참조하기&quot;&gt;settings.py에서 json 데이터 참조하기&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;참고 : &lt;a href=&quot;https://wayhome25.github.io/django/2017/07/11/django-settings-secret-key/&quot;&gt;settings.py 의 SECRET_KEY 변경 및 분리하기&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;basepy-예시&quot;&gt;base.py 예시&lt;/h3&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;BASE_DIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abspath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__file__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ROOT_DIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BASE_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# .config_secret 폴더 및 하위 파일 경로&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CONFIG_SECRET_DIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROOT_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'.config_secret'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CONFIG_SECRET_COMMON_FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CONFIG_SECRET_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'settings_common.json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CONFIG_SECRET_DEBUG_FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CONFIG_SECRET_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'settings_debug.json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CONFIG_SECRET_DEPLOY_FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CONFIG_SECRET_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'settings_deploy.json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;config_secret_common&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CONFIG_SECRET_COMMON_FILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;SECRET_KEY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config_secret_common&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'django'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'secret_key'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;debugpy-예시&quot;&gt;debug.py 예시&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.base&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;config_secret_debug&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CONFIG_SECRET_DEBUG_FILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DEBUG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config_secret_debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'django'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'allowed_hosts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# WSGI application&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;WSGI_APPLICATION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'config.wsgi.debug.application'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;deploypy-예시&quot;&gt;deploy.py 예시&lt;/h3&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;.base&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;config_secret_deploy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CONFIG_SECRET_DEPLOY_FILE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DEBUG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config_secret_deploy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'django'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'allowed_hosts'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# WSGI application&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;WSGI_APPLICATION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'config.wsgi.deploy.application'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr&gt;

&lt;h1 id=&quot;wsgi-분리하기&quot;&gt;wsgi 분리하기&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;uwsgi 명령을 통해서 직접 웹어플리케이션 서버를 실행할때 사용할 설정 파일을 실행환경별로 분리한다.
(실행 환경별로 필요한 프로젝트 설정이 다르기 때문)
    &lt;ul&gt;
      &lt;li&gt;base.py (공통)&lt;/li&gt;
      &lt;li&gt;debug.py (개발용)&lt;/li&gt;
      &lt;li&gt;deploy.py (배포용)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;설정파일-구성-1&quot;&gt;설정파일 구성&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;project_folder/
    .config_secret/
        settings_common.json
        settings_debug.json
        settings_deploy.json
    django_app/
        config/
            settings/
              __init__.py
              base.py
              debug.py
              deploy.py
            wsgi
              __init__.py
              debug.py
              deploy.py
            __init__py
            urls.py
        manage.py  
    ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;wsgidebugpy-예시&quot;&gt;wsgi/debug.py 예시&lt;/h3&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.core.wsgi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_wsgi_application&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setdefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DJANGO_SETTINGS_MODULE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;config.settings.debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_wsgi_application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;wsgideploypy-예시&quot;&gt;wsgi/deploy.py 예시&lt;/h3&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.core.wsgi&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_wsgi_application&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setdefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DJANGO_SETTINGS_MODULE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;config.settings.deploy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_wsgi_application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr&gt;

&lt;h1 id=&quot;runserver&quot;&gt;runserver&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;장고는 DJANGO_SETTINGS_MODULE 환경변수를 통해서 참고할 settings 파일의 경로를 확인한다.&lt;/li&gt;
  &lt;li&gt;환경변수가 설정되지 않으면 &lt;a href=&quot;https://github.com/django/django/blob/1.10.6/django/conf/project_template/project_name/wsgi.py-tpl&quot;&gt;wsgi.py&lt;/a&gt; 의 설정값을 사용&lt;/li&gt;
  &lt;li&gt;혹은 &lt;code class=&quot;highlighter-rouge&quot;&gt;python3 manage.py runserver&lt;/code&gt; 시에 &lt;code class=&quot;highlighter-rouge&quot;&gt;--settings&lt;/code&gt; 옵션을 통해서 지정 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&quot;language-commandline&quot;&gt;# local development
python3 manage.py runserver --settings=config.settings.debug

# 환경변수 설정예시
export DJANGO_SETTINGS_MODULE=config.settings.debug
echo $DJANGO_SETTINGS_MODULE
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;참고&quot;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/1.11/topics/settings/&quot;&gt;Django settings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/1.11/howto/deployment/wsgi/&quot;&gt;How to deploy with WSGI&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cjh5414.github.io/django-settings-separate/&quot;&gt;Open Menu
Django settings.py 환경을 여러 개의 설정 파일로 분리하여 사용하기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>Django 배포연습 1 - settings, wsgi 분리</title>
    <updated>2018-03-03T09:00:00+09:00</updated>
    <dc:date>2018-03-03T09:00:00+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>Developer88 Developer88</name>
    </author>
    <id>http://developer88.tistory.com/146</id>
    <link href="http://developer88.tistory.com/146"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;RxJava2(RxAndroid)가 나온지도 시간이 많이 흘렀네요.&lt;/p&gt;
&lt;p&gt;RxJava개발진영에서도 2018년 3,4월경부터는 더이상 지원을 하지 않는다고 하니,&lt;/p&gt;
&lt;p&gt;이제는 업그레이드를 위한 준비를 해서 테스트 일정까지 생각해보아야 할 때가 되었는데요.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;오늘은 RxJava1에서 RxJava2(RxAndroid)로 업그레이드 하면서 알아야 하는 것에 대해서 정리해 보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;혹시 RxJava1에 관해서는 아래 링크를 참조해 주세요ㅋ&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;color: rgb(255, 94, 0);&quot;&gt;&lt;a href=&quot;http://developer88.tistory.com/1&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot; style=&quot;&quot;&gt;&lt;span style=&quot;color: rgb(255, 94, 0);&quot;&gt;&amp;gt;&amp;gt;RxAndroid 이해하기&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;1. dependency설정&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;RxAndroid2를 사용하기 위해서는 dependency부터 변경해야 겠지요.&lt;/p&gt;
&lt;p&gt;이미지에서 하이라이트된 두줄을 추가해 주어야 합니다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:636px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile3.uf.tistory.com/image/9964583F5A9A72FC218755&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Screenshot 2018-03-03 19.02.38.png&quot; height=&quot;82&quot; width=&quot;636&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;참고로 retrofit을 사용하고 있다면, adapter-rxjava2로 adapter도 변경해주어야 합니다.&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:621px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile7.uf.tistory.com/image/99484F395A9A72EC2162C4&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Screenshot 2017-11-02 11.01.55.png&quot; height=&quot;101&quot; width=&quot;621&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;이제 준비가 되었으니, RxJava2에서 변경되어서 알아야 하는 것들을 하나씩 보도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;2. No Null!&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Observable에서 null을 넘기게 되는 경우도 있었는데요.&lt;/p&gt;
&lt;p&gt;이제는 더이상 null을 보낼 수 없습니다.&lt;/p&gt;
&lt;p&gt;RxAndroid2에서는  NullPointerException이 나옵니다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Obsrvable에서 흘러나오는 데이터를 구독할 때,&lt;/p&gt;
&lt;p&gt;만약 null값이면 어떻게 하라는 코드는 이제 사용할 수 없게 된 것이죠.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Networking에서 사용할 때는, 문제가 조금 생길 수 있는데요.&lt;/p&gt;
&lt;p&gt;Server가 200 OK를 보냈는데,&lt;/p&gt;
&lt;p&gt;Response의 body에는 null값이 왔다면 어떻게 해야 할까요?&lt;/p&gt;
&lt;p&gt;이럴때는 body를 wrap해서 null이 통과하지 않고 다른 값을 보내도록 하는 번거로움이 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;이 부분에 있어서,&lt;/p&gt;
&lt;p&gt;코드를 고치고 QA를 할 때 주의를 기울여야 할 것 같습니다.&lt;/p&gt;
&lt;p&gt;특히나 네트워크를 타는 경우는 더욱 그러할 것 같네요.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;div class='“google_ad_for_body&quot;'&gt;
&lt;script async=&quot;&quot; src=&quot;http://developer88.tistory.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- Code_Body --&gt;
&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:300px;height:250px&quot; data-ad-client=&quot;ca-pub-6996749162824652&quot; data-ad-slot=&quot;9085956033&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;3. Maybe&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;RxJava2에서는 Maybe가 추가되었는데요.&lt;/p&gt;
&lt;p&gt;Maybe를 사용하면, 하나의 아이템이 있거나 혹은 없게 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;하지만 주의해야 할 점은 최대 하나의 아이템만 있을 수 있다는 점인데요.&lt;/p&gt;
&lt;p&gt;backpressure에는 대응할 수 없습니다.&lt;/p&gt;
&lt;p&gt;(대응할 수 없다라고 하기에는, 애초에 하나의 아이템만 받을 수 있으니까요)&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;이걸로 Null에 대해서 완벽하게 대응할 수 있다는 것은 아니지만,&lt;/p&gt;
&lt;p&gt;경우에 따라서는 Null값에 대해 유연하게 대처할 수 있게 해줍니다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Maybe는 아이템이 있으면 onSuccess,&lt;/p&gt;
&lt;p&gt;없으면 onComplete을 호출합니다.&lt;/p&gt;
&lt;p&gt;Exception이 필요가 없는 개념인데요.&lt;/p&gt;
&lt;p&gt;잘만쓰면 유용할 수 있을 것 같습니다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;4. &lt;/span&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;Observable&lt;/span&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt; vs &lt;/span&gt;&lt;/b&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;b&gt;Flowable&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;div&gt;BackPressure 핸들링을 위해서, Flowable이 추가되었는데요.&lt;/div&gt;
&lt;p&gt;이름에서도 Flow하게 한다는 것이므로, BackPressure에 대응하기 위해 만든 느낌이 나는데요.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Observable과 Flowable을 각각 구분해보면 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Observable은 1000개 미만의 아이템들이 흐를 때 사용하구요,&lt;/p&gt;
&lt;p&gt;터치이벤트에 대응할 때도 Observable이면 충분합니다.&lt;/p&gt;
&lt;p&gt;이런 이벤트 정도에 BackPressure가 생길일은 없을 테니까요.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Flowable은 10,000개 정도이상의 아이템들이 흘러서,&lt;/p&gt;
&lt;p&gt;소스에 생성을 제한해야 할 정도가 될 때 사용해야 하는데요.&lt;/p&gt;
&lt;p&gt;외부 저장장소에서 파일을 읽어올 때라던가, &lt;/p&gt;
&lt;p&gt;네트워킹을 통해서 데이터를 가져올 때가 예가 될 수 있습니다.&lt;/p&gt;
&lt;p&gt;이렇게 BackPressure에 대응하기 위해서 Flowable이 있는 것이고,&lt;/p&gt;
&lt;p&gt;RxJava2가 필요하게 된 것이지요.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;정리해보면, 사실 개인개발자들이 만드는 앱에서,&lt;/p&gt;
&lt;p&gt;BackPressure를 감당해야 할 일은&lt;/p&gt;
&lt;p&gt;네트워크 쪽을 재외하고는 거의 없을 것 같네요.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;5. &lt;/span&gt;&lt;/b&gt;&lt;span style=&quot;font-size: 24px;&quot;&gt;&lt;b&gt;from() =&amp;gt; fromArray(), fromIterable()&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Observable.from()으로 사용하던 메소드를 좀 더 구체적으로 구분해서 사용해야 하는데요.&lt;/p&gt;
&lt;p&gt;메소드 명에서 볼 수 있듯이, Array에 대해서는 fromArray를, &lt;/p&gt;
&lt;p&gt;ArrayList나 List의 경우에는 fromIterable을 사용해주면 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;6. subscribe&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;RxJava2에서는 subscribe를 하고 observer를 넣어주어야 하는데요.&lt;/p&gt;
&lt;p&gt;Observer에는 아래와 같이 4개의 메소드를 구현해주어야 합니다.&lt;/p&gt;
&lt;p&gt;예전에는 onNext, onError, onComplete이 있었는데요.&lt;/p&gt;
&lt;p&gt;이들을 사용하는 방법은 달라지지 않았습니다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;추가된 onSubscribe만 알면 되는데,&lt;/p&gt;
&lt;p&gt;이것은 다른곳에서 observer를 subscribe를 하게 되었을 때, 어떻게 할지를 구현하는 곳입니다.&lt;/p&gt;
&lt;p&gt;Disposable(RxJava1.0의 Subscription)를 받아서 구현할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:591px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile22.uf.tistory.com/image/9937213359FA7435131A7E&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Screenshot 2017-11-02 10.25.34.png&quot; height=&quot;605&quot; width=&quot;591&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;div class='“google_ad_for_body&quot;'&gt;
&lt;script async=&quot;&quot; src=&quot;http://developer88.tistory.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- Code_Body --&gt;
&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:300px;height:250px&quot; data-ad-client=&quot;ca-pub-6996749162824652&quot; data-ad-slot=&quot;9085956033&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;7. Subscription =&amp;gt; Disposable&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Subscription&lt;/b&gt;이름이 Disposable로 변경되었습니다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;리소스 관리에 편리해서 사용했었던(거의 치트키 수준이었지요),&lt;/p&gt;
&lt;p&gt;&lt;b&gt;CompositeSubscription&lt;/b&gt;도 CompositeDisposable로 변경되었는데요.&lt;/p&gt;
&lt;p&gt;CompositeSubscription에서 add메소드를 사용하던 방법이 약간 달라져서&lt;/p&gt;
&lt;p&gt;Rxjava2를 적용할 때 신경써주어야 하는 부분입니다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;기존에는, subscribe메소드가, Subscription을 return해주었기 때문에,&lt;/p&gt;
&lt;p&gt;이것을 compositeSubscription의 add 메소드를 이용해서 넣어주기만 하면 되었는데요.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;이제는 subscribe메소드가 void를 return해 주기 때문에,&lt;/p&gt;
&lt;p&gt;subscribeWith라고 하는 메소드를 사용해주어야 합니다.&lt;/p&gt;
&lt;p&gt;예전처럼 subscribe에 observer를 그냥 넣어주면 빨간줄이 생기면서 잘못되었다고 나옵니다.&lt;/p&gt;
&lt;p&gt;(정말 고칠 코드가 많아지는 순간이네요.)&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;subscribeWith를 사용하는 것만으로 끝나지 않습니다.&lt;br&gt;subscribeWith는 observer를 return해주지, &lt;/p&gt;
&lt;p&gt;disposable(rxjava1.0에서의 subscription)을 return해주지 않기 때문인데요.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;그래서, 아래와 같이 subscribeWIth에 DisposableObserver를 주어야 합니다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile5.uf.tistory.com/image/99950A365A9A714020C34D&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Screenshot 2018-03-03 18.50.43.png&quot; height=&quot;420&quot; width=&quot;900&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;9. assertResult&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;RxAndroid에서 테스트 하기에 애매한 경우가 있었는데요.&lt;/p&gt;
&lt;p&gt;아래와 같이 test메소드와 assertResult메소드를 사용하면,&lt;/p&gt;
&lt;p&gt;쉽게 원하는 값이 잘 나오는지 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:335px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile29.uf.tistory.com/image/993D193359FA77EE182482&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Screenshot 2017-11-02 10.41.53.png&quot; height=&quot;120&quot; width=&quot;335&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;2값이 맞는지 확인하려 했지만, 3이었기 때문에 &lt;/p&gt;
&lt;p&gt;아래와 같이 AssertionError을 보내줍니다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left; clear: none; float: none;&quot;&gt;&lt;span class=&quot;imageblock&quot; style=&quot;display:inline-block;width:900px;;height:auto;max-width:100%&quot;&gt;&lt;img src=&quot;http://cfile3.uf.tistory.com/image/99A8DD3359FA771719A281&quot; filemime=&quot;image/jpeg&quot; filename=&quot;Screenshot 2017-11-02 10.38.19.png&quot; height=&quot;334&quot; width=&quot;900&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;9. limit 이 없어짐&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;이제 limit대신에 take를 사용해야 합니다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;10. 기존에 있었으나 다시 보게 되는 Operator들&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;b&gt;10&lt;/b&gt;&lt;/span&gt;&lt;b&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;-1. Single&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Observable이나 Flowable처럼 여러 아이템을 흘려보내는 것이 아니라,&lt;/p&gt;
&lt;p&gt;하나의 아이템을 onSuccess나 onError로 흘려보낼 수 있는 Observable의 변형이라고 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;하나의 아이템만을 보낼 때는 좀 더 명확해 질 수 있을 것 같네요.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;사실, RxAndroid1에서도 존재했었는데요.&lt;/p&gt;
&lt;p&gt;많이 사용하지는 않았습니다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;&lt;b&gt;10&lt;/b&gt;&lt;/span&gt;&lt;b&gt;&lt;span style=&quot;font-size: 12pt;&quot;&gt;-2. Completable&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Completable자체는 RxAndroid1과 거의 비슷하다고 하는데요.&lt;/p&gt;
&lt;p&gt;개인적으로는 많이 사용하질 않고 있었네요.&lt;/p&gt;
&lt;p&gt;아이템을 받지 않고, onComplete을 호출하거나,&lt;/p&gt;
&lt;p&gt;Exception이 나게 되었을 경우,&lt;/p&gt;
&lt;p&gt;onError를 호출하게 됩니다.&lt;/p&gt;
&lt;p&gt;onNext는 호출하지 않는 거죠.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;특정한 값을 받을 필요는 없고,&lt;/p&gt;
&lt;p&gt;단순히 Complete되었는지 혹은 Exception이 발생했는지 알아야 할 때,&lt;/p&gt;
&lt;p&gt;사용합니다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;위의 Single, Completable 그리고 Maybe를 잘 분리해서 사용한다면,&lt;/p&gt;
&lt;p&gt;좀 더 명확하게 코드를 사용할 수 있을 것 같네요.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;div class='“google_ad_for_body&quot;'&gt;
&lt;script async=&quot;&quot; src=&quot;http://developer88.tistory.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- Code_Body --&gt;
&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:300px;height:250px&quot; data-ad-client=&quot;ca-pub-6996749162824652&quot; data-ad-slot=&quot;9085956033&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;span style=&quot;font-size: 18pt;&quot;&gt;11. RxJava2로 업그레이드 하기&lt;/span&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;위에서 RxJava2에서 바뀐 부분들에 대해서 정리해 보았는데요.&lt;/p&gt;
&lt;p&gt;개인적으로 어떤 식으로 업그레이드를 할지 정리해 보겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;가장 먼저, 위에서 변경된 API스펙들을 참조해서,&lt;/p&gt;
&lt;p&gt;기존 앱이 구동되서 테스팅 할 수 있도록,&lt;/p&gt;
&lt;p&gt;여러가지 이유로 바뀐 API들의 이름을 변경해서 앱이 돌아가도록 합니다.&lt;/p&gt;
&lt;p&gt;특히나 리소스관리를 이유로, CompositeSubscrition을 사용한 경우&lt;/p&gt;
&lt;p&gt;7번의 예를 참조하여서 CompositeDisposable과 SubscribeWith 그리고,&lt;/p&gt;
&lt;p&gt;DisposableObservable을 이용해 수정해 주어야 하지요.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;RxJava1=&amp;gt;2로 변경된 스펙은 아래링크에서 좀더 자세히 알 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxJava/wiki/What%27s-different-in-2.0&quot; target=&quot;_blank&quot; class=&quot;tx-link&quot;&gt;&lt;span style=&quot;color: rgb(255, 94, 0);&quot;&gt;https://github.com/ReactiveX/RxJava/wiki/What%27s-different-in-2.0&lt;/span&gt;&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;div&gt;&lt;br&gt;&lt;/div&gt;
&lt;p&gt;그다음이, null에 관한 대응입니다.&lt;/p&gt;
&lt;p&gt;기존에 null값을 받아서 사용하거나 한 부분이 코드에 있다면 수정해서 대응해줘야 합니다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;특히나 공공API등 서버에게 요청을 하지 못하는 상태인 개인 개발자들의 경우,&lt;/p&gt;
&lt;p&gt;그동안 테스트를 많이하면서 null값등에 대한 방어코드등을 작성해왔을텐데요.&lt;/p&gt;
&lt;p&gt;테스트할 생각을 하면 은근히 피곤해지실것 같습니다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;위 부분이 다 되었다면,&lt;/p&gt;
&lt;p&gt;backpressure에 대응할 수 있는 Flowable등을 적용하는 것이 다음이라고 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;추가적으로 test하기에 좋은 assertResult같은 메소드들을 사용하거나,&lt;/p&gt;
&lt;p&gt;Singe, Completable, Maybe등을 활용해서,&lt;/p&gt;
&lt;p&gt;좀더 명확한 코드를 만들어주는 것을 다음 단계에서 할 수 있을 것 같네요.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;마지막 단계까지 간다면 RxJava2에 조금 익숙해져 있지 않을까 싶습니다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;추가적으로, RxAndroid2로 업그레이드 하는 데 있어서 필요한 부분들은,&lt;/p&gt;
&lt;p&gt;계속 이 글을 통해 업그레이드 하도록 하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;margin:10px 0 10px 0;&quot;&gt;
&lt;script async src=&quot;http://developer88.tistory.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
&lt;!-- Code_web_Bottom --&gt;
&lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-6996749162824652&quot; data-ad-slot=&quot;4020902385&quot;&gt;&lt;/ins&gt;
&lt;script&gt;
(adsbygoogle = window.adsbygoogle || []).push({});
&lt;/script&gt;
&lt;/div&gt;
&lt;div style=&quot;text-align:center; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=http://developer88.tistory.com/146&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowtransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>RxJava2 (RxAndroid2) 로 업그레이드 하기</title>
    <updated>2018-03-03T19:08:43+09:00</updated>
    <dc:date>2018-03-03T19:08:43+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>커니</name>
    </author>
    <id>http://www.androidhuman.com/ml/2018/03/04/ml_for_everyone_basics_01/</id>
    <link href="http://www.androidhuman.com/ml/2018/03/04/ml_for_everyone_basics_01/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;blockquote&gt;
  &lt;p&gt;이 글은 김성훈 교수님의 ‘&lt;a href=&quot;https://hunkim.github.io/ml/&quot;&gt;모두를 위한 머신러닝/딥러닝 강의&lt;/a&gt;‘를 학습한 내용을 개인적으로 정리한 글입니다.
때문에 원 강의에서 설명하는 모든 내용을 다루지 않을 수 있으며, 강의에는 포함되어 있지 않은 내용을 추가로 다룰 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/qPMeuL2LIqY&quot; width=&quot;560&quot; height=&quot;315&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;
&lt;/iframe&gt;

&lt;h2 id=&quot;머신러닝이란&quot;&gt;머신러닝이란?&lt;/h2&gt;

&lt;p&gt;최근 들어 머신러닝(Machine Learning)이라는 용어를 매우 많은 곳에서 듣곤 합니다. 인공지능 분야에서는 기존부터 꽤 주목받고 있던 개념이였지만, 알파고와 이세돌의 대국 이후로는 일반인들 사이에서도 꽤나 주목받는 용어가 된 것 같습니다.&lt;/p&gt;

&lt;p&gt;그렇다면 과연 ‘머신러닝’의 정의는 무엇일까요? 비교적 최근에 나온 개념일 것이라 생각하기 쉽지만, 놀랍게도 1959년에 아서 사무엘(Arthur Samuel)에 의해 최초로 정의되었습니다. 아서 사무엘은 머신 러닝을 다음과 같이 정의합니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Field of study that gives computers the ability to learn without being explicitly programmed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이는 한국어로 &lt;strong&gt;‘명시적인 프로그래밍 없이도 컴퓨터가 스스로 학습할 수 있도록 하는 학문’&lt;/strong&gt; 정도로 해석할 수 있습니다.&lt;/p&gt;

&lt;p&gt;컴퓨터는 복잡한 연산이나 많은 자료를 사람보다 훨씬 빠르고 정확하게 처리할 수 있으며, 이를 위해 필요한 규칙은 대부분 사람이 지정해줍니다. 하지만 이러한 규칙들이 너무 많고 복잡한 경우 이들을 일일히 사람이 지정해주기 매우 어렵습니다.&lt;/p&gt;

&lt;p&gt;스팸 메일 필터를 예로 들어봅시다. 스팸 메일을 걸러낼 수 있는 규칙(예: 본문 내 수상한 링크가 포함되어 있음)을 정의하여 이를 규칙에 있는 경우, 해당 규칙과 일치하는 스펨 메일을 거를 수 있습니다. 하지만 이 규칙에는 없는 새로운 형태의 스팸 메일(예: 광고성 이미지만 포함하는 메일)은 찾을 수 없습니다. 때문에 이를 필터링 규칙에 추가해야만 같은 종류의 스팸 메일을 걸러낼 수 있게 됩니다.&lt;/p&gt;

&lt;p&gt;스팸 메일의 양이 많은 만큼 그 유형도 매우 다양하기에, 스팸 메일 유형을 프로그래머가 직접 필터링 규칙에 추가하려면 매우 큰 노력이 필요합니다.&lt;/p&gt;

&lt;p&gt;최근 기술 개발이 활발히 이뤄지고 있는 자율 주행도 이와 특징이 유사합니다. 자율주행을 위해 필요한 규칙이 너무 많기에 이들을 일일이 프로그래밍하는 것은 현실적으로 매우 어렵습니다.&lt;/p&gt;

&lt;p&gt;이러한 한계를 극복하기 위해, 프로그래머가 모든 규칙을 정해주는 대신 ‘프로그램이 데이터를 통해 규칙을 스스로 학습할 수 있으면 어떨까’라는 고민을 하게 되었고, 이러한 주제에 대한 고민들이 ‘머신 러닝’이라는 분야로 자리잡게 되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;학습이란&quot;&gt;학습이란?&lt;/h2&gt;

&lt;p&gt;머신러닝에서 프로그램은 ‘학습(Learning)’을 하게 됩니다. 이 때, 학습을 하는 방법에 따라 크게 두 가지로 나눌 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;지도-학습&quot;&gt;지도 학습&lt;/h3&gt;

&lt;p&gt;지도 학습(Supervised Learning)은 특징(features)이 이미 정해진 데이터를 사용하여 학습하는 방법입니다. 이 때 각 데이터에 정해진 특징은 레이블(label)이라고도 표현할 수 있으며, 레이블이 있는 데이터들의 집합은 트레이닝 세트(Training Set)이라고도 부릅니다.&lt;/p&gt;

&lt;p&gt;다음은 특정 사물에 해당하는 사진을 짝지어둔 데이터입니다. 사진이라는 데이터에 해당하는 특징(사물)을 짝지어 둔 데이터들의 집합이므로 이는 트레이닝 세트의 한 예로 들 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.androidhuman.com/assets/posts/ml/2018/03/04/ml_for_everyone_basics_01/trainset.jpg&quot; alt=&quot;Training Set&quot;&gt;
&lt;em&gt;Figure. 트레이닝 세트의 예시&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;지도 학습에서는 이와 같은 트레이닝 세트를 통해 각 레이블에 대한 특징을 학습하게 됩니다.&lt;/p&gt;

&lt;p&gt;트레이닝 데이터 세트는 다음과 같이 표를 사용하여 표현할 수도 있습니다. 이 표에서 &lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt;는 자료의 특징을 표현할 때 사용하고, &lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt;는 레이블을 의미합니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;script type=&quot;math/tex&quot;&gt;X_1&lt;/script&gt;&lt;/th&gt;
      &lt;th&gt;&lt;script type=&quot;math/tex&quot;&gt;X_2&lt;/script&gt;&lt;/th&gt;
      &lt;th&gt;&lt;script type=&quot;math/tex&quot;&gt;X_3&lt;/script&gt;&lt;/th&gt;
      &lt;th&gt;&lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;이렇게 주어진 트레이닝 세트를 학습하게 되면 이 데이터들을 기반으로 한 모델이 생성되고, 이 모델을 사용하면 어떠한 특징을 갖는 데이터가 어떤 레이블에 속할지 추측할 수 있게 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;비지도-학습&quot;&gt;비지도 학습&lt;/h3&gt;

&lt;p&gt;비지도 학습(Unsupervised Learning)은 지도 학습과 달리 학습에 사용하는 데이터에 특징(레이블)이 부여되어 있지 않습니다.&lt;/p&gt;

&lt;p&gt;지도 학습이 기존에 있는 데이터를 기반으로 새로운 데이터에 대한 특징을 추론하는 것을 목표로 한다면, 비지도 학습은 주어진 데이터들이 어떻게 구성되어있는지를 분석하는 것을 목표로 합니다.&lt;/p&gt;

&lt;p&gt;비지도 학습의 대표적인 예로 다음 사례들을 들 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;구글 뉴스 서비스: 비슷한 주제의 뉴스끼리 묶어줌&lt;/li&gt;
  &lt;li&gt;단어 클러스터링: 유사한 단어끼리 묶어줌&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;지도-학습의-유형&quot;&gt;지도 학습의 유형&lt;/h2&gt;

&lt;p&gt;지도 학습은 종류에 따라 회귀분석(Regression)과 분류(Classification)으로 나뉩니다.&lt;/p&gt;

&lt;h3 id=&quot;회귀분석&quot;&gt;회귀분석&lt;/h3&gt;

&lt;p&gt;회귀분석은 어떠한 변수에 영향을 받는 결과가 연속적인&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; 경우에 사용합니다. 시험 공부에 투자한 시간(변수)에 따라 예상되는 기말고사 점수(0~100 사이의 연속적인 값)을 추측하는 모델을 대표적인 예로 들 수 있습니다.&lt;/p&gt;

&lt;p&gt;다음은 시험 공부에 투자한 시간과 실제로 획득한 성적을 담고 있는 트레이닝 세트입니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;
&lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; (time spent for exam)&lt;/th&gt;
      &lt;th&gt;
&lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; (score)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;90&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;80&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;앞의 트레이닝 세트로 학습시킨 화귀분석 모델을 사용한다면, 시험 공부에 7시간을 투자한 학생의 예상 점수를 대략 75점 정도로 예측할 수 있을 것입니다.&lt;/p&gt;

&lt;h3 id=&quot;분류&quot;&gt;분류&lt;/h3&gt;

&lt;p&gt;분류는 어떠한 변수에 영향을 받는 결과를 연속적이지 않은 값들로 나눌 때 사용합니다. 시험 공부에 투자한 시간(변수)에 따라 예상되는 합격 여부(Pass/Fail) 혹은 학점 (A/B/C/D/E/F)을 추측하는 모델을 대표적인 예로 들 수 있습니다.&lt;/p&gt;

&lt;p&gt;다음은 시험 공부에 투자한 시간과 실제로 획득한 학점(Pass/Fail)를 담고 있는 트레이닝 세트입니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;
&lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; (time spent for exam)&lt;/th&gt;
      &lt;th&gt;
&lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; (pass/fail)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;P&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;P&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;F&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;F&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;여기에서는 데이터를 합격(P) 혹은 불합격(F) 두 가지로 나뉩니다. 따라서 이러한 데이터 구분은 Binary Classification이라 부릅니다.&lt;/p&gt;

&lt;p&gt;합격 여부가 아닌 학점을 추측하는 모델을 만드는 경우, 다음과 같은 트레이닝 세트를 사용하게 될 것입니다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;
&lt;script type=&quot;math/tex&quot;&gt;X&lt;/script&gt; (time spent for exam)&lt;/th&gt;
      &lt;th&gt;
&lt;script type=&quot;math/tex&quot;&gt;Y&lt;/script&gt; (grade)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;D&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;F&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;주어진 데이터를 두 개 이상으로 분류하였으므로 이는 Multi-label classification이라 할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://cs231n.github.io/classification/&quot;&gt;CS231n Convolutional Neural Networks for Visual Recognition&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://medium.com/simple-ai/classification-versus-regression-intro-to-machine-learning-5-5566efd4cb83&quot;&gt;Classification Versus Regression— Intro To Machine Learning #5&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>기본적인 머신러닝의 용어와 개념 설명 - 모두를 위한 머신러닝(딥러닝의 기본) #01</title>
    <updated>2018-03-04T19:00:00+09:00</updated>
    <dc:date>2018-03-04T19:00:00+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>최범균 madvirus</name>
    </author>
    <id>http://javacan.tistory.com/entry/spring-boot-2-hikaricp-property</id>
    <link href="http://javacan.tistory.com/entry/spring-boot-2-hikaricp-property"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;스프링 부트 2.0은 기본 사용하는 커넥션풀을 HikariCP로 교체했다. HikariCP와 관련된 커넥션 풀 속성은 다음과 같다. 속성 설명 기본 값 connectionTimeout 풀에서 커넥션을 구할 때 대기 시간을 밀리초 단위로 지정한다. 대기 시간 안에 구하지 못하면 익셉션이 발생한다. 허용 가능한 최소 값은 250이다. 30000 (30초) validationTimeout 커넥션이 유효한지 검사할 때 대기 시간을 지정한다. 이 값은 con..&lt;/p&gt;
&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=http://javacan.tistory.com/479&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowtransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>스프링 부트 2.0 HikariCP 프로퍼티 설정</title>
    <updated>2018-03-14T14:26:46+09:00</updated>
    <dc:date>2018-03-14T14:26:46+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>최범균 madvirus</name>
    </author>
    <id>http://javacan.tistory.com/entry/spring-boot-jackson-json-date-type-format</id>
    <link href="http://javacan.tistory.com/entry/spring-boot-jackson-json-date-type-format"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;스프링 부트 날짜 타입을 JSON으로 응답할 때 별도 설정을 하지 않으면 부트 버전에 따라 응답 형식이 다르다. 먼저 간다한 테스트를 위해 다음과 같이 세 개의 날짜 형식을 갖는 Now 클래스를 사용하자. import java.time.LocalDateTime; import java.time.OffsetDateTime; import java.util.Date; public class Now { private LocalDateTime localTime..&lt;/p&gt;
&lt;div style=&quot;text-align:left; padding-top:10px;clear:both&quot;&gt;
&lt;iframe src=&quot;//www.facebook.com/plugins/like.php?href=http://javacan.tistory.com/478&amp;amp;layout=standard&amp;amp;show_faces=true&amp;amp;width=310&amp;amp;action=like&amp;amp;font=tahoma&amp;amp;colorscheme=light&amp;amp;height=65&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; style=&quot;border:none; overflow:hidden; width:310px; height:65px;&quot; allowtransparency=&quot;true&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>스프링 부트 2.0과 1.5의 Jackson JSON 날짜 타입 포맷 설정</title>
    <updated>2018-03-08T21:37:48+09:00</updated>
    <dc:date>2018-03-08T21:37:48+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>한로니</name>
    </author>
    <id>https://medium.com/@jungil.han/junit-rxjava-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EC%BB%B4%ED%8C%A8%EB%8B%88%EC%96%B8-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-e8d17b674bdd?source=rss-f6f1719d702a------2</id>
    <link href="https://medium.com/@jungil.han/junit-rxjava-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EC%BB%B4%ED%8C%A8%EB%8B%88%EC%96%B8-%EC%98%A4%EB%B8%8C%EC%A0%9D%ED%8A%B8-e8d17b674bdd?source=rss-f6f1719d702a------2"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*1yD1jhrSV5Kmd7Ee4OMxPg.jpeg&quot;&gt;&lt;figcaption&gt;Photo by &lt;a href=&quot;https://unsplash.com/photos/kRNZiGKtz48?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;NordWood Themes&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/search/photos/coding?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;좀 더 나은 방법으로 RxJava 코드를 유닛 테스트할 수 없을까?를 매번 고민하는 이유는 비동기 코드의 숙명쯤일 거라고 생각한 적이 있습니다. 약간의 찜찜함으로 이를 덮어두었다가 최근에 이 문제에 대해서 다시 생각해볼 기회가 생겼습니다. 일반적인 MVP 패턴에서 Presenter에 존재하는 다음과 같은 함수를 유닛 테스트하려면 어떻게 해야 할까요?&lt;/p&gt;
&lt;pre&gt;override fun load(query: String, page: Int) {&lt;br&gt;    interactor.load(query, page)&lt;br&gt;&lt;strong&gt;        .subscribeOn(Schedulers.io())&lt;br&gt;        .observeOn(AndroidSchedulers.mainThread())&lt;/strong&gt;&lt;br&gt;        .subscribe {&lt;br&gt;            view.render(it)&lt;br&gt;        }&lt;br&gt;}&lt;/pre&gt;
&lt;p&gt;쉬운 접근법 중 하나는 안드로이드 Instrumentation 기반으로 테스트를 만들고, CountDownLatch 클래스를 사용해 비동기 작업이 완료될 때까지 기다리는 방법입니다. 이를 코드로 작성하면 아래와 같은 모습이 됩니다. 목(Mock) 객체의 view.render 함수가 호출될 때까지 기다렸다가, 해당 함수가 호출되면 조건을 테스트하고 latch를 카운트다운시키는 것입니다.&lt;/p&gt;
&lt;pre&gt;@Test&lt;br&gt;fun load() {&lt;br&gt;    &lt;strong&gt;val latch = CountDownLatch(1)&lt;/strong&gt;&lt;br&gt;    presenter.attach(object: Contract.View {&lt;br&gt;        override fun render(state: ViewState) {&lt;br&gt;            &lt;strong&gt;latch.countDown()&lt;/strong&gt;&lt;br&gt;        }&lt;br&gt;    }&lt;br&gt;    presenter.load(any(), any())&lt;br&gt;    &lt;strong&gt;latch.await()&lt;/strong&gt;&lt;/pre&gt;
&lt;pre&gt;    // Some assertions here&lt;br&gt;    …&lt;br&gt;}&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/awaitility/awaitility&quot;&gt;Awaitility&lt;/a&gt;와 같은 라이브러리를 사용해서 CountDownLatch를 대체하는 것도 방법입니다. 하지만 위와 같은 형태에서 크게 벗어나지는 못합니다.&lt;/p&gt;
&lt;h3&gt;좀 더 나은 방법 찾기&lt;/h3&gt;
&lt;p&gt;MVP 패턴을 엄격하게 구현하는 개발자라면 Presenter와 안드로이드 프레임워크의 의존성을 분리하려고 노력할 것입니다. 이를 통해서 얻는 이점 중 하나는 Presenter 테스트 코드를 JUnit 기반으로 작성할 수 있으며 이는 테스트를 로컬 JVM 기반으로 빠르게 수행할 수 있다는 의미입니다. 다시 첫 번째 코드 조각으로 돌아가서, 이곳에서는 안드로이드 관련 코드를 직접 호출하지는 않습니다. 하지만 RxAndroid의 AndroidSchedulers 클래스 정적 필드 초기화 과정에서 안드로이드 프레임워크를 필요로 하기 때문에 때문에 JUnit 기반으로 테스트를 실행하면 다음과 같은 에러가 발생합니다.&lt;/p&gt;
&lt;pre&gt;Caused by: java.lang.RuntimeException: &lt;strong&gt;Method getMainLooper in android.os.Looper not mocked.&lt;/strong&gt; See http://g.co/androidstudio/not-mocked for details.&lt;br&gt;    at android.os.Looper.getMainLooper(Looper.java)&lt;br&gt;    at io.reactivex.android.schedulers.AndroidSchedulers$MainHolder.&amp;lt;clinit&amp;gt;(AndroidSchedulers.java:29)&lt;/pre&gt;
&lt;h3&gt;스케줄러 제공자 만들기&lt;/h3&gt;
&lt;p&gt;이 문제를 해결하기 위한 첫 번째 방법은 스케줄러를 Presenter 외부에서 전달받도록 코드를 수정하는 것입니다. 다음과 같이 스케줄러를 제공할 수 있는 인터페이스를 생성하고 Presenter의 생성자 파라미터를 추가합니다.&lt;/p&gt;
&lt;pre&gt;&lt;strong&gt;interface BaseSchedulerProvider {&lt;br&gt;    fun computation(): Scheduler&lt;br&gt;    fun io(): Scheduler&lt;br&gt;    fun ui(): Scheduler&lt;br&gt;}&lt;/strong&gt;&lt;br&gt;&lt;br&gt;class XxxPresenter(&lt;strong&gt;val&lt;/strong&gt; &lt;strong&gt;schedulerProvider:&lt;/strong&gt; &lt;strong&gt;BaseSchedulerProvider&lt;/strong&gt;) {&lt;br&gt;    override fun load(query: String, page: Int) {&lt;br&gt;        interactor.load(query, page)&lt;br&gt;            .subscribeOn(&lt;strong&gt;schedulerProvider.io()&lt;/strong&gt;)&lt;br&gt;            .observeOn(&lt;strong&gt;schedulerProvider.ui()&lt;/strong&gt;)&lt;br&gt;            .subscribe {&lt;br&gt;                view.render(it)&lt;br&gt;            }&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;
&lt;p&gt;그런 후 유닛 테스트에 사용할 스케줄러 제공 클래스를 다음과 같이 Schedulers.trampoline()을 반환하도록 인터페이스를 구현합니다.&lt;/p&gt;
&lt;pre&gt;class trampolineSchedulerProvider : BaseSchedulerProvider {&lt;br&gt;    override fun io(): Scheduler {&lt;br&gt;        return &lt;strong&gt;Schedulers.trampoline()&lt;/strong&gt;&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    override fun ui(): Scheduler {&lt;br&gt;        return &lt;strong&gt;Schedulers.trampoline()&lt;/strong&gt;&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;
&lt;p&gt;Schedulers.trampoline()는 새로운 스레드를 생성하지 않고, 현재 스레드에서 이전 작업이 완료될 때까지 대기했다가 다음 작업을 순차적으로 실행합니다. 따라서 유닛 테스트 코드에서 trampolineSchedulerProvider를 사용해 스케줄러를 제공하면 비동기 코드 테스트를 위한 CounteDownLatch가 더 이상 필요하지 않습니다. 단일 스레드에서 동작하는 코드를 테스트 하는 것처럼 테스트 코드를 쉽게 작성할 수 있습니다.&lt;/p&gt;
&lt;h3&gt;RxJavaPlugins / RxAndroidPlugins 사용하기&lt;/h3&gt;
&lt;p&gt;느슨하게 Presenter를 구현하고 있거나 첫 번째 방법으로 레거시 코드를 수정하는 것이 부담스럽다면 RxJavaPlugins를 사용하는 대안이 있습니다. RxJavaPlugins는 런타임에 RxJava의 내부 핸들러를 덮어쓸 수 있는 함수들을 제공하는데, 이 중 다음 함수를 사용하면 스케줄러를 상황에 따라 제어할 수 있습니다. 설명을 위해 두 함수만 소개했지만 스케줄러 별로 핸들러를 설정할 수 있는 함수들이 존재합니다.&lt;/p&gt;
&lt;pre&gt;RxJavaPlugins.setIoSchedulerHandler()&lt;br&gt;RxAndroidPlugins.setInitMainThreadSchedulerHandler()&lt;/pre&gt;
&lt;p&gt;위 함수를 사용한 테스트 코드는 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;@Before&lt;br&gt;fun setup() {&lt;br&gt;&lt;strong&gt;    RxJavaPlugins.setIoSchedulerHandler {&lt;br&gt;        Schedulers.trampoline() &lt;br&gt;    }&lt;br&gt;    RxAndroidPlugins.setInitMainThreadSchedulerHandler { &lt;br&gt;        Schedulers.trampoline() &lt;br&gt;    }&lt;/strong&gt;&lt;br&gt;}&lt;br&gt;&lt;br&gt;@After&lt;br&gt;fun teardown() {&lt;br&gt;    RxJavaPlugins.reset()&lt;br&gt;    RxAndroidPlugins.reset()&lt;br&gt;}&lt;/pre&gt;
&lt;pre&gt;@Test&lt;br&gt;fun load() {&lt;br&gt;    …&lt;br&gt;}&lt;/pre&gt;
&lt;p&gt;테스트 함수가 수행되기 전 setup()이 호출되면서 Schedulers.io()의 내부 핸들러를 Schedulers.trampoline()을 호출하도록 수정했기 때문에 기존 Presenter 코드 수정 없이도 하나의 스레드에서 순차적으로 코드를 실행할 수 있습니다.&lt;/p&gt;
&lt;p&gt;덤으로 테스트 클래스 내에서 테스트 함수들이 초기화 코드를 공유하는 경우 대개 setup(), teardown()을 정적 함수로 만들고 @BeforeClass, @AfterClass 어노테이션을 사용합니다. 하지만 코틀린에서는 클래스 내의 정적 함수를 지원하지 않기 때문에 다음과 같이 컴패니언 오브젝트와 @JvmStatic 어노테이션을 사용해 컴파일 시 setup(), teardown()을 정적 함수로 생성하도록 해야 합니다.&lt;/p&gt;
&lt;pre&gt;class XxxPresenterTest {&lt;br&gt;    &lt;strong&gt;companion object&lt;/strong&gt; {&lt;br&gt;        &lt;strong&gt;@JvmStatic&lt;/strong&gt;&lt;br&gt;        &lt;strong&gt;@BeforeClass&lt;/strong&gt;&lt;br&gt;        fun setup() {&lt;br&gt;            RxJavaPlugins.setIoSchedulerHandler {&lt;br&gt;                Schedulers.trampoline() &lt;br&gt;            }&lt;br&gt;             RxAndroidPlugins.setInitMainThreadSchedulerHandler {&lt;br&gt;                Schedulers.trampoline() }&lt;br&gt;            }&lt;br&gt;&lt;br&gt;        &lt;strong&gt;@JvmStatic&lt;/strong&gt;&lt;br&gt;        &lt;strong&gt;@AfterClass&lt;/strong&gt;&lt;br&gt;        fun teardown() {&lt;br&gt;            RxJavaPlugins.reset()&lt;br&gt;            RxAndroidPlugins.reset()&lt;br&gt;        }&lt;br&gt;    }&lt;br&gt;&lt;br&gt;    @Test&lt;br&gt;    fun load() {&lt;br&gt;        …&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;
&lt;h3&gt;TestRule 사용하기&lt;/h3&gt;
&lt;p&gt;두 번째 방법에서 RxJava 스케줄러를 덮어쓰기 위해 테스트 파일마다 setup(), teardown()을 작성하는 것이 귀찮게 느껴진다면 TestRule 클래스 구현을 고려해 볼 수 있습니다. @Rule 어노테이션과 함께 사용하면 테스트 메서드가 호출되기 전과 후에 추가적인 작업을 할 수 있고, 테스트 클래스 간 재사용성을 높일 수 있습니다. 다음과 같이 TestRule을 상속받아 base.evalute() 함수 앞뒤로 RxJava의 스케줄러 코드를 추가합니다.&lt;/p&gt;
&lt;pre&gt;class SchedulersRule : TestRule {&lt;br&gt;    override fun apply(base: Statement, description: Description): Statement {&lt;br&gt;        return object : Statement() {&lt;br&gt;            @Throws(Throwable::class)&lt;br&gt;            override fun evaluate() {&lt;br&gt;&lt;strong&gt;                RxJavaPlugins.setIoSchedulerHandler {&lt;br&gt;                    Schedulers.trampoline()&lt;br&gt;                }&lt;br&gt;                RxAndroidPlugins.setInitMainThreadSchedulerHandler {&lt;br&gt;                    Schedulers.trampoline()&lt;br&gt;                }&lt;br&gt;                &lt;/strong&gt;try {&lt;br&gt;                    base.evaluate()&lt;br&gt;                } finally {&lt;br&gt;&lt;strong&gt;                    RxJavaPlugins.reset()&lt;br&gt;                    RxAndroidPlugins.reset()&lt;/strong&gt;&lt;br&gt;                }&lt;br&gt;            }&lt;br&gt;        }&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;
&lt;p&gt;테스트 코드에서는 SchedulersRule 객체를 테스트 객체의 멤버로 생성하는 것만으로도 스케줄러를 교체할 수 있습니다.&lt;/p&gt;
&lt;pre&gt;class PresenterTest {&lt;br&gt;    &lt;strong&gt;@Rule&lt;/strong&gt;&lt;br&gt;    &lt;strong&gt;@JvmField &lt;/strong&gt;&lt;br&gt;    &lt;strong&gt;val testSchedulerRule = SchedulersRule()&lt;/strong&gt;&lt;br&gt;&lt;br&gt;    @Test&lt;br&gt;    fun load() {&lt;br&gt;        …&lt;br&gt;    }&lt;br&gt;}&lt;/pre&gt;
&lt;h3&gt;마치며&lt;/h3&gt;
&lt;p&gt;여러 스레드에서 동작하는 함수를 테스트 할 때는 하나의 스레드에서 동작하는 함수보다 신경써야 할 부분이 많습니다. CountDownLatch를 사용하거나 혹은 이를 기반으로 동작하는 라이브러리와 함수들 — 예를 들면 Awaitility, TestObservable.awaitDone()—은 비동기 작업이 끝날 때까지 대기할 타임아웃을 지정하는 게 일반적입니다. 실패 케이스에서는 불필요하게 해당 시간까지 대기를 해야 하는 부분이 테스트의 반응성을 떨어트리는 요소로 작용하며 스레드에서 긴 작업을 수행하는 경우에는 적절한 대기 시간 값을 지정해야 하는 부분도 놓쳐서는 안됩니다. 그럼에도 동시성 자체에 대한 테스트가 필요한 경우도 있습니다. 이 방법은 그렇지 않은 경우에 대해서 적용해 볼만한 테스트 방법입니다. BaseSchedulerProvide 인터페이스를 이용해 스케줄러를 제공하는 방법은 &lt;a href=&quot;https://github.com/googlesamples/android-architecture/blob/todo-mvp-rxjava/todoapp/app/src/main/java/com/example/android/architecture/blueprints/todoapp/util/schedulers/ImmediateSchedulerProvider.java&quot;&gt;android-architecture&lt;/a&gt;에서 코드를 찾아볼 수 있으며 RxJavaPlugins에 대한 내용은 &lt;a href=&quot;https://medium.com/@dbottillo/how-to-unit-test-your-rxjava-code-in-kotlin-d239364687c9&quot;&gt;이곳 포스트를&lt;/a&gt; 참고했습니다.&lt;/p&gt;
&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=e8d17b674bdd&quot; width=&quot;1&quot; height=&quot;1&quot;&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>RxJava 유닛 테스트를 좀 더 쉽게할 수 있는 틈새 찾기</title>
    <updated>2018-03-07T19:10:48+09:00</updated>
    <dc:date>2018-03-07T19:10:48+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>Lava</name>
    </author>
    <id>http://astrod.github.io/2018/03/13/13.html</id>
    <link href="http://astrod.github.io/2018/03/13/13.html"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#%ED%85%8C%EC%8A%A4%ED%8A%B8&quot; id=&quot;markdown-toc-테스트&quot;&gt;테스트&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
&lt;a href=&quot;#userdaotest-%EB%8B%A4%EC%8B%9C-%EB%B3%B4%EA%B8%B0&quot; id=&quot;markdown-toc-userdaotest-다시-보기&quot;&gt;UserDaoTest 다시 보기&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9D%98-%EC%9C%A0%EC%9A%A9%EC%84%B1&quot; id=&quot;markdown-toc-테스트의-유용성&quot;&gt;테스트의 유용성&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#userdaotest%EC%9D%98-%ED%8A%B9%EC%A7%95&quot; id=&quot;markdown-toc-userdaotest의-특징&quot;&gt;UserDaoTest의 특징&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#userdaotest%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90&quot; id=&quot;markdown-toc-userdaotest의-문제점&quot;&gt;UserDaoTest의 문제점&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
&lt;a href=&quot;#userdaotest-%EA%B0%9C%EC%84%A0&quot; id=&quot;markdown-toc-userdaotest-개선&quot;&gt;UserDaoTest 개선&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B2%80%EC%A6%9D%EC%9D%98-%EC%9E%90%EB%8F%99%ED%99%94&quot; id=&quot;markdown-toc-테스트-검증의-자동화&quot;&gt;테스트 검증의 자동화&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;
&lt;a href=&quot;#%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9D%98-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%EC%88%98%ED%96%89%EA%B3%BC-%EA%B2%B0%EA%B3%BC-%EA%B4%80%EB%A6%AC&quot; id=&quot;markdown-toc-테스트의-효율적인-수행과-결과-관리&quot;&gt;테스트의 효율적인 수행과 결과 관리&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#junit-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A1%9C-%EC%A0%84%ED%99%98&quot; id=&quot;markdown-toc-junit-테스트로-전환&quot;&gt;Junit 테스트로 전환&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
&lt;a href=&quot;#%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A5%BC-%EC%9C%84%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8C%85-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC-junit&quot; id=&quot;markdown-toc-개발자를-위한-테스팅-프레임워크-junit&quot;&gt;개발자를 위한 테스팅 프레임워크 JUnit&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;
&lt;a href=&quot;#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B2%B0%EA%B3%BC%EC%9D%98-%EC%9D%BC%EA%B4%80%EC%84%B1&quot; id=&quot;markdown-toc-테스트-결과의-일관성&quot;&gt;테스트 결과의 일관성&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#deleteall%EA%B3%BC-getcount-%EC%B6%94%EA%B0%80&quot; id=&quot;markdown-toc-deleteall과-getcount-추가&quot;&gt;deleteAll()과 getCount() 추가&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#deleteall%EA%B3%BC-getcount%EC%9D%98-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot; id=&quot;markdown-toc-deleteall과-getcount의-테스트&quot;&gt;deleteAll()과 getCount()의 테스트&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%ED%8F%AC%EA%B4%84%EC%A0%81%EC%9D%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot; id=&quot;markdown-toc-포괄적인-테스트&quot;&gt;포괄적인 테스트&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#addandget-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%B3%B4%EC%99%84&quot; id=&quot;markdown-toc-addandget-테스트-보완&quot;&gt;addAndGet() 테스트 보완&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#get-%EC%98%88%EC%99%B8%EC%A1%B0%EA%B1%B4%EC%97%90-%EB%8C%80%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot; id=&quot;markdown-toc-get-예외조건에-대한-테스트&quot;&gt;get() 예외조건에 대한 테스트&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%ED%8F%AC%EA%B4%84%EC%A0%81%EC%9D%B8-%ED%85%8C%EC%8A%A4%ED%8A%B8-1&quot; id=&quot;markdown-toc-포괄적인-테스트-1&quot;&gt;포괄적인 테스트&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
&lt;a href=&quot;#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EA%B0%9C%EC%84%A0&quot; id=&quot;markdown-toc-테스트-코드-개선&quot;&gt;테스트 코드 개선&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#%ED%94%BD%EC%8A%A4%EC%B3%90&quot; id=&quot;markdown-toc-픽스쳐&quot;&gt;픽스쳐&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
&lt;a href=&quot;#%EC%8A%A4%ED%94%84%EB%A7%81-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%A0%81%EC%9A%A9&quot; id=&quot;markdown-toc-스프링-테스트-적용&quot;&gt;스프링 테스트 적용&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;
&lt;a href=&quot;#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EA%B4%80%EB%A6%AC&quot; id=&quot;markdown-toc-테스트를-위한-애플리케이션-컨텍스트-관리&quot;&gt;테스트를 위한 애플리케이션 컨텍스트 관리&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#%EC%8A%A4%ED%94%84%EB%A7%81-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC-%EC%A0%81%EC%9A%A9&quot; id=&quot;markdown-toc-스프링-테스트-컨텍스트-프레임워크-적용&quot;&gt;스프링 테스트 컨텍스트 프레임워크 적용&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C%EC%97%90-%EC%9D%98%ED%95%9C-di&quot; id=&quot;markdown-toc-테스트-코드에-의한-di&quot;&gt;테스트 코드에 의한 DI&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%EC%9C%84%ED%95%9C-%EB%B3%84%EB%8F%84%EC%9D%98-di-%EC%84%A4%EC%A0%95&quot; id=&quot;markdown-toc-테스트를-위한-별도의-di-설정&quot;&gt;테스트를 위한 별도의 DI 설정&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#%ED%95%99%EC%8A%B5-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%EC%8A%A4%ED%94%84%EB%A7%81&quot; id=&quot;markdown-toc-학습-테스트로-배우는-스프링&quot;&gt;학습 테스트로 배우는 스프링&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;테스트&quot;&gt;테스트&lt;/h1&gt;
&lt;p&gt;스프링에서 가장 중요한 가치는 테스트라고 이야기하고 있다 스프링은 복잡한 엔터프라이즈 애플리케이션을 효과적으로 개발하기 위한 기술인데, 이런 복잡한 애플리케이션을 개발하는 데 필요한 기술 중 하나는 객체지향 기술이다. 그리고 나머지 하나의 기술을 테스트라고 이야기하고 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;스프링으로 개발을 하면서 테스트를 만들지 않는다면 이는 스프링이 지닌 가치의 절반을 포기하는 샘이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2장에서는 테스트란 무엇이며, 그 가치와 장점, 활용 전략, 스프링과의 관계를 살펴본다. 그리고 JUnit을 소개하고 이를 활용한 학습 전략 또한 살펴볼 것이다.&lt;/p&gt;

&lt;h1 id=&quot;userdaotest-다시-보기&quot;&gt;UserDaoTest 다시 보기&lt;/h1&gt;

&lt;h2 id=&quot;테스트의-유용성&quot;&gt;테스트의 유용성&lt;/h2&gt;
&lt;p&gt;User 정보를 가져오는 UserDao가 있다고 가정하자. 이 코드는 main() 함수를 이용하여 userDao의 get() 메서드르 호출하고 결과를 화면에 출력하여 개발자가 눈으로 확인할 수 있게 해 준다.
만약에 이 코드를 책임에 따라 이리저리 분리하고 인터페이스를 도입하고, 오브젝트 팩토리를 통해 생성하게 하는 등의 리펙토링을 거쳤을 때 그것이 처음과 동일한 기능을 한다고 누가 보장할 수 있겠는가?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;테스트란 결국 내가 예상하고 의도했던 대로 코드가 정확히 동작하는지를 확인해서, 만든 코드를 확신할 수 있게 해주는 작업이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;userdaotest의-특징&quot;&gt;UserDaoTest의 특징&lt;/h2&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenericXmlApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;applicationContext.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Userdao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userDao&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;백기선&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;married&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; 등록 성공&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; 조회 성공&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 테스트는 다음과 같은 특징이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;가장 손쉽게 시행 가능한 main() 메서드를 이용한다.&lt;/li&gt;
  &lt;li&gt;테스트의 대상인 UserDao의 오브젝트를 가져와 메서드를 호출한다.&lt;/li&gt;
  &lt;li&gt;테스트에 사용할 입력 값을 코드에서 직접 만들어 넣어준다.&lt;/li&gt;
  &lt;li&gt;테스트의 결과를 콘솔에 출력해준다.&lt;/li&gt;
  &lt;li&gt;각 단계의 작업이 에러 없이 끝나면, 콘솔에 성공 메시지로 출력해준다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;특징은 main() 메서드를 이용하여 쉽게 테스트를 수행하였다는 점과 테스트 대상인 UserDao를 직접 호출하였다는 것이다.&lt;/p&gt;

&lt;p&gt;웹 프로그램에서 사용하는 DAO를 테스트하는 방법은 보통 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;서비스 계층, MVC 프레젠테이션 계층까지 포함한 모든 입출력 기능을 대충이라도 코드로 다 만든다.&lt;/li&gt;
  &lt;li&gt;테스트용 웹 어플리케이션을 서버에 배치한 후 웹 화면을 띄워 폼을 열고, 값을 입력한 후 버튼을 누른다.&lt;/li&gt;
  &lt;li&gt;결과를 확인한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이는 흔히 사용하는 방법이지만, DAO를 테스트하는데는 단점이 너무 많다. 단점은 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;모든 레이어의 기능을 다 구현한 뒤에야 테스트가 가능하다.&lt;/li&gt;
  &lt;li&gt;다른 연결된 부분에서 문제가 발생하였을 확률이 있다.
    &lt;ul&gt;
      &lt;li&gt;DAO는 정상적으로 동작하지만, 웹에서 데이터를 입력받는 부분에서 문제가 생겼다.&lt;/li&gt;
      &lt;li&gt;SQL 문법이 틀렸다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이를 피하기 위해, 테스트는 테스트하고자 하는 대상이 명확하다면 그 대상에만 집중하여 테스트하는 것이 바람직하다. 테스트의 관심이 다르다면 테스트할 대상을 분리하고 집중하여 접근해야 한다.
이렇게 작은 단위의 코드에 대해 테스트를 수행한 것을 단위 테스트(unit test)라고 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;일반적으로 단위는 작을수록 좋다.&lt;/li&gt;
  &lt;li&gt;통제할 수 없는 외부의 리소스에 의존하지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;또한 UserDaoTest는 main() 을 실행시키는 방법으로 테스트를 시행한다. 이는 좋은 방법이지만, 테스트 코드가 애플리케이션의 클래스 안에 있는 것보단 별도로 테스트용 코드를 만들어서 테스트 코드를 넣는게 좋다.
이렇게 테스트를 따로 클래스로 분리한 이후에는 자동으로 여러 번 테스트를 반복할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;userdaotest의-문제점&quot;&gt;UserDaoTest의 문제점&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;수동 확인 작업의 번거로움
    &lt;ul&gt;
      &lt;li&gt;테스트 수행 과정과 입력 데이터 세팅은 모두 자동으로 진행하지만, 여전히 사람의 눈으로 확인하는 과정이 필요하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;실행 작업의 번거로움
main() 함수가 수백개가 되고 main 메서드도 많이 만들어지면 실행후 결과를 종합하여 눈으로 확인하는 과정이 어려워진다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;userdaotest-개선&quot;&gt;UserDaoTest 개선&lt;/h1&gt;

&lt;h2 id=&quot;테스트-검증의-자동화&quot;&gt;테스트 검증의 자동화&lt;/h2&gt;
&lt;p&gt;테스트 결과의 검증부분을 자동화할 수 있다. 먼저, 테스트의 결과에 대해 생각해보면 성공 / 실패 두 가지가 있다. 실패는 또한 테스트가 진행되는 동안에 에러가 발생하는 것과 결과가 예상했던 값과 다른 경우가 있다.
이를 고려하여 테스트 검증 부분을 추가하자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;테스트 실패 (name)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;테스트 실패 (password)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;조회 테스트 성공&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;테스트의-효율적인-수행과-결과-관리&quot;&gt;테스트의 효율적인 수행과 결과 관리&lt;/h2&gt;
&lt;p&gt;이제 main() 메서드로 만든 테스트는 필요한 기능은 모두 갖추었다. 그러나 좀 더 편리하게 테스트를 수행하고 결과를 확인하려면 테스트 프레임워크를 사용하는 것이 좋다. 자바에서는 JUnit 이라는 테스트 지원 도구를 활용한다.&lt;/p&gt;

&lt;h3 id=&quot;junit-테스트로-전환&quot;&gt;Junit 테스트로 전환&lt;/h3&gt;
&lt;p&gt;JUnit은 프레임워크다. 프레임워크는 개발자가 만든 클래스에 대한 제어 권한을 넘겨받아 주도적으로 애플리케이션의 흐름을 제어한다. 따라서 테스트로 전환하려면 먼저 main 메서드의 테스트 코드를 일반 메서드로 옮겨야 한다.
새로 만든 테스트 코드는 두 가지를 따라야 한다. 하나는 public 으로 선언되어야 하고 하나는 @Test 애노테이션이 붙어야 한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDaoTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addAndGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassPathXmlApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;applicationContext.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userDao&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// implementation&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;원래 검증 코드는 다음과 같았다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;테스트 실패 (name)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;테스트 실패 (password)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;조회 테스트 성공&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;JUnit 에서 사용하는 도구로 다음과 같이 변경할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;개발자를-위한-테스팅-프레임워크-junit&quot;&gt;개발자를 위한 테스팅 프레임워크 JUnit&lt;/h1&gt;
&lt;p&gt;JUnit은 자바의 표준 테스팅 프레임워크라고 이야기 할 만큼 폭넓게 사용되고 있다. 스프링의 테스팅 모듈도 JUnit을 활용하고 있다. JUnit은 단순하기 때문에 빠르게 작성할 수 있고 IDE 단에서 테스트를 손쉽게 실행할 수 있는 여러 부기 기능도 제공한다.&lt;/p&gt;

&lt;p&gt;또한 빌드 툴(Maven, ANT) 에서도 플러그인이나 테스크를 이용하여 손쉽게 JUnit 테스트를 실행할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;테스트-결과의-일관성&quot;&gt;테스트 결과의 일관성&lt;/h2&gt;
&lt;p&gt;지금까지 JUnit을 활용하여 깔끔한 테스트 코드를 만들었고 편리하게 실행할 수 있는 방법도 확인하였다. 그러나 다음과 같은 문제가 아직 남아있다. 위의 테스트는 DB내에 어떤 값이 존재하냐에 따라 결과가 다르게 나올 수 있다는 점이다.&lt;/p&gt;

&lt;p&gt;앞에서 단위 테스트의 조건을 살펴보았다. 단위 테스트는 다음과 같은 조건을 만족하여야 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;일반적으로 단위는 작을수록 좋다.&lt;/li&gt;
  &lt;li&gt;통제할 수 없는 외부의 리소스에 의존하지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DB라는 리소스에 의존하여 테스트 결과가 다르게 나오면 안 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;코드의 변경사항이 없다면 테스트는 항상 동일한 결과를 내야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;UserDaoTest는 이전 테스트 때문에 DB에 등록된 중복 데이터가 있다는 문제가 있다. 가장 좋은 방법은 addAndGet() 테스트를 마치고 나면 사용자 정보를 삭제하여 테스트를 수행하기 이전 상태로 만들어주는 것이다.&lt;/p&gt;

&lt;h3 id=&quot;deleteall과-getcount-추가&quot;&gt;deleteAll()과 getCount() 추가&lt;/h3&gt;

&lt;p&gt;위의 조건을 만족하기 위해 처음으로 해야 할 일은 deleteAll() 메서드를 UserDAO에 추가하는 것이다. deleteAll() 은 USER 테이블의 모든 레코드를 삭제하는 기능이 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deleteAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;PreparedStatement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prepareStatement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;delete from users&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;executeUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음은 getCount() 메서드를 추가한다. 이 메서드는 USER 테이블의 레코드 개수를 돌려준다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLEception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;PreparedStatement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prepareStatement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;select count(*) from users&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;ResultSet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;executeQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;rs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;deleteall과-getcount의-테스트&quot;&gt;deleteAll()과 getCount()의 테스트&lt;/h3&gt;
&lt;p&gt;새로운 기능을 추가하였으니 테스트를 만들어야 한다. 그러나 두 기능은 테스트를 만들기 애매하다. 굳이 테스트를 하자면 USER 테이블에 데이터를 넣고 삭제하는 테스트를 만들어야 하는데, 이는 개발자가 직접 수행해야 하는 테스트라서 번거롭다.&lt;/p&gt;

&lt;p&gt;그래서, 새로운 테스트를 만들기 보다는 기존에 만든 addAndGet() 테스트를 확장하는 방법을 사용하는 편이 더 낫다.
addAndGet() 테스트의 불편한 점은 실행 전에 수동으로 USER 테이블의 모든 데이터를 삭제해야 한다는 점이니, 이 메소드를 테스트 시작 전에 호출하여 데이터를 모두 삭제해주면 된다.&lt;/p&gt;

&lt;p&gt;그러나 deleteAll() 메서드 자체도 검증되지 않았다는 문제점이 있다. 그래서 getCount()를 함께 적용한다. deleteAll()이 정상적으로 적용되었다면, 메서드 호출 후에 getCount()를 호출하면 0을 반환하여야 한다.
그러면 getCount() 는 어떻게 올바르게 동작한다고 증명할 것인가? 이는 getCount() 만의 테스트 코드를 작성하면 된다.&lt;/p&gt;

&lt;p&gt;정리하면 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;addAndGet()
    &lt;ul&gt;
      &lt;li&gt;deleteAll()&lt;/li&gt;
      &lt;li&gt;getCount()&lt;/li&gt;
      &lt;li&gt;잔여 테스트 진행&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;getCount()
    &lt;ul&gt;
      &lt;li&gt;add 후에 1이 나오는지 확인&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;테스트 코드는 다음과 같다&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addAndGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SQLException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deleteAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 전체 삭제&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gyumee&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;박성철&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;springno1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 테스트를 작성하면, 어떤 상황에서 반복적으로 실행된다고 하더라도 동일한 결과가 나온다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;단위 테스트는 항상 일관성 있는 결과가 보장돼야 한다는 점을 잊어선 안 된다. DB에 남아 있는 데이터와 같은 외부 환경에 영향을 받지 말아야 하는 것은 물론이고, 테스트를 실행하는 순서를 바꿔도 동일한 결과가 보장되도록 만들어야 한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;포괄적인-테스트&quot;&gt;포괄적인 테스트&lt;/h3&gt;

&lt;p&gt;위에서는 getCount()에 대해 테스트를 작성하지 않았으니, getCount() 에 대해 좀 더 꼼꼼하게 테스트를 만들어 보자. 시나리오는 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;USER 테이블의 데이터를 모두 지운다.&lt;/li&gt;
  &lt;li&gt;getCount() 가 0 임을 확인한다.&lt;/li&gt;
  &lt;li&gt;user를 insert 한다&lt;/li&gt;
  &lt;li&gt;getCount() 가 증가함을 확인한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deleteAl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;주의해야 할 점은 JUnit이 테스트의 실행 순서를 보장해주지 않는다는 것이다. 테스트의 결과가 테스트 실행 순서에 영향을 받는다면 테스트를 잘못 만든 것이다.&lt;/p&gt;

&lt;h3 id=&quot;addandget-테스트-보완&quot;&gt;addAndGet() 테스트 보완&lt;/h3&gt;
&lt;p&gt;현재 테스트는 add() 후에 레코드 개수도 확인하고, get으로 읽어와서 값도 모두 비교하고 있다. 그러나 id를 조건으로 하여 사용자를 검색하는 테스트는 충분히 검증된 거 같지 않다.
그래서 get() 메서드에 대한 테스트 기능을 보완하려고 한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;User를 하나 더 추가하여 두 개의 User를 add() 하고, 각 User의 id를 파라미터로 전달하여 get을 실행시킨다.&lt;/li&gt;
  &lt;li&gt;주어진 id 에 해당하는 정확한 User 정보를 가져오는지 확인한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addAndGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userDao&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gyumee&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;백성철&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;springno1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;leegw700&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;이길원&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;springno2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deleteAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userget1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userget1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userget1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userget2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userget2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userget2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 테스트를 추가하면 get() 메서드의 동작을 검증할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;get-예외조건에-대한-테스트&quot;&gt;get() 예외조건에 대한 테스트&lt;/h3&gt;
&lt;p&gt;get 메서드에 전달한 id 에 해당하는 사용자 정보가 없는 경우에는 어떻게 될까? 이 경우는 고려해보지 않았다. 두 가지 방법이 있을 것이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;null과 같은 특별한 값을 리턴한다.&lt;/li&gt;
  &lt;li&gt;id에 해당하는 정보를 찾을 수 없다고 예외를 던진다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;여기서는 후자의 방법을 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EmptyResultDataAccessException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUserFailure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userDao&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deleteAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; 

    &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;unknown_id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 이 메서드 실행 중에 예외가 발생한다.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;JUnit은 다음과 같은 방법으로 예외 발생 테스트를 할 수 있다. @Test에 ecpected를 지정해 두면 정상적으로 테스트를 종료한 경우 테스트가 실패하고, 지정한 예외가 던져지면 테스트가 성공한다.&lt;/p&gt;

&lt;h3 id=&quot;포괄적인-테스트-1&quot;&gt;포괄적인 테스트&lt;/h3&gt;
&lt;p&gt;실제로 테스트를 만들다 보면, 개발자는 다음과 같은 실수를 많이 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;개발자가 테스트를 직접 만들 때 자주 하는 실수가 하나 있다. 바로 성공하는 테스트만 골라서 만드는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;스프링의 창시자인 로드 존슨은 “항상 실패하는 테스트를 먼저 만들라”는 조언을 했다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;테스트를 작성할 때는 부정적인 케이스를 먼저 만드는 습관을 들이는 게 좋다.&lt;/p&gt;

&lt;h2 id=&quot;테스트-코드-개선&quot;&gt;테스트 코드 개선&lt;/h2&gt;
&lt;p&gt;지금까지 만든 테스트 코드를 리펙토링 해 보자. 테스트 코드 또한 필요하다면 내부 구조와 설계를 개선하여 좀 더 깔끔하고 이해하기 쉬우며 변경이 용이한 코드로 만들 필요가 있다.&lt;/p&gt;

&lt;p&gt;다음의 코드는 테스트에서 기계적으로 반복된다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassPathXmlApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;applicationContext.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userDao&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;중복된 코드는 별도의 메소드로 extract 하면 좋다. JUnit에서는 이런 코드를 추출하기 위해 @Before라는 애노테이션을 제공한다.
JUnit은 다음과 같은 프로세스로 테스트 케이스를 수행한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;테스트 클래스에서 @Test가 붙은 public이고 void 형이며 파라미터가 없는 테스트 메소드를 찾는다.&lt;/li&gt;
  &lt;li&gt;테스트 클래스의 오브젝트를 하나 만든다.&lt;/li&gt;
  &lt;li&gt;@Before가 붙은 메소드가 있다면 실행시킨다.&lt;/li&gt;
  &lt;li&gt;@Test가 붙은 메소드를 하나 호출하고 테스트 결과를 저장해둔다.&lt;/li&gt;
  &lt;li&gt;@After가 붙은 메소드가 있다면 실행한다.&lt;/li&gt;
  &lt;li&gt;나머지 테스트 메소드에 대해 2~5번을 반복한다.&lt;/li&gt;
  &lt;li&gt;모든 테스트의 결과를 종합하여 돌려준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;그렇기 때문에, @Before 어노테이션에 위의 코드를 넣고 context와 dao를 인스턴스 변수로 분리하면 모든 테스트 메서드에서 동일하게 활용할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDaoTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenericXmlApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;applicationContext.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userDao&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;또 한가지 기억해야 할 사항은, 테스트 메소드를 실행할 때마다 테스트 클래스와 오브젝트를 새로 만든다는 점이다. 각각 테스트가 서로 영향을 미치지 않고 독립적으로 동작하게 하기 위함이다.&lt;/p&gt;

&lt;h3 id=&quot;픽스쳐&quot;&gt;픽스쳐&lt;/h3&gt;
&lt;p&gt;테스트를 수행하는 데 필요한 정보나 오브젝트를 픽스쳐라고 한다. UserDaoTest에서는 dao가 대표적인 픽스쳐일 것이고, add 메소드에 전달하는 User 객체도 픽스쳐라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;이 부분도 중복이 있으므로 @Before로 추출해 보자.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDaoTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;user1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;gyumee&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;박성철&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;springno1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;user2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;leegw700&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;이길원&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;springno2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;user2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bumjin&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;박범진&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;springno3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;스프링-테스트-적용&quot;&gt;스프링 테스트 적용&lt;/h1&gt;
&lt;p&gt;어느 정도 테스트 케이스를 정리하였지만, 한가지 찝찝한 점이 있다. @Before 메소드가 테스트 메소드의 횟수만큼 실행되기 때문에, 애플리케이션 컨텍스트가 총 세번 만들어진다.
애플리케이션 컨텍스트가 복잡해지고 커지게 되면 다음과 같은 문제가 발생할 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;애플리케이션 컨텍스트를 생성할 때 내부의 모든 빈을 초기화하기 때문에 성능이슈가 발생할 수 있다.&lt;/li&gt;
  &lt;li&gt;어떤 빈은 독자적으로 많은 리소스를 할당하거나 독립적 스레드를 사용하기 때문에, 계속 새로운 애플리케이션 컨텍스트 생성시 이슈가 발생할 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위의 문제를 해결하기 위해 테스트 컨텍스트를 생성할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;테스트를-위한-애플리케이션-컨텍스트-관리&quot;&gt;테스트를 위한 애플리케이션 컨텍스트 관리&lt;/h2&gt;

&lt;h3 id=&quot;스프링-테스트-컨텍스트-프레임워크-적용&quot;&gt;스프링 테스트 컨텍스트 프레임워크 적용&lt;/h3&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SrpingJUnit4ClassRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 스프링의 테스트 컨텍스트 프레임워크 확장기능&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ContextConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/applicationContext.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 테스트 컨텍스트가 자동으로 만들어줄 애플리케이션 컨텍스트 위치 지정&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDaoTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userDao&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;@RunWith는 JUnit 프레임워크 테스트 실행 방법을 확장할 때 사용하는 애노테이션이다. 위의 코드에서는 SpringJUnit4ClassRunner라는 JUnit 용 테스트 컨텍스트 프레임워크 확장 클래스를 지정하여, JUnit이 테스트를 진행할 때 테스트가 사용할 애플리케이션 컨텍스트를 생성 / 관리하는 작업을 해 준다.
@ContextConfiguration은 자동으로 만들어 줄 애플리케이션 컨텍스트 설정 파일 위치를 지정해주는 애노테이션이다.&lt;/p&gt;

&lt;p&gt;위와 같이 애플리케이션 컨텍스트를 생성하면, 같은 애노테이션이 붙은 테스트 클래스들 사이에서도 애플리케이션 컨텍스트를 공유할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;테스트-코드에-의한-di&quot;&gt;테스트 코드에 의한 DI&lt;/h3&gt;
&lt;p&gt;애플리케이션 사용할 applicationContext.xml 에 정의된 DataSource 빈이 리얼 서비스를 바라보고 있다고 가정하자. 테스트할 때 이 DataSource 를 바라보고 데이터를 삭제하면 리얼 데이터가 모두 날아갈 것이다.
이런 상황을 막기 위해, 애플리케이션 컨텍스트에서 가져온 컨텍스트의 빈을 변경하는 작업을 해 보자&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@DirtiesContext&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 테스트 메소드에서 애플리케이션 컨텍스트 구성, 상태를 변경할 것이다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserDaoText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;UserDao&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;DataSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleConnectionDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jdbc:mysql://localhost/testdb&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;spring&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;book&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 코드에 의한 수동 DI&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 작업할 때는 @DirtiesContext 애노테이션을 꼭 붙여 주어야 하는데, 그렇게 하지 않는다면 변경한 애플리케이션 컨텍스트를 테스트 클래스 전체에서 공유할 수 있기 때문이다.&lt;/p&gt;

&lt;h3 id=&quot;테스트를-위한-별도의-di-설정&quot;&gt;테스트를 위한 별도의 DI 설정&lt;/h3&gt;
&lt;p&gt;아무래도 위의 방식은 직접 애플리케이션 컨텍스트를 변경하기 때문에 단점이 많다. 코드의 양도 증가하고 매번 새롭게 애플리케이션 컨텍스트를 만들어야 하기 때문이다.
위의 방법보다 DataSource를 두 개 등록하는 방법을 활용하려고 한다.&lt;/p&gt;

&lt;p&gt;하나는 서버에서 운영용으로 사용하는 DataSource이고, 하나는 테스트에 적합하게 준비된 DB를 사용하는 DataSource 이다.&lt;/p&gt;

&lt;p&gt;다음 프로세스로 작업을 진행한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;기존의 applicatonContext.xml을 복사하여 test-applicatonContext.xml 을 만든다.&lt;/li&gt;
  &lt;li&gt;다른 빈은 그대로 두고, dataSource 빈의 설정을 테스트용으로 변경해준다.&lt;/li&gt;
  &lt;li&gt;@ContextConfiguration 애노테이션에 있는 locations 엘리먼트의 값을 test-applicationContext.xml로 변경해 준다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;학습-테스트로-배우는-스프링&quot;&gt;학습 테스트로 배우는 스프링&lt;/h2&gt;
&lt;p&gt;때로는 자신이 만들지 않은 프레임워크나 다른 개발팀에서 제공한 라이브러리에 대해서도 테스트를 작성해야 한다. 이런 테스트를 학습 테스트라고 한다.&lt;/p&gt;

&lt;p&gt;학습 테스트의 장점은 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;다양한 조건에 따른 기능을 손쉽게 확인해 볼 수 있다.
    &lt;ul&gt;
      &lt;li&gt;자동화된 테스트 코드를 사용하여, 기능이 어떻게 동작하는지 빠르게 확인할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;학습 테스트 코드를 개발 중에 참고할 수 있다.
    &lt;ul&gt;
      &lt;li&gt;다양한 기능과 조건에 대한 테스트 코드를 개별적으로 만들고 남겨둘 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;프레임워크나 제품을 업그레이드 할 때 호환성 검증을 도와준다.
    &lt;ul&gt;
      &lt;li&gt;주요 기능에 대한 학습 테스트를 충분히 작성해 두었다면, 업그레이드 후에도 해당 프레임워크나 제품이 정상적으로 동작할 것을 보장할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;테스트 작성에 대한 좋은 훈련이 된다.&lt;/li&gt;
  &lt;li&gt;새로운 기술을 공부하는 과정이 즐거워진다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;스프링 학습 테스트를 만들 때 참고할 수 있는 가장 좋은 소스는 스프링 자신에 대한 테스트 코드이다. 스프링은 거의 모든 기능에 대해 방대한 양의 테스트가 만들어져 있다. 스프링 테스트를 잘 살펴보면, 레퍼런스 문서에 미처 설명되지 않았던 중요한 정보도 많이 얻을 수 있고 테스트 작성 방법에 대한 좋은 팁 또한 얻을 수 있다.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>토비의 스프링 - 2장 테스트</title>
    <updated>2018-03-13T09:00:00+09:00</updated>
    <dc:date>2018-03-13T09:00:00+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>Lava</name>
    </author>
    <id>http://astrod.github.io/2018/03/04/4.html</id>
    <link href="http://astrod.github.io/2018/03/04/4.html"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0&quot; id=&quot;markdown-toc-들어가며&quot;&gt;들어가며&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#%ED%95%A8%EC%88%98%ED%98%95-%EC%82%AC%EA%B3%A0functional-thinking&quot; id=&quot;markdown-toc-함수형-사고functional-thinking&quot;&gt;함수형 사고(Functional Thinking)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#%EC%BC%84%ED%8A%B8-%EB%B0%B1%EC%9D%98-%EA%B5%AC%ED%98%84-%ED%8C%A8%ED%84%B4&quot; id=&quot;markdown-toc-켄트-백의-구현-패턴&quot;&gt;켄트 백의 구현 패턴&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#code&quot; id=&quot;markdown-toc-code&quot;&gt;CODE&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;들어가며&quot;&gt;들어가며&lt;/h1&gt;
&lt;p&gt;최근에 본 책인 «함수형 사고», «켄트 백의 구현 패턴», «CODE» 에 대해 간단하게 소감을 남기려고 한다.&lt;/p&gt;

&lt;h1 id=&quot;함수형-사고functional-thinking&quot;&gt;함수형 사고(Functional Thinking)&lt;/h1&gt;
&lt;p&gt;이 책은 회사에서 스터디 부교재로 구매한 책이다. 이번 연휴 때 훑어보았는데, 좋은 인상을 받지는 못했다. 
최근에 프로잭트에 들어가면서 이전에 작업한 개발자들이 쓴 Optional 이나 Stream API를 보면서, 자바 8에 추가된 함수형 문법들을 어떻게 활용할지에 대해 고민이 많았다.&lt;/p&gt;

&lt;p&gt;자바 개발자이다 보니 OOP 기반으로 작업을 하고 지엽적인 부분만 자바 8에서 추가된 문법을 사용하는데, 그 또한 조화롭게 녹아드는 느낌이 아니라서 그에 대한 해법을 제공해주지 않을까 기대했지만, 책의 내용은 그렇지 않았다.&lt;/p&gt;

&lt;p&gt;대부분 이런 내용이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;자바에서는 이렇게 구현되어 있다.&lt;/li&gt;
  &lt;li&gt;이건 비효율적인 구현이고, 클로저 / 스칼라 / 자바 8 API 를 통해 함수형으로 변경할 수 있다.&lt;/li&gt;
  &lt;li&gt;함수형으로 변경하면 여러 면에서 이점이 있음&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;작업 시에 함수형 프로그래밍 문법을 사용하는 것은 찾아보면 알 수 있는 부분인데 이를 실제 코드에 유지보수가 가능하게 녹이는 방법을 알려주었으면 더 좋았을 거 같다. reduce 나 memorization, filter, map 을 어떻게 사용하는지 알려주는 부분에서는 약간의 인사이트를 얻을 수 있었지만, 실제 개발에 녹이기에는 좀 모자란다고 느꼈다.&lt;/p&gt;

&lt;p&gt;다른 언어에서 reduce, map, currying 같은 걸 한 번도 사용해보지 않았다면 간단하게 보기에는 좋은 책인 거 같다. 팀에서 동의한다면, 위의 문법들을 적절하게 도입함으로써 여러 장점을 취할 수도 있을 거 같다.&lt;/p&gt;

&lt;p&gt;책의 뒷면에는&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;객체지향과 함수형 사이에 놓인 늪을 건너는 방법&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이라고 쓰여 있는데, 늪의 깊이가 얕아지지는 않은 느낌이다.&lt;/p&gt;

&lt;h1 id=&quot;켄트-백의-구현-패턴&quot;&gt;켄트 백의 구현 패턴&lt;/h1&gt;
&lt;p&gt;이전에 같은 팀에서 일했던 개발자가 다섯 번 본 책이라고 해서, 마침 가지고 있어서 틈틈이 보았다. 확실히 이 책은 다섯 번 본 이유를 알 거 같다.&lt;/p&gt;

&lt;p&gt;이 책은 앞에 1~4장을 소개와 패턴, 프로그래밍 이론과 동기유발에 대해 간단하게 이야기하고 있다. 프로그래밍하면서 지켜야 하는 원칙에 관해서도 이야기하고 있는데, 하나하나가 사례를 들어서 이야기하면 20-30페이지는 이야기할 수 있을 거 같은 내용을 한 페이지 정도 할애해서 이야기하고 있다.&lt;/p&gt;

&lt;p&gt;그 이후에 5장부터는 실제로 사용할 수 있는 77가지 패턴을 클래스, 상태, 행위, 메소드로 나눠서 설명하고 있다. 이후에 9장과 10장에서는 컬렉션과 프레임워크에서 사용할 수 있는 패턴들을 설명하고 있다.&lt;/p&gt;

&lt;p&gt;책은 정말 좋고 중간중간 경험에서 우러나오는 인사이트들이 넘친다. 어렵고 이야기가 길어질 수 있는 개념들도 단순하게 정의하는 부분에서 대가의 풍미가 느껴진다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;클래스는 비슷한 성질을 가진 것을 총칭하며, 객체는 클래스가 구체화된 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;같은 부분은 이견의 여지가 많겠지만, 클래스와 객체에 대해 간결하게 잘 설명하였다고 생각한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;클래스의 로직과 데이터는 함께 사용되며, 로직은 데이터에 비해 변화율이 낮다. 클래스 내부의 데이터는 관련 로직에 의해 변화하며, 클래스 내부에서 사용하는 데이터의 변화율은 비슷하다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그 이외에도 생각해 볼 문장들이 많다. 효과적인 객체 지향 프로그램을 하기 위해서는 상속을 선별적으로 사용하라는 것이나, 메서드 내부에서 호출하는 다른 메서드들은 추상화 수준이 비슷해야 한다는 조언은 금과옥조와 같다.&lt;/p&gt;

&lt;p&gt;이 책의 아쉬운 점은 책이 너무 얇다는 점이다. 책이 너무 얇기 때문에, 어떤 상황에서 상속을 사용하는 것이 효율적이고 어떤 상황에서는 비효율적인지 구체적인 예를 알려주지는 않는다. 1~4장에서 프로그래밍 시 지켜야 하는 원칙 또한 하나하나 구체적으로 알려주면 좋을 거 같은데, ~ 같은 걸 지켜야 합니다. 로 넘어가고 있다. 얇은 책을 두꺼운 책보다 좋아하지만, 이건 아쉬운 지점이다.&lt;/p&gt;

&lt;p&gt;또한 9장에서는 컬렉션에 대해 논하고 있는데, 다시 봐도 이 책에 9장이 왜 필요한지 이유를 잘 모르겠다. 다른 장들에 비해서 그냥 컬렉션은 이런 상속구조입니다. 정도로 넘어가고 있는데 빼버리거나 아니면 내용을 좀 더 보강하면 좋을 거 같다.&lt;/p&gt;

&lt;p&gt;책의 내용은 너무 좋고 여러 번 읽어도 좋은 책이다.&lt;/p&gt;

&lt;h1 id=&quot;code&quot;&gt;CODE&lt;/h1&gt;
&lt;p&gt;먼저 고백하자면, 이 책은 다 못 읽었다. 25장 중에서 11장 까지밖에 못 보았다. 뒤로 갈수록 내용이 어려워지고, 하드웨어 기초가 탄탄하지 않은 나에게는 쉽지 않은 내용이었다.&lt;/p&gt;

&lt;p&gt;그래도 한번 찍어 먹어보면 맛은 알 수 있는 법. 이 책 또한 명저이다. 이 책의 저자인 찰스 펫졸드는 마이크로소프트 MVP로 윈도우 프로그래밍 쪽에는 엄청나게 유명한 분이라고 한다. 윈도우 프로그래밍은 잘 모르는 나로서는 이 분의 책은 «CODE» 가 처음인데, 놀랄 만큼 어려운 내용을 놀랄 만큼 쉽게 설명해 두었다.&lt;/p&gt;

&lt;p&gt;1장에서는 아이 두 명이 비밀 이야기를 어떻게 전송할 지로 시작하기 때문에, 이렇게 손전등을 휘두르는 것으로 설명할 수 있을까? 라는 생각이 들지만, 점자와 이진부호, 전선과 릴레이를 통해 어떻게 정보를 전달하는지에 대해 쉽게 설명하는 것을 보고 여러 번 감탄했다.&lt;/p&gt;

&lt;p&gt;전선과 릴레이, 점자와 이진부호를 보면서 지금 네트워크에서 사용하고 있는 기술들, 패리티 비트나 라우터가 갑자기 하늘에서 뿅 나타난 게 아니라 이와 같은 정보 전달 기술들이 발전해가면서 자연스럽게 발생한 것이라는 걸 알 수 있었다. 이런 기반지식을 먼저 알았더라면 좋았을 것이다.&lt;/p&gt;

&lt;p&gt;«CODE»는 펫졸드 스스로 최고의 역작이라고 뽑은 책이라고 한다. 진정한 대가이고 한 분야에 대해 깊이 통달하였다면, 어려운 지식도 어린아이가 이해할 수 있게 쓸 수 있다고 이 책은 이야기하고 있다.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>[책] 최근에 본 책들 감상</title>
    <updated>2018-03-04T09:00:00+09:00</updated>
    <dc:date>2018-03-04T09:00:00+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>rokt33r</name>
    </author>
    <id>https://rokt33r.github.io/devnotes/2018/03/05/why-i-replace-redux-with-mobx/</id>
    <link href="https://rokt33r.github.io/devnotes/2018/03/05/why-i-replace-redux-with-mobx/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;TLDR; 다음과 같은 이유로 개발시 오버헤드가 너무 크다:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;기능이 너무 부족하다.&lt;/li&gt;
  &lt;li&gt;타입스크립트와 너무 안 어울린다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이전 글에서 이어지는 내용인데, Redux엔 은근 부족한 점이 많다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;h3 id=&quot;redux-굴기&quot;&gt;Redux 굴기&lt;/h3&gt;

  &lt;p&gt;https://rokt33r.github.io/devnotes/2017/09/10/redux-rises/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;1-memoization&quot;&gt;1. Memoization&lt;/h1&gt;

&lt;p&gt;Memoization을 적재적소에 활용하는게 어렵다.
&lt;code&gt;connect&lt;/code&gt;의 &lt;code&gt;mapToStateProps&lt;/code&gt;는 기본적으로 &lt;code&gt;memoization&lt;/code&gt;이 포함되어 있지만, 제약이 너무 심하다.
스테이트 전체를 항상 보기 때문에, 지금 컴포넌트와는 상관이 없는 부분이 변경이 되어도 바뀌면 무조건 실행이 되어야한다.
일부 항목에 대해서 Memoization을 이용하려면 Reselect를 활용하면 되긴 하다. 하지만 여전히 오버헤드는 엄청나다. 스테이트에서 어떤 값을 인수로써 기억해야하는지 일일히 한땀한땀 설정을 해주어야한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const mySelector = createSelector(
  state =&amp;gt; state.value1, // 한땀
  state =&amp;gt; state.value2, // 한땀
  (value1, value2) =&amp;gt; value1 + value2
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;게다가 Typescript를 쓸 경우, 그만큼 인터페이스와 타입정의가 배로 들어간다.&lt;/p&gt;

&lt;p&gt;하지만, MobX의 경우는 기본적으로 지원한다. 게다가 당신이 신경 쓸 필요도 없다. &lt;code&gt;getter&lt;/code&gt;를 활용해 당신이 필요한 타이밍(컴포넌트가 렌더가 되는 타이밍)에 &lt;strong&gt;느긋하고(lazy) 똑똑하게(smart)&lt;/strong&gt; 처리해준다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;class myState {
    @observable value1 = 0;
    @observable value2 = 0;

    @computed get total() {
        return this.value1 + this.value2
    }
}

@observer
class MyComponent extends React.Component {
  render () {
    return &amp;lt;div&amp;gt;{this.props.myState.total}&amp;lt;/div&amp;gt;
  }
}

ReactDOM.render(&amp;lt;MyComponent myState={myState} /&amp;gt;, document.body)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;@computed&lt;/code&gt;는 값을 memoization해주고,
&lt;code&gt;@observer&lt;/code&gt;는 자기가 쓰는 값이 무엇들인지를 알아서 기억해준다.&lt;/p&gt;

&lt;p&gt;고로, 각각의 &lt;code&gt;@observer&lt;/code&gt;가 사용된 컴포넌트들은 자기가 다시 렌더해야될 근원적인 요인이 되는 값들을 자동적으로 추적하게 되므로, &lt;code&gt;connect&lt;/code&gt;나 reselect에서 하나하나 세세하게 해줬던 작업들이 아예 필요가 없어지게 된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;getter---mdn&quot;&gt;
&lt;code&gt;getter&lt;/code&gt; - MDN&lt;/h3&gt;

  &lt;p&gt;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions/get&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;2-multiple-mutations&quot;&gt;2. Multiple mutations&lt;/h1&gt;

&lt;p&gt;리액트는 모든 액션에 대해 항상 렌더를 시도한다. 하나의 액션만이라도 모든 &lt;code&gt;connect&lt;/code&gt;로 연결된 컴포넌트의 &lt;code&gt;mapStateToProps&lt;/code&gt;를 실행시킨다. 이로 인해, 스테이트의 연속적인 변경이 필요한 경우, 많은 일을 하는 액션을 만들 필요가 있는데, 이는 코드의 혼잡도를 엄청나게 올려버린다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;store.dispatch(setA())
store.dispatch(setB())
store.dispatch(setC())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;같은 경우 기능이 바뀌어서 setB를 지우려고 하면 코드 한줄만 수정하면 되지만,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;store.dispatch(setAAndBAndC())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;같은 경우, 새로운 &lt;code&gt;setAAndB&lt;/code&gt;라는 액션을 만들고, 리듀서 역시 수정이 필요하다.&lt;/p&gt;

&lt;p&gt;이를 해결하기 위해 몇가지 라이브러리들이 있지만, redux-saga같은 라이브러리랑 연동이 되는 것도 별로 없고, 타입정의는 커녕 관리도 안되는 라이브러리가 대부분이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;내가 전 회사에서 만들어둔 라이브러리이다. 필요하다면 이걸 참고하면 좋을 듯 하다. https://github.com/Revisolution/typed-redux-kit/tree/master/packages/batch-enhancer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;MobX의 경우, &lt;code&gt;@action&lt;/code&gt; 데코레이터에 뮤테이션 함수를 감싸둠으로써, 최상위 스택의 뮤테이션 함수(가장 먼저 최상단에서 불러진 액션)가 끝날 때 까지 렌더를 시키지 않는다.&lt;/p&gt;

&lt;h1 id=&quot;3-깊은-스테이트와-불변성&quot;&gt;3. 깊은 스테이트와 불변성&lt;/h1&gt;

&lt;p&gt;어떤 액션이 깊은 곳에 있는 값을 바꿀 경우, 불변성 유지를 위해 한단계씩 인스턴스를 새로 만들어 줄 필요가 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;const myReducer = (state, action) =&amp;gt; ({
  ...state,
  depth1: {
    ...state.depth1,
    depth2: {
      ...state.depth1.depth2,
      depth3: {
        ...state.depth1.depth2.depth3,
        depth4: action.payload
      },
    },
  },
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;물론 Immutable.js를 쓰면 조금 낫긴 하지만, 역시 프로퍼티값을 string으로 주고 받아야 하는 점 너무 괴롭다.
&lt;code&gt;getIn&lt;/code&gt;, &lt;code&gt;setIn&lt;/code&gt;등의 함수를 쓸 때, 스테이트 트리가 조금만이라도 깊어지면 &lt;strong&gt;테스트에 의존하지 않고는 제정신으로 코딩을 할 수가 없다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;obj.some.where.deep.underground&lt;/code&gt;같은 형태가 있고,
여기에 &lt;code&gt;where&lt;/code&gt;를 &lt;code&gt;wheree&lt;/code&gt;로 잘못 입력했다고 생각해보자.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;obj.getIn(['some', 'wheree', 'deep', 'underground'])
undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이 코드는 아무것도 알려주지 않고 &lt;code&gt;undefined&lt;/code&gt;를 뱉는다. 런타임에서도 에러가 나지 않는 만큼, 디버깅 경험은 최악에 다다른다. 몇번째 줄에서 문제가 생겼는지, 몇번째 키값이 잘못 입력됬는지를 눈으로 확인해서 고쳐야한다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;obj.some.wheree.deep.underground
Uncaught TypeError: Cannot read property 'deep' of undefined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;반면, MobX는 다음과 같이 곧바로 에러를 뱉어버리므로 그럴 여지가 없다. 또한, 키값이 문자열로 되어있지 않은만큼, 타입 추론이 가능하므로 Typescript와 잘어울린다. (&lt;code&gt;Immutable.Record&lt;/code&gt;도 프로퍼티이름으로 타입추론이 가능 하지만 &lt;code&gt;getIn&lt;/code&gt;, &lt;code&gt;setIn&lt;/code&gt;처럼 깊이 가야할 경우, 타입 추론이 불가능하다.)&lt;/p&gt;

&lt;h1 id=&quot;4-아픈-손가락과-의외로-작지않은-러닝코스트&quot;&gt;4. 아픈 손가락과 의외로 작지않은 러닝코스트&lt;/h1&gt;

&lt;p&gt;Redux는 기능을 하나 추가하려면 ActionType과 ActionCreator, 그리고 이걸 다루는 Reducer를 손대어야한다. 여기에 Typescript를 쓸경우, Action에 대한 인터페이스 역시 만들어주어야 하므로 매우 피곤하다.
그리고 &lt;code&gt;combineReducers&lt;/code&gt;를 쓰려면 &lt;strong&gt;모든 액션 인터페이스&lt;/strong&gt;를 모아서 유니언타입으로 만들어주어야 하는데, 이것도 사람 할 짓이 못된다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ts&quot;&gt;type AllAction = SetAAction | SetBAction | SetCAction | ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;말그대로 모든 액션을 다 가져와야하므로 여러 모듈로 분리된 경우 순환의존이 일어나지 않도록 신경쓸 필요까지 생긴다.&lt;/p&gt;

&lt;p&gt;그리고 &lt;code&gt;connect&lt;/code&gt;에서는 &lt;code&gt;mapStateToProps&lt;/code&gt;, &lt;code&gt;mapDispatchToProps&lt;/code&gt;, &lt;code&gt;mergeProps&lt;/code&gt;의 결과값을 인터페이스로 관리해주어야한다. 그리고 이것들은 다 제네릭으로 주고 받으므로, 타입스크립트와 리덕스에 제대로된 이해가 된 사람이 아니고는 컴파일 에러를 통과조차 못할 것이다.&lt;/p&gt;

&lt;p&gt;반면, MobX는 처음부터 Typescript로 쓰여있어서, Decorator를 언제 써야하는지만 익숙해지면 매우 심리스하게 개발을 할 수 있다. &lt;strong&gt;어떤 값이 기억되야하는지, 언제 컴포넌트를 다시 렌더링해야하는지&lt;/strong&gt;를 알아서 통제해주는 만큼, 이걸 직접 구축해야하는 Redux와 비교하면 훨씬 손가락이 안아프고 쉽지 않을까 생각한다.&lt;/p&gt;

&lt;h1 id=&quot;마무리&quot;&gt;마무리&lt;/h1&gt;

&lt;p&gt;위의 이유들로 개발중인 앱들을 &lt;strong&gt;MobX로 바꾼 이후, 다시 타입스크립트로 하는 리액트 개발이 즐거워진거 같다.&lt;/strong&gt; 써보면 확실히 개발에 소요되는 시간이 단축되는게 느껴질 것이다. 만약 당신이 타입스크립트를 쓰고 있고, 나와 비슷한 고통을 받고 있다면 꼭 MobX를 써보길 바란다.&lt;/p&gt;

&lt;p&gt;단, &lt;strong&gt;처음 리액트를 사용하는 사람이면 Redux부터 다뤄보길 권한다.&lt;/strong&gt; 왜 MobX의 이러한 기능들이 절실한지, 먼저 Redux로 무언가를 만들고 나면 엄청 체감하지 않을까?&lt;/p&gt;

&lt;h1 id=&quot;추신-그럼-넌-왜-이제서야-쓰냐&quot;&gt;추신: 그럼 넌 왜 이제서야 쓰냐?&lt;/h1&gt;

&lt;p&gt;솔직하게 말해 나의 쓸데없는 자존심 때문이었다. Redux가 순수한 함수형 프로그래밍인만큼 라이브러리에 대해 신뢰도가 높고, 고로 내가 통제가능한 코드를 쓸 수 있지 않겠느냐여서다. 처음 MobX를 썻을 때, &lt;code&gt;componentShouldUpdate&lt;/code&gt;가 작동하지 않는걸 보고, React의 기본적인 라이프사이클에 영향을 주는게 조금 불쾌했던거 같다.
그 이외 자잘한 핑계는 데코레이터 정도일까? Babel의 데코레이터는 아직까지도 스펙대로 구현이 개선 안된 상태가 계속 이어지고 있다. 단, 타입스크립트 컴파일러에서의 구현은 잘 되어있으므로 타입스크립트를 쓴다면 딱히 신경 쓸 필요가 없는 듯 하다.&lt;/p&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>왜 내가 Redux 대신 MobX를 쓰게 되었나</title>
    <updated>2018-03-05T04:00:00+09:00</updated>
    <dc:date>2018-03-05T04:00:00+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>YodaCodd</name>
    </author>
    <id>https://medium.com/@codesquad_yoda/%EA%BE%B8%EC%A4%80%ED%95%A8%EA%B3%BC-%EC%A7%80%EC%86%8D%EC%84%B1%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC-c980092857ac?source=rss-733fb59c3025------2</id>
    <link href="https://medium.com/@codesquad_yoda/%EA%BE%B8%EC%A4%80%ED%95%A8%EA%B3%BC-%EC%A7%80%EC%86%8D%EC%84%B1%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC-c980092857ac?source=rss-733fb59c3025------2"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;p&gt;안녕하세요? 코드스쿼드입니다. 오늘은 지속성에 대해 짧게 글을 쓰려고 합니다.&lt;/p&gt;
&lt;p&gt;여러분 JQuery라고 아시죠? 2006년에 존 레식이라는 분이 만들었습니다. 요즘은 리엑트, Vue 등이 대세지만 그 시절만 해도 JQuery의 인기는 엄청났습니다.&lt;/p&gt;
&lt;p&gt;사실 존 레식은 1984년생이니 당시 나이가 22세입니다! 두둥! 저는 22살에 막 군대에 입대해서 바보가 되었을 당시인데 충격적입니다. 그런데 존 레식은 어떻게 이런 탁월함을 가지게 되었을까요?&lt;/p&gt;
&lt;p&gt;살짝 존 레식의 깃헙을 살펴봅시다. 주소는 &lt;a href=&quot;https://github.com/jeresig&quot;&gt;https://github.com/jeresig&lt;/a&gt; 인데요. 몇년치 커밋로그를 살펴 봤습니다.&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/751/1*4L6gVV18OEVso1tzaWo6xQ.png&quot;&gt;&lt;figcaption&gt;2014년 존 레식 커밋 기록&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/756/1*HoP61vLsgwihS22VNYP2WQ.png&quot;&gt;&lt;figcaption&gt;2015년 존 레식 커밋 기록&lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/743/1*NroYgvIGZ_i0fv4s0fQY1g.png&quot;&gt;&lt;figcaption&gt;2016년 존 레식 커밋 기록&lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;존 레식이 대단한 JS 개발자가 된 이유는 여러가지가 있겠습니다만, 위 그림을 보면 더 이상 무슨 말이 필요할까요?&lt;/p&gt;
&lt;p&gt;우리 (혹은 저)의 목표는 세계 제일의 개발자가 되는 건 아닙니다. 그냥 회사 안팎에서 인정을 받고 싶거나, 혹은 행복하게 밥 먹고 살수 있는 개발자가 꿈인 분들도 많겠죠? 그렇다면 엄청난 재능보다는 꾸준함이 정말 중요할 것 같아요.&lt;/p&gt;
&lt;p&gt;너무 흔한 이야기지만 중요한 이야기라서 점심시간에 짧게 써 봤습니다. 항상 즐거운 마음으로 여러분이 이루려는 목표에 다가가세요!&lt;/p&gt;
&lt;p&gt;고품질 소프트웨어 교육기업 코드스쿼드(codesquad.kr)입니다. 저희가 대신 꿈을 이뤄드릴 수는 없지만 함께 도와 드릴 수는 있습니다. :D&lt;/p&gt;
&lt;img src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=c980092857ac&quot; width=&quot;1&quot; height=&quot;1&quot;&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>꾸준함과 지속성에 대하여</title>
    <updated>2018-03-09T12:45:58+09:00</updated>
    <dc:date>2018-03-09T12:45:58+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>이종립</name>
    </author>
    <id>https://johngrib.github.io/wiki/Object-hashCode/</id>
    <link href="https://johngrib.github.io/wiki/Object-hashCode/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;

</summary>
    <title>java.lang.Object.hashCode 메소드</title>
    <updated>2018-03-10T18:45:35+09:00</updated>
    <dc:date>2018-03-10T18:45:35+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>이종립</name>
    </author>
    <id>https://johngrib.github.io/wiki/Object-equals/</id>
    <link href="https://johngrib.github.io/wiki/Object-equals/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;

</summary>
    <title>java.lang.Object.equals 메소드</title>
    <updated>2018-03-08T23:00:25+09:00</updated>
    <dc:date>2018-03-08T23:00:25+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>이종립</name>
    </author>
    <id>https://johngrib.github.io/wiki/Shortcat/</id>
    <link href="https://johngrib.github.io/wiki/Shortcat/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;

</summary>
    <title>Shortcat</title>
    <updated>2018-03-07T21:14:05+09:00</updated>
    <dc:date>2018-03-07T21:14:05+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>이종립</name>
    </author>
    <id>https://johngrib.github.io/wiki/use-java-primitive-type-for-performance/</id>
    <link href="https://johngrib.github.io/wiki/use-java-primitive-type-for-performance/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;&lt;p&gt;Long, Integer보다 primitive 타입을 쓰는 쪽이 훨씬 빠르다&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>Java Autoboxing 자동 변환 주의점</title>
    <updated>2018-03-05T16:22:11+09:00</updated>
    <dc:date>2018-03-05T16:22:11+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>이종립</name>
    </author>
    <id>https://johngrib.github.io/wiki/private-constructor/</id>
    <link href="https://johngrib.github.io/wiki/private-constructor/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;&lt;p&gt;private 생성자를 선언한다&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>Java에서 객체가 생성되는 것을 막는 방법</title>
    <updated>2018-03-05T16:17:51+09:00</updated>
    <dc:date>2018-03-05T16:17:51+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>이종립</name>
    </author>
    <id>https://johngrib.github.io/wiki/Java/</id>
    <link href="https://johngrib.github.io/wiki/Java/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;

</summary>
    <title>Java</title>
    <updated>2018-03-05T16:14:12+09:00</updated>
    <dc:date>2018-03-05T16:14:12+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>이종립</name>
    </author>
    <id>https://johngrib.github.io/wiki/static-factory-method-pattern/</id>
    <link href="https://johngrib.github.io/wiki/static-factory-method-pattern/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;&lt;p&gt;static 메서드로 객체 생성을 캡슐화한다&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>정적 팩토리 메서드(static factory method)</title>
    <updated>2018-03-04T13:03:09+09:00</updated>
    <dc:date>2018-03-04T13:03:09+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>이종립</name>
    </author>
    <id>https://johngrib.github.io/wiki/vimium/</id>
    <link href="https://johngrib.github.io/wiki/vimium/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;&lt;p&gt;웹 브라우저에서 Vim 키맵을 사용할 수 있다&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>Vimium - The hacker's browser</title>
    <updated>2018-03-04T01:15:09+09:00</updated>
    <dc:date>2018-03-04T01:15:09+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>이종립</name>
    </author>
    <id>https://johngrib.github.io/wiki/web-browser-extension/</id>
    <link href="https://johngrib.github.io/wiki/web-browser-extension/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;

</summary>
    <title>유용한 웹 브라우저 확장 프로그램 모음</title>
    <updated>2018-03-04T00:38:25+09:00</updated>
    <dc:date>2018-03-04T00:38:25+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>이종립</name>
    </author>
    <id>https://johngrib.github.io/wiki/mac-apps/</id>
    <link href="https://johngrib.github.io/wiki/mac-apps/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;

</summary>
    <title>유용한 Mac 애플리케이션 모음</title>
    <updated>2018-03-03T19:45:04+09:00</updated>
    <dc:date>2018-03-03T19:45:04+09:00</dc:date>
  </entry>
  <entry>
    <author>
      <name>Joshua</name>
    </author>
    <id>https://joshua1988.github.io/web-development/vuejs/vue-router-navigation-guards/</id>
    <link href="https://joshua1988.github.io/web-development/vuejs/vue-router-navigation-guards/"/>
    <summary>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;
&lt;html&gt;&lt;body&gt;
&lt;nav class=&quot;toc&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#%EB%84%A4%EB%B9%84%EA%B2%8C%EC%9D%B4%EC%85%98-%EA%B0%80%EB%93%9C%EB%9E%80&quot; id=&quot;markdown-toc-네비게이션-가드란&quot;&gt;네비게이션 가드란?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#%EB%84%A4%EB%B9%84%EA%B2%8C%EC%9D%B4%EC%85%98-%EA%B0%80%EB%93%9C%EC%9D%98-%EC%A2%85%EB%A5%98&quot; id=&quot;markdown-toc-네비게이션-가드의-종류&quot;&gt;네비게이션 가드의 종류&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#%EC%A0%84%EC%97%AD-%EA%B0%80%EB%93%9C&quot; id=&quot;markdown-toc-전역-가드&quot;&gt;전역 가드&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#%EC%A0%84%EC%97%AD-%EA%B0%80%EB%93%9C-%EB%8F%99%EC%9E%91-%EC%98%88%EC%A0%9C&quot; id=&quot;markdown-toc-전역-가드-동작-예제&quot;&gt;전역 가드 동작 예제&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#%EC%A0%84%EC%97%AD-%EA%B0%80%EB%93%9C%EB%A1%9C-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%9D%B8%EC%A6%9D%ED%95%98%EA%B8%B0&quot; id=&quot;markdown-toc-전역-가드로-페이지-인증하기&quot;&gt;전역 가드로 페이지 인증하기&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#%EB%9D%BC%EC%9A%B0%ED%84%B0-%EA%B0%80%EB%93%9C%EC%99%80-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EA%B0%80%EB%93%9C&quot; id=&quot;markdown-toc-라우터-가드와-컴포넌트-가드&quot;&gt;라우터 가드와 컴포넌트 가드&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/nav&gt;

&lt;h2 id=&quot;네비게이션-가드란&quot;&gt;네비게이션 가드란?&lt;/h2&gt;
&lt;p&gt;네비게이션 가드(navigation guard)란 뷰 라우터로 특정 URL에 접근할 때 해당 URL의 접근을 막는 방법을 말합니다.
예를 들어, 사용자의 인증 정보가 없으면 특정 페이지에 접근하지 못하게 할 때 사용하는 기술입니다.&lt;/p&gt;

&lt;h2 id=&quot;네비게이션-가드의-종류&quot;&gt;네비게이션 가드의 종류&lt;/h2&gt;
&lt;p&gt;네비게이션 가드의 종류는 아래와 같이 3가지가 있습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;애플리케이션 전역에서 동작하는 &lt;strong&gt;전역 가드&lt;/strong&gt;
&lt;/li&gt;
  &lt;li&gt;특정 URL에서만 동작하는 &lt;strong&gt;라우터 가드&lt;/strong&gt;
&lt;/li&gt;
  &lt;li&gt;라우터 컴포넌트 안에 정의하는 &lt;strong&gt;컴포넌트 가드&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;전역-가드&quot;&gt;전역 가드&lt;/h2&gt;
&lt;p&gt;전역 가드는 라우터 인스턴스를 참조하는 객체로 설정할 수 있습니다.
그러면 전역 가드 설정 방법을 알아보겠습니다.&lt;/p&gt;

&lt;p&gt;먼저, 전역 가드 설정을 위해 먼저 아래와 같이 라우터 인스턴스를 생성합니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VueRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다음으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;router&lt;/code&gt; 변수에 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;.beforeEach()&lt;/code&gt; API를 호출합니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// to : 이동할 url&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// from : 현재 url&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// next : to에서 지정한 url로 이동하기 위해 꼭 호출해야 하는 함수&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;여기서 &lt;code class=&quot;highlighter-rouge&quot;&gt;beforeEach()&lt;/code&gt;를 호출하면 다음과 같이 3개의 인자를 받습니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;to : 이동할 url 정보가 담긴 라우터 객체&lt;/li&gt;
  &lt;li&gt;from : 현재 url 정보가 담긴 라우터 객체&lt;/li&gt;
  &lt;li&gt;next : to에서 지정한 url로 이동하기 위해 꼭 호출해야 하는 함수&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;router.beforeEach()&lt;/code&gt;를 호출하고 나면 모든 라우팅이 대기 상태가 됩니다.
원래 url이 변경되고 나면 해당 url에 따라 화면이 자연스럽게 전환되어야 하는데
전역 가드를 설정했기 때문에 화면이 전환되지 않습니다. 여기서 해당 url로 라우팅 하기 위해서는 next()를 호출해줘야 합니다.
next()가 호출되기 전까지 화면이 전환되지 않습니다.&lt;/p&gt;

&lt;h2 id=&quot;전역-가드-동작-예제&quot;&gt;전역 가드 동작 예제&lt;/h2&gt;
&lt;p&gt;앞에서 설명한 전역 가드의 동작 방식을 이해하기 위해 아래와 같은 라우터 코드를 준비하였습니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 라우터 컴포넌트&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Login&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;p&amp;gt;Login Component&amp;lt;/p&amp;gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Home&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;p&amp;gt;Home Component&amp;lt;/p&amp;gt;'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 라우팅 정보&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VueRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Login&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/home'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Home&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://jsfiddle.net/Captain_Pangyo/28gcwnxc/&quot;&gt;전체 실행 코드 확인 - jsfiddle&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;위 코드의 실행 결과는 아래와 같습니다.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/vuejs/nav-guards/router-sample.gif&quot;&gt;
	&lt;figcaption&gt;뷰 기본 라우터 예제&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;여기서 전역 가드를 설정하는 코드를 아래와 같이 추가합니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'every single routing is pending'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 ‘/login’이나 ‘/home’으로 이동하더라도 라우팅이 되지 않고 아래와 같이 로그만 출력됩니다.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/vuejs/nav-guards/navigation%20guard.gif&quot;&gt;
  &lt;figcaption&gt;전역 가드 설정 때문에 페이지는 이동하지 않고 대신 로그만 출력하는 화면&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;만약 원하는 url로 이동하고 싶으면 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;next()&lt;/code&gt;를 호출하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;전역-가드로-페이지-인증하기&quot;&gt;전역 가드로 페이지 인증하기&lt;/h2&gt;
&lt;p&gt;전역 가드를 실제 애플리케이션 로직에 어떻게 적용할 수 있는지 살펴보겠습니다.
앞에서 살펴본 예제의 Login 컴포넌트에 다음과 같이 meta 정보를 추가하였습니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VueRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// meta 정보에 authRequired라는 Boolean 값 추가&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authRequired&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/home'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Home&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;beforeEach()&lt;/code&gt;의 콜백 함수에 사용자 인증 여부를 체크하는 로직을 추가합니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// to: 이동할 url에 해당하는 라우팅 객체&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;matched&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;routeInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;routeInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authRequired&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 이동할 페이지에 인증 정보가 필요하면 경고 창을 띄우고 페이지 전환은 하지 않음&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Login Please!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;routing success : '&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 페이지 전환&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 이동하려는 페이지에 만약 인증 정보가 필요하면 경고 창을 띄우고 화면은 전환하지 않는 코드입니다.
뷰 라우터 인스턴스에서 ‘/login’에 해당하는 라우터 객체에만 &lt;code class=&quot;highlighter-rouge&quot;&gt;authRequired&lt;/code&gt; 값을 설정해놨기 때문에
‘/home’ 페이지로 이동할 때는 &lt;code class=&quot;highlighter-rouge&quot;&gt;next()&lt;/code&gt;로 페이지를 이상 없이 전환합니다. 위 코드를 실행한 결과는 아래와 같습니다.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://joshua1988.github.io/images/posts/web/vuejs/nav-guards/nav-guard-auth.gif&quot;&gt;
	&lt;figcaption&gt;인증 값이 필요한 페이지는 라우팅을 막는 화면&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p class=&quot;notice&quot;&gt;위 예제에서 사용한 .some()은 자바스크립트 내장 API입니다. 지정된 배열의 모든 요소를 검사하여 조건을 만족시키면 true 값을 반환하고, 아니면 false 값을 반환합니다.&lt;/p&gt;

&lt;h2 id=&quot;라우터-가드와-컴포넌트-가드&quot;&gt;라우터 가드와 컴포넌트 가드&lt;/h2&gt;
&lt;p&gt;앞에서 살펴본 전역 가드와 마찬가지로 라우터 가드와 컴포넌트 가드도 같은 원리로 동작합니다.
다만 URL 이동을 막기 위해 사용하는 API만 조금 다릅니다.&lt;/p&gt;

&lt;h4 id=&quot;라우터-가드&quot;&gt;라우터 가드&lt;/h4&gt;
&lt;p&gt;전체 라우팅이 아니라 특정 라우팅에 대해서 가드를 설정하는 방법은 아래와 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;VueRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;beforeEnter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 인증 값 검증 로직 추가&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;컴포넌트-가드&quot;&gt;컴포넌트 가드&lt;/h4&gt;
&lt;p&gt;라우터로 지정된 특정 컴포넌트에 가드를 설정하는 방법은 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Login&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;p&amp;gt;Login Component&amp;lt;/p&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;beforeRouteEnter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Login 컴포넌트가 화면에 표시되기 전에 수행될 로직&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Login 컴포넌트는 아직 생성되지 않은 시점&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;beforeRouteUpdate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 화면에 표시된 컴포넌트가 변경될 때 수행될 로직&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// `this`로 Login 컴포넌트를 접근할 수 있음&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;beforeRouteLeave&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Login 컴포넌트를 화면에 표시한 url 값이 변경되기 직전의 로직&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// `this`로 Login 컴포넌트를 접근할 수 있음&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/body&gt;&lt;/html&gt;
</summary>
    <title>(중급) Vue.js 라우터 네비게이션 가드 알아보기</title>
    <updated>2018-03-05T20:59:32+09:00</updated>
    <dc:date>2018-03-05T20:59:32+09:00</dc:date>
  </entry>
  <dc:date>2018-03-17T12:27:00+09:00</dc:date>
</feed>